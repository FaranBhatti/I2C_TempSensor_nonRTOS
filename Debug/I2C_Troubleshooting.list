
I2C_Troubleshooting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08009e70  08009e70  00019e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2ac  0800a2ac  0001a2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a2b0  0800a2b0  0001a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0800a2b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e8  0800a49c  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000248  0800a4fc  00020248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  240002a8  0800a55c  000202a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240009c4  0800a55c  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdbd  00000000  00000000  000202d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002def  00000000  00000000  0003d093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003fe88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038907  00000000  00000000  000423a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019266  00000000  00000000  0007aca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00160f77  00000000  00000000  00093f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f4e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006050  00000000  00000000  001f4ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a8 	.word	0x240002a8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009e58 	.word	0x08009e58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ac 	.word	0x240002ac
 80002dc:	08009e58 	.word	0x08009e58

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800069c:	1d39      	adds	r1, r7, #4
 800069e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a2:	2201      	movs	r2, #1
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <__io_putchar+0x20>)
 80006a6:	f005 faff 	bl	8005ca8 <HAL_UART_Transmit>
  return ch;
 80006aa:	687b      	ldr	r3, [r7, #4]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	24000400 	.word	0x24000400

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 feb2 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f820 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f9a8 	bl	8000a18 <MX_GPIO_Init>
  MX_ETH_Init();
 80006c8:	f000 f89c 	bl	8000804 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 f926 	bl	800091c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d0:	f000 f970 	bl	80009b4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006d4:	f000 f8e2 	bl	800089c <MX_I2C2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    // Read temperature data
    read_temp(&temperature);
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <main+0x44>)
 80006da:	f000 fa8d 	bl	8000bf8 <read_temp>
    
    // Print the result
    printf("Current temperature is: %.4f\r\n", temperature);
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <main+0x44>)
 80006e0:	edd3 7a00 	vldr	s15, [r3]
 80006e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e8:	ec53 2b17 	vmov	r2, r3, d7
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <main+0x48>)
 80006ee:	f007 fb6d 	bl	8007dcc <iprintf>

    // Delay 100ms
    HAL_Delay(100);
 80006f2:	2064      	movs	r0, #100	; 0x64
 80006f4:	f000 ff28 	bl	8001548 <HAL_Delay>
    read_temp(&temperature);
 80006f8:	e7ee      	b.n	80006d8 <main+0x20>
 80006fa:	bf00      	nop
 80006fc:	240009a0 	.word	0x240009a0
 8000700:	08009e70 	.word	0x08009e70

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	; 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	224c      	movs	r2, #76	; 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 ff10 	bl	8007538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 ff0a 	bl	8007538 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f002 fc13 	bl	8002f50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <SystemClock_Config+0xf8>)
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	4a32      	ldr	r2, [pc, #200]	; (80007fc <SystemClock_Config+0xf8>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <SystemClock_Config+0xf8>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <SystemClock_Config+0xfc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <SystemClock_Config+0xfc>)
 800074e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <SystemClock_Config+0xfc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <SystemClock_Config+0xfc>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000770:	2303      	movs	r3, #3
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077a:	2301      	movs	r3, #1
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800078e:	2318      	movs	r3, #24
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fc18 	bl	8002fe4 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007ba:	f000 fa55 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	; 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f858 	bl	8003898 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ee:	f000 fa3b 	bl	8000c68 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3770      	adds	r7, #112	; 0x70
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58000400 	.word	0x58000400
 8000800:	58024800 	.word	0x58024800

08000804 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_ETH_Init+0x80>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <MX_ETH_Init+0x84>)
 800080c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ETH_Init+0x88>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ETH_Init+0x88>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ETH_Init+0x88>)
 800081c:	22e1      	movs	r2, #225	; 0xe1
 800081e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ETH_Init+0x88>)
 8000822:	2200      	movs	r2, #0
 8000824:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ETH_Init+0x88>)
 8000828:	2200      	movs	r2, #0
 800082a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ETH_Init+0x88>)
 800082e:	2200      	movs	r2, #0
 8000830:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_ETH_Init+0x80>)
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_ETH_Init+0x88>)
 8000836:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_ETH_Init+0x80>)
 800083a:	2201      	movs	r2, #1
 800083c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_ETH_Init+0x80>)
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_ETH_Init+0x8c>)
 8000842:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_ETH_Init+0x80>)
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_ETH_Init+0x90>)
 8000848:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ETH_Init+0x80>)
 800084c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000850:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_ETH_Init+0x80>)
 8000854:	f000 ffa0 	bl	8001798 <HAL_ETH_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 fa03 	bl	8000c68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000862:	2238      	movs	r2, #56	; 0x38
 8000864:	2100      	movs	r1, #0
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ETH_Init+0x94>)
 8000868:	f006 fe66 	bl	8007538 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_ETH_Init+0x94>)
 800086e:	2221      	movs	r2, #33	; 0x21
 8000870:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_ETH_Init+0x94>)
 8000874:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000878:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_ETH_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	240002fc 	.word	0x240002fc
 8000888:	40028000 	.word	0x40028000
 800088c:	240009a4 	.word	0x240009a4
 8000890:	24000248 	.word	0x24000248
 8000894:	240001e8 	.word	0x240001e8
 8000898:	240002c4 	.word	0x240002c4

0800089c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_I2C2_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_I2C2_Init+0x74>)
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <MX_I2C2_Init+0x7c>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_I2C2_Init+0x74>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <MX_I2C2_Init+0x74>)
 80008d8:	f001 fd4c 	bl	8002374 <HAL_I2C_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e2:	f000 f9c1 	bl	8000c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <MX_I2C2_Init+0x74>)
 80008ea:	f002 f951 	bl	8002b90 <HAL_I2CEx_ConfigAnalogFilter>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f4:	f000 f9b8 	bl	8000c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2C2_Init+0x74>)
 80008fc:	f002 f993 	bl	8002c26 <HAL_I2CEx_ConfigDigitalFilter>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f9af 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	240003ac 	.word	0x240003ac
 8000914:	40005800 	.word	0x40005800
 8000918:	10707dbc 	.word	0x10707dbc

0800091c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_USART3_UART_Init+0x94>)
 8000924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000966:	f005 f94f 	bl	8005c08 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f97a 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_USART3_UART_Init+0x90>)
 8000978:	f006 f9df 	bl	8006d3a <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 f971 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800098a:	f006 fa14 	bl	8006db6 <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 f968 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_USART3_UART_Init+0x90>)
 800099a:	f006 f995 	bl	8006cc8 <HAL_UARTEx_DisableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 f960 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000400 	.word	0x24000400
 80009b0:	40004800 	.word	0x40004800

080009b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c0:	2209      	movs	r2, #9
 80009c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	f002 f95f 	bl	8002cbe <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a06:	f000 f92f 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	24000494 	.word	0x24000494
 8000a14:	40080000 	.word	0x40080000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b6c      	ldr	r3, [pc, #432]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a6a      	ldr	r2, [pc, #424]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b68      	ldr	r3, [pc, #416]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4c:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a63      	ldr	r2, [pc, #396]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a54:	f043 0320 	orr.w	r3, r3, #32
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0320 	and.w	r3, r3, #32
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a5b      	ldr	r2, [pc, #364]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a98:	4b51      	ldr	r3, [pc, #324]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac4:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	4a45      	ldr	r2, [pc, #276]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	4a3d      	ldr	r2, [pc, #244]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af2:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b00:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	4a36      	ldr	r2, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b10:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b24:	482f      	ldr	r0, [pc, #188]	; (8000be4 <MX_GPIO_Init+0x1cc>)
 8000b26:	f001 fc0b 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b30:	482d      	ldr	r0, [pc, #180]	; (8000be8 <MX_GPIO_Init+0x1d0>)
 8000b32:	f001 fc05 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Outpt3_3V_GPIO_Port, Outpt3_3V_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	482c      	ldr	r0, [pc, #176]	; (8000bec <MX_GPIO_Init+0x1d4>)
 8000b3c:	f001 fc00 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2102      	movs	r1, #2
 8000b44:	4829      	ldr	r0, [pc, #164]	; (8000bec <MX_GPIO_Init+0x1d4>)
 8000b46:	f001 fbfb 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4824      	ldr	r0, [pc, #144]	; (8000bf0 <MX_GPIO_Init+0x1d8>)
 8000b60:	f001 fa3e 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b64:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4819      	ldr	r0, [pc, #100]	; (8000be4 <MX_GPIO_Init+0x1cc>)
 8000b7e:	f001 fa2f 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4813      	ldr	r0, [pc, #76]	; (8000be8 <MX_GPIO_Init+0x1d0>)
 8000b9c:	f001 fa20 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0x1dc>)
 8000bb6:	f001 fa13 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Outpt3_3V_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Outpt3_3V_Pin|LD2_Pin;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_GPIO_Init+0x1d4>)
 8000bd2:	f001 fa05 	bl	8001fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	; 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58020400 	.word	0x58020400
 8000be8:	58020c00 	.word	0x58020c00
 8000bec:	58021000 	.word	0x58021000
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58021800 	.word	0x58021800

08000bf8 <read_temp>:
 * @param address MAX30205 address (8 bits)
 * @param temp pointer to target memory for temperature data
 * @retval HAL status
 */
HAL_StatusTypeDef read_temp(float *temp)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]

	// register to hold two bytes of temp data
	uint8_t tempData[2];

	// Get temperature data
	ret = HAL_I2C_Mem_Read(&hi2c2, ((uint16_t)(max30205_chip.temp_sensor_addr) | 0x01), max30205_chip.temp_reg, 1, tempData, sizeof(tempData), 50);
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <read_temp+0x68>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <read_temp+0x68>)
 8000c0e:	785b      	ldrb	r3, [r3, #1]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	2332      	movs	r3, #50	; 0x32
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2302      	movs	r3, #2
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	4810      	ldr	r0, [pc, #64]	; (8000c64 <read_temp+0x6c>)
 8000c24:	f001 fc36 	bl	8002494 <HAL_I2C_Mem_Read>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	73fb      	strb	r3, [r7, #15]

	// Detect if it was successfull
	if (ret != HAL_OK)
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <read_temp+0x3e>
	{
		return ret;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	e00f      	b.n	8000c56 <read_temp+0x5e>
	}

	// Convert to temperature (Datasheet shows powers of 2 in temperature deg C)
	*temp = ( (tempData[0] << 8) | tempData[1]) / 256;
 8000c36:	7b3b      	ldrb	r3, [r7, #12]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	7b7a      	ldrb	r2, [r7, #13]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	da00      	bge.n	8000c44 <read_temp+0x4c>
 8000c42:	33ff      	adds	r3, #255	; 0xff
 8000c44:	121b      	asrs	r3, r3, #8
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	edc3 7a00 	vstr	s15, [r3]

	return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	24000000 	.word	0x24000000
 8000c64:	240003ac 	.word	0x240003ac

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_MspInit+0x30>)
 8000c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x30>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x30>)
 8000c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a59      	ldr	r2, [pc, #356]	; (8000e2c <HAL_ETH_MspInit+0x184>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	f040 80ab 	bne.w	8000e22 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ccc:	4b58      	ldr	r3, [pc, #352]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd2:	4a57      	ldr	r2, [pc, #348]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cdc:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000cea:	4b51      	ldr	r3, [pc, #324]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfa:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d08:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d0e:	4a48      	ldr	r2, [pc, #288]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d18:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	4a39      	ldr	r2, [pc, #228]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <HAL_ETH_MspInit+0x188>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d9e:	2332      	movs	r3, #50	; 0x32
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dae:	230b      	movs	r3, #11
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	481e      	ldr	r0, [pc, #120]	; (8000e34 <HAL_ETH_MspInit+0x18c>)
 8000dba:	f001 f911 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dbe:	2386      	movs	r3, #134	; 0x86
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dce:	230b      	movs	r3, #11
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <HAL_ETH_MspInit+0x190>)
 8000dda:	f001 f901 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df0:	230b      	movs	r3, #11
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4810      	ldr	r0, [pc, #64]	; (8000e3c <HAL_ETH_MspInit+0x194>)
 8000dfc:	f001 f8f0 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e12:	230b      	movs	r3, #11
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <HAL_ETH_MspInit+0x198>)
 8000e1e:	f001 f8df 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3738      	adds	r7, #56	; 0x38
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40028000 	.word	0x40028000
 8000e30:	58024400 	.word	0x58024400
 8000e34:	58020800 	.word	0x58020800
 8000e38:	58020000 	.word	0x58020000
 8000e3c:	58020400 	.word	0x58020400
 8000e40:	58021800 	.word	0x58021800

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ba      	sub	sp, #232	; 0xe8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	22c0      	movs	r2, #192	; 0xc0
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 fb67 	bl	8007538 <memset>
  if(hi2c->Instance==I2C2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_I2C_MspInit+0xc4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d145      	bne.n	8000f00 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e74:	f04f 0208 	mov.w	r2, #8
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 f890 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e96:	f7ff fee7 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_I2C_MspInit+0xc8>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_I2C_MspInit+0xc8>)
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_I2C_MspInit+0xc8>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <HAL_I2C_MspInit+0xcc>)
 8000ede:	f001 f87f 	bl	8001fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_I2C_MspInit+0xc8>)
 8000ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_I2C_MspInit+0xc8>)
 8000eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_I2C_MspInit+0xc8>)
 8000ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	37e8      	adds	r7, #232	; 0xe8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58021400 	.word	0x58021400

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ba      	sub	sp, #232	; 0xe8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	22c0      	movs	r2, #192	; 0xc0
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 faff 	bl	8007538 <memset>
  if(huart->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <HAL_UART_MspInit+0xc8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d146      	bne.n	8000fd2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f44:	f04f 0202 	mov.w	r2, #2
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 f828 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f66:	f7ff fe7f 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_UART_MspInit+0xcc>)
 8000f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0xcc>)
 8000f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_UART_MspInit+0xcc>)
 8000f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0xcc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0xcc>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_UART_MspInit+0xcc>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_UART_MspInit+0xd0>)
 8000fce:	f001 f807 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	37e8      	adds	r7, #232	; 0xe8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40004800 	.word	0x40004800
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020c00 	.word	0x58020c00

08000fe8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ba      	sub	sp, #232	; 0xe8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	22c0      	movs	r2, #192	; 0xc0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f006 fa95 	bl	8007538 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <HAL_PCD_MspInit+0xec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d159      	bne.n	80010cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001018:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001024:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	4618      	mov	r0, r3
 8001032:	f002 ffbd 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800103c:	f7ff fe14 	bl	8000c68 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001040:	f001 ffc0 	bl	8002fc4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_PCD_MspInit+0xf0>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <HAL_PCD_MspInit+0xf0>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_PCD_MspInit+0xf0>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001062:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800107c:	230a      	movs	r3, #10
 800107e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001086:	4619      	mov	r1, r3
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <HAL_PCD_MspInit+0xf4>)
 800108a:	f000 ffa9 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <HAL_PCD_MspInit+0xf4>)
 80010aa:	f000 ff99 	bl	8001fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_PCD_MspInit+0xf0>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_PCD_MspInit+0xf0>)
 80010b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_PCD_MspInit+0xf0>)
 80010c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	37e8      	adds	r7, #232	; 0xe8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40080000 	.word	0x40080000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58020000 	.word	0x58020000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f9ec 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return 1;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_kill>:

int _kill(int pid, int sig)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800114e:	f006 f9c9 	bl	80074e4 <__errno>
 8001152:	4603      	mov	r3, r0
 8001154:	2216      	movs	r2, #22
 8001156:	601a      	str	r2, [r3, #0]
  return -1;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_exit>:

void _exit (int status)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffe7 	bl	8001144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001176:	e7fe      	b.n	8001176 <_exit+0x12>

08001178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00a      	b.n	80011a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800118a:	f3af 8000 	nop.w
 800118e:	4601      	mov	r1, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf0      	blt.n	800118a <_read+0x12>
  }

  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e009      	b.n	80011d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fa61 	bl	8000694 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf1      	blt.n	80011c4 <_write+0x12>
  }
  return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_close>:

int _close(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001212:	605a      	str	r2, [r3, #4]
  return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_isatty>:

int _isatty(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f006 f92e 	bl	80074e4 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	24080000 	.word	0x24080000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	240009ac 	.word	0x240009ac
 80012bc:	240009c8 	.word	0x240009c8

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <SystemInit+0xe4>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a36      	ldr	r2, [pc, #216]	; (80013a4 <SystemInit+0xe4>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <SystemInit+0xe8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d807      	bhi.n	80012f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <SystemInit+0xe8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 030f 	bic.w	r3, r3, #15
 80012e8:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <SystemInit+0xe8>)
 80012ea:	f043 0307 	orr.w	r3, r3, #7
 80012ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <SystemInit+0xec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <SystemInit+0xec>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <SystemInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <SystemInit+0xec>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4929      	ldr	r1, [pc, #164]	; (80013ac <SystemInit+0xec>)
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <SystemInit+0xf0>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <SystemInit+0xe8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <SystemInit+0xe8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 030f 	bic.w	r3, r3, #15
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <SystemInit+0xe8>)
 8001324:	f043 0307 	orr.w	r3, r3, #7
 8001328:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <SystemInit+0xec>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <SystemInit+0xec>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <SystemInit+0xec>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <SystemInit+0xec>)
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <SystemInit+0xf4>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <SystemInit+0xec>)
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <SystemInit+0xf8>)
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <SystemInit+0xec>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <SystemInit+0xfc>)
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <SystemInit+0xec>)
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <SystemInit+0xfc>)
 8001358:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <SystemInit+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0xec>)
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <SystemInit+0xfc>)
 8001364:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <SystemInit+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <SystemInit+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <SystemInit+0xec>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <SystemInit+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <SystemInit+0x100>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <SystemInit+0x104>)
 8001384:	4013      	ands	r3, r2
 8001386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800138a:	d202      	bcs.n	8001392 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <SystemInit+0x108>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <SystemInit+0x10c>)
 8001394:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001398:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	52002000 	.word	0x52002000
 80013ac:	58024400 	.word	0x58024400
 80013b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013b4:	02020200 	.word	0x02020200
 80013b8:	01ff0000 	.word	0x01ff0000
 80013bc:	01010280 	.word	0x01010280
 80013c0:	5c001000 	.word	0x5c001000
 80013c4:	ffff0000 	.word	0xffff0000
 80013c8:	51008108 	.word	0x51008108
 80013cc:	52004000 	.word	0x52004000

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d4:	f7ff ff74 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013da:	490d      	ldr	r1, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f0:	4c0a      	ldr	r4, [pc, #40]	; (800141c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f006 f877 	bl	80074f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff f959 	bl	80006b8 <main>
  bx  lr
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800140c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001410:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001414:	0800a2b4 	.word	0x0800a2b4
  ldr r2, =_sbss
 8001418:	240002a8 	.word	0x240002a8
  ldr r4, =_ebss
 800141c:	240009c4 	.word	0x240009c4

08001420 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC3_IRQHandler>
	...

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f982 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001430:	f002 fbe8 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	4913      	ldr	r1, [pc, #76]	; (8001490 <HAL_Init+0x6c>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_Init+0x68>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_Init+0x6c>)
 8001458:	5cd3      	ldrb	r3, [r2, r3]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_Init+0x70>)
 8001466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_Init+0x74>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f814 	bl	800149c <HAL_InitTick>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e002      	b.n	8001484 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800147e:	f7ff fbf9 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	58024400 	.word	0x58024400
 8001490:	08009e90 	.word	0x08009e90
 8001494:	2400000c 	.word	0x2400000c
 8001498:	24000008 	.word	0x24000008

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_InitTick+0x60>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e021      	b.n	80014f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_InitTick+0x64>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_InitTick+0x60>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f959 	bl	800177e <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f000 f931 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x68>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	24000014 	.word	0x24000014
 8001500:	24000008 	.word	0x24000008
 8001504:	24000010 	.word	0x24000010

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	24000014 	.word	0x24000014
 800152c:	240009b0 	.word	0x240009b0

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	240009b0 	.word	0x240009b0

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	24000014 	.word	0x24000014

08001590 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetREVID+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0c1b      	lsrs	r3, r3, #16
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	5c001000 	.word	0x5c001000

080015a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	58000400 	.word	0x58000400

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff47 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb2 	bl	80016f0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0cf      	b.n	800194a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d106      	bne.n	80017c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2223      	movs	r2, #35	; 0x23
 80017b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fa73 	bl	8000ca8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_ETH_Init+0x1bc>)
 80017c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c8:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_ETH_Init+0x1bc>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <HAL_ETH_Init+0x1bc>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7a1b      	ldrb	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fedd 	bl	80015a8 <HAL_SYSCFG_ETHInterfaceSelect>
 80017ee:	e003      	b.n	80017f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017f0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017f4:	f7ff fed8 	bl	80015a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017f8:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_ETH_Init+0x1c0>)
 80017fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001812:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff fe8c 	bl	8001530 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800181a:	e011      	b.n	8001840 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800181c:	f7ff fe88 	bl	8001530 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800182a:	d909      	bls.n	8001840 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2204      	movs	r2, #4
 8001830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	22e0      	movs	r2, #224	; 0xe0
 8001838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e084      	b.n	800194a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e4      	bne.n	800181c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f886 	bl	8001964 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001858:	f002 fb4e 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 800185c:	4603      	mov	r3, r0
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <HAL_ETH_Init+0x1c4>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	0c9a      	lsrs	r2, r3, #18
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3a01      	subs	r2, #1
 800186c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fa71 	bl	8001d58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001882:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800188e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001892:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	22e0      	movs	r2, #224	; 0xe0
 80018ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e049      	b.n	800194a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_ETH_Init+0x1c8>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6952      	ldr	r2, [r2, #20]
 80018ca:	0051      	lsls	r1, r2, #1
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fad9 	bl	8001e92 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb1f 	bl	8001f24 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	3305      	adds	r3, #5
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	021a      	lsls	r2, r3, #8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	3303      	adds	r3, #3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	061a      	lsls	r2, r3, #24
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	3302      	adds	r3, #2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	041b      	lsls	r3, r3, #16
 8001918:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	3301      	adds	r3, #1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001924:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001932:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001934:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2210      	movs	r2, #16
 8001944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	58024400 	.word	0x58024400
 8001958:	58000400 	.word	0x58000400
 800195c:	431bde83 	.word	0x431bde83
 8001960:	ffff8001 	.word	0xffff8001

08001964 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001974:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800197c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800197e:	f002 fabb 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8001982:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d908      	bls.n	800199e <HAL_ETH_SetMDIOClockRange+0x3a>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d804      	bhi.n	800199e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e027      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d908      	bls.n	80019b8 <HAL_ETH_SetMDIOClockRange+0x54>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d204      	bcs.n	80019b8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e01a      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d303      	bcc.n	80019c8 <HAL_ETH_SetMDIOClockRange+0x64>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d911      	bls.n	80019ec <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d908      	bls.n	80019e2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_ETH_SetMDIOClockRange+0xac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d804      	bhi.n	80019e2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e005      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e000      	b.n	80019ee <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80019ec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	01312cff 	.word	0x01312cff
 8001a04:	02160ebf 	.word	0x02160ebf
 8001a08:	03938700 	.word	0x03938700
 8001a0c:	05f5e0ff 	.word	0x05f5e0ff
 8001a10:	08f0d17f 	.word	0x08f0d17f

08001a14 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	791b      	ldrb	r3, [r3, #4]
 8001a2c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7b1b      	ldrb	r3, [r3, #12]
 8001a34:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7b5b      	ldrb	r3, [r3, #13]
 8001a3c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7b9b      	ldrb	r3, [r3, #14]
 8001a44:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	7bdb      	ldrb	r3, [r3, #15]
 8001a4c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	7c12      	ldrb	r2, [r2, #16]
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d102      	bne.n	8001a5e <ETH_SetMACConfig+0x4a>
 8001a58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a5c:	e000      	b.n	8001a60 <ETH_SetMACConfig+0x4c>
 8001a5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	7c52      	ldrb	r2, [r2, #17]
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d102      	bne.n	8001a70 <ETH_SetMACConfig+0x5c>
 8001a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a6e:	e000      	b.n	8001a72 <ETH_SetMACConfig+0x5e>
 8001a70:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7c9b      	ldrb	r3, [r3, #18]
 8001a78:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a7a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a80:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	7f5b      	ldrb	r3, [r3, #29]
 8001a94:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	7f92      	ldrb	r2, [r2, #30]
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d102      	bne.n	8001aa6 <ETH_SetMACConfig+0x92>
 8001aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa4:	e000      	b.n	8001aa8 <ETH_SetMACConfig+0x94>
 8001aa6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001aa8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	7fdb      	ldrb	r3, [r3, #31]
 8001aae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001ab0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d102      	bne.n	8001ac2 <ETH_SetMACConfig+0xae>
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac0:	e000      	b.n	8001ac4 <ETH_SetMACConfig+0xb0>
 8001ac2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001ac4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ad2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001ad4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <ETH_SetMACConfig+0x22c>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001afe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b12:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b1c:	2a00      	cmp	r2, #0
 8001b1e:	d102      	bne.n	8001b26 <ETH_SetMACConfig+0x112>
 8001b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b24:	e000      	b.n	8001b28 <ETH_SetMACConfig+0x114>
 8001b26:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b28:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <ETH_SetMACConfig+0x230>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <ETH_SetMACConfig+0x234>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d101      	bne.n	8001b86 <ETH_SetMACConfig+0x172>
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0x174>
 8001b86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b88:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b9a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001bb0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bb8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f023 0103 	bic.w	r1, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001bde:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d101      	bne.n	8001c02 <ETH_SetMACConfig+0x1ee>
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	e000      	b.n	8001c04 <ETH_SetMACConfig+0x1f0>
 8001c02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	00048083 	.word	0x00048083
 8001c44:	c0f88000 	.word	0xc0f88000
 8001c48:	fffffef0 	.word	0xfffffef0

08001c4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <ETH_SetDMAConfig+0xf8>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6811      	ldr	r1, [r2, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c72:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
 8001c84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <ETH_SetDMAConfig+0xfc>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7b5b      	ldrb	r3, [r3, #13]
 8001caa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <ETH_SetDMAConfig+0x100>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cd0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7d1b      	ldrb	r3, [r3, #20]
 8001cdc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7f5b      	ldrb	r3, [r3, #29]
 8001ce4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <ETH_SetDMAConfig+0x104>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d06:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	7f1b      	ldrb	r3, [r3, #28]
 8001d0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <ETH_SetDMAConfig+0x108>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d34:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	ffff87fd 	.word	0xffff87fd
 8001d48:	ffff2ffe 	.word	0xffff2ffe
 8001d4c:	fffec000 	.word	0xfffec000
 8001d50:	ffc0efef 	.word	0xffc0efef
 8001d54:	7fc0ffff 	.word	0x7fc0ffff

08001d58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0a4      	sub	sp, #144	; 0x90
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d66:	2300      	movs	r3, #0
 8001d68:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001db0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001df0:	2320      	movs	r3, #32
 8001df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e32:	2300      	movs	r3, #0
 8001e34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fde6 	bl	8001a14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fee1 	bl	8001c4c <ETH_SetDMAConfig>
}
 8001e8a:	bf00      	nop
 8001e8c:	3790      	adds	r7, #144	; 0x90
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e01d      	b.n	8001edc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68d9      	ldr	r1, [r3, #12]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	3206      	adds	r2, #6
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d9de      	bls.n	8001ea0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e023      	b.n	8001f7a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6919      	ldr	r1, [r3, #16]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	3212      	adds	r2, #18
 8001f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d9d8      	bls.n	8001f32 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fee:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_GPIO_Init+0x234>)
 8001ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ff2:	e194      	b.n	800231e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8186 	beq.w	8002318 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_GPIO_Init+0x44>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d017      	beq.n	80020c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d123      	bne.n	8002116 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80e0 	beq.w	8002318 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_GPIO_Init+0x238>)
 800215a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800215e:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <HAL_GPIO_Init+0x238>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_GPIO_Init+0x238>)
 800216a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002176:	4a29      	ldr	r2, [pc, #164]	; (800221c <HAL_GPIO_Init+0x23c>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a20      	ldr	r2, [pc, #128]	; (8002220 <HAL_GPIO_Init+0x240>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d052      	beq.n	8002248 <HAL_GPIO_Init+0x268>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_GPIO_Init+0x244>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_GPIO_Init+0x22e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <HAL_GPIO_Init+0x248>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x22a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_GPIO_Init+0x24c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x226>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_GPIO_Init+0x250>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x222>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <HAL_GPIO_Init+0x254>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x21e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_GPIO_Init+0x258>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x21a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_GPIO_Init+0x25c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x216>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x260>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x212>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_GPIO_Init+0x264>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x20e>
 80021ea:	2309      	movs	r3, #9
 80021ec:	e02d      	b.n	800224a <HAL_GPIO_Init+0x26a>
 80021ee:	230a      	movs	r3, #10
 80021f0:	e02b      	b.n	800224a <HAL_GPIO_Init+0x26a>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e029      	b.n	800224a <HAL_GPIO_Init+0x26a>
 80021f6:	2307      	movs	r3, #7
 80021f8:	e027      	b.n	800224a <HAL_GPIO_Init+0x26a>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e025      	b.n	800224a <HAL_GPIO_Init+0x26a>
 80021fe:	2305      	movs	r3, #5
 8002200:	e023      	b.n	800224a <HAL_GPIO_Init+0x26a>
 8002202:	2304      	movs	r3, #4
 8002204:	e021      	b.n	800224a <HAL_GPIO_Init+0x26a>
 8002206:	2303      	movs	r3, #3
 8002208:	e01f      	b.n	800224a <HAL_GPIO_Init+0x26a>
 800220a:	2302      	movs	r3, #2
 800220c:	e01d      	b.n	800224a <HAL_GPIO_Init+0x26a>
 800220e:	2301      	movs	r3, #1
 8002210:	e01b      	b.n	800224a <HAL_GPIO_Init+0x26a>
 8002212:	bf00      	nop
 8002214:	58000080 	.word	0x58000080
 8002218:	58024400 	.word	0x58024400
 800221c:	58000400 	.word	0x58000400
 8002220:	58020000 	.word	0x58020000
 8002224:	58020400 	.word	0x58020400
 8002228:	58020800 	.word	0x58020800
 800222c:	58020c00 	.word	0x58020c00
 8002230:	58021000 	.word	0x58021000
 8002234:	58021400 	.word	0x58021400
 8002238:	58021800 	.word	0x58021800
 800223c:	58021c00 	.word	0x58021c00
 8002240:	58022000 	.word	0x58022000
 8002244:	58022400 	.word	0x58022400
 8002248:	2300      	movs	r3, #0
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225a:	4938      	ldr	r1, [pc, #224]	; (800233c <HAL_GPIO_Init+0x35c>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800228e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3301      	adds	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	f47f ae63 	bne.w	8001ff4 <HAL_GPIO_Init+0x14>
  }
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	3724      	adds	r7, #36	; 0x24
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	58000400 	.word	0x58000400

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fd52 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e006      	b.n	80023fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d104      	bne.n	800240e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800240c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_I2C_Init+0x11c>)
 800241a:	430b      	orrs	r3, r1
 800241c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69d9      	ldr	r1, [r3, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	02008000 	.word	0x02008000

08002494 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	4608      	mov	r0, r1
 800249e:	4611      	mov	r1, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	817b      	strh	r3, [r7, #10]
 80024a6:	460b      	mov	r3, r1
 80024a8:	813b      	strh	r3, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	f040 80fd 	bne.w	80026b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x34>
 80024c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0f1      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Mem_Read+0x4e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e0ea      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ea:	f7ff f821 	bl	8001530 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f95b 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0d5      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2222      	movs	r2, #34	; 0x22
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002534:	88f8      	ldrh	r0, [r7, #6]
 8002536:	893a      	ldrh	r2, [r7, #8]
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4603      	mov	r3, r0
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f8bf 	bl	80026c8 <I2C_RequestMemoryRead>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ad      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2bff      	cmp	r3, #255	; 0xff
 8002564:	d90e      	bls.n	8002584 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_I2C_Mem_Read+0x22c>)
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fad5 	bl	8002b2c <I2C_TransferConfig>
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_I2C_Mem_Read+0x22c>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fac4 	bl	8002b2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	2200      	movs	r2, #0
 80025ac:	2104      	movs	r1, #4
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f902 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07c      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d034      	beq.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d130      	bne.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	2200      	movs	r2, #0
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f8d3 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e04d      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	2bff      	cmp	r3, #255	; 0xff
 8002624:	d90e      	bls.n	8002644 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	b2da      	uxtb	r2, r3
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	2300      	movs	r3, #0
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fa75 	bl	8002b2c <I2C_TransferConfig>
 8002642:	e00f      	b.n	8002664 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	b2da      	uxtb	r2, r3
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	2300      	movs	r3, #0
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa64 	bl	8002b2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d19a      	bne.n	80025a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f936 	bl	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e01a      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2220      	movs	r2, #32
 8002688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_I2C_Mem_Read+0x230>)
 8002696:	400b      	ands	r3, r1
 8002698:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	80002400 	.word	0x80002400
 80026c4:	fe00e800 	.word	0xfe00e800

080026c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <I2C_RequestMemoryRead+0xa4>)
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fa1c 	bl	8002b2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8ac 	bl	8002856 <I2C_WaitOnTXISFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e02c      	b.n	8002762 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800270e:	893b      	ldrh	r3, [r7, #8]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
 8002718:	e015      	b.n	8002746 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800271a:	893b      	ldrh	r3, [r7, #8]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f892 	bl	8002856 <I2C_WaitOnTXISFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e012      	b.n	8002762 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800273c:	893b      	ldrh	r3, [r7, #8]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	2200      	movs	r2, #0
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f831 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	80002000 	.word	0x80002000

08002770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d103      	bne.n	800278e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d007      	beq.n	80027ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	619a      	str	r2, [r3, #24]
  }
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c8:	e031      	b.n	800282e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d0:	d02d      	beq.n	800282e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe fead 	bl	8001530 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d122      	bne.n	800282e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	429a      	cmp	r2, r3
 8002804:	d113      	bne.n	800282e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f043 0220 	orr.w	r2, r3, #32
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	429a      	cmp	r2, r3
 800284a:	d0be      	beq.n	80027ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002862:	e033      	b.n	80028cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f87f 	bl	800296c <I2C_IsErrorOccurred>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e031      	b.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287e:	d025      	beq.n	80028cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002880:	f7fe fe56 	bl	8001530 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	d302      	bcc.n	8002896 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d11a      	bne.n	80028cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d013      	beq.n	80028cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e007      	b.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d1c4      	bne.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f0:	e02f      	b.n	8002952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f838 	bl	800296c <I2C_IsErrorOccurred>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e02d      	b.n	8002962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe fe13 	bl	8001530 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11a      	bne.n	8002952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b20      	cmp	r3, #32
 8002928:	d013      	beq.n	8002952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e007      	b.n	8002962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b20      	cmp	r3, #32
 800295e:	d1c8      	bne.n	80028f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d068      	beq.n	8002a6a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2210      	movs	r2, #16
 800299e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a0:	e049      	b.n	8002a36 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a8:	d045      	beq.n	8002a36 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7fe fdc1 	bl	8001530 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <I2C_IsErrorOccurred+0x54>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d13a      	bne.n	8002a36 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e2:	d121      	bne.n	8002a28 <I2C_IsErrorOccurred+0xbc>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ea:	d01d      	beq.n	8002a28 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d01a      	beq.n	8002a28 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a02:	f7fe fd95 	bl	8001530 <HAL_GetTick>
 8002a06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a08:	e00e      	b.n	8002a28 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a0a:	f7fe fd91 	bl	8001530 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b19      	cmp	r3, #25
 8002a16:	d907      	bls.n	8002a28 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f043 0320 	orr.w	r3, r3, #32
 8002a1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a26:	e006      	b.n	8002a36 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d1e9      	bne.n	8002a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d003      	beq.n	8002a4c <I2C_IsErrorOccurred+0xe0>
 8002a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0aa      	beq.n	80029a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff fe45 	bl	8002770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <I2C_IsErrorOccurred+0x1bc>)
 8002af2:	400b      	ands	r3, r1
 8002af4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3728      	adds	r7, #40	; 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	fe00e800 	.word	0xfe00e800

08002b2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	817b      	strh	r3, [r7, #10]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b44:	7a7b      	ldrb	r3, [r7, #9]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	0d5b      	lsrs	r3, r3, #21
 8002b66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <I2C_TransferConfig+0x60>)
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	ea02 0103 	and.w	r1, r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	03ff63ff 	.word	0x03ff63ff

08002b90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d138      	bne.n	8002c18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e032      	b.n	8002c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2224      	movs	r2, #36	; 0x24
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0201 	bic.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002be2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c18:	2302      	movs	r3, #2
  }
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d139      	bne.n	8002cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e033      	b.n	8002cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2224      	movs	r2, #36	; 0x24
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc0:	b08f      	sub	sp, #60	; 0x3c
 8002cc2:	af0a      	add	r7, sp, #40	; 0x28
 8002cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e116      	b.n	8002efe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe f97c 	bl	8000fe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 f94c 	bl	8006fac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	687e      	ldr	r6, [r7, #4]
 8002d1c:	466d      	mov	r5, sp
 8002d1e:	f106 0410 	add.w	r4, r6, #16
 8002d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d32:	1d33      	adds	r3, r6, #4
 8002d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f004 f8ca 	bl	8006ed0 <USB_CoreInit>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0d7      	b.n	8002efe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 f93a 	bl	8006fce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e04a      	b.n	8002df6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	333d      	adds	r3, #61	; 0x3d
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	333c      	adds	r3, #60	; 0x3c
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	b298      	uxth	r0, r3
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3356      	adds	r3, #86	; 0x56
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3340      	adds	r3, #64	; 0x40
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3344      	adds	r3, #68	; 0x44
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3348      	adds	r3, #72	; 0x48
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	3301      	adds	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d3af      	bcc.n	8002d60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e044      	b.n	8002e90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d3b5      	bcc.n	8002e06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	687e      	ldr	r6, [r7, #4]
 8002ea2:	466d      	mov	r5, sp
 8002ea4:	f106 0410 	add.w	r4, r6, #16
 8002ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb8:	1d33      	adds	r3, r6, #4
 8002eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	f004 f8d3 	bl	8007068 <USB_DevInit>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e014      	b.n	8002efe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d102      	bne.n	8002ef2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f80b 	bl	8002f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fa91 	bl	800741e <USB_DevDisconnect>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_PCDEx_ActivateLPM+0x44>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	10000003 	.word	0x10000003

08002f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d00a      	beq.n	8002f7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d001      	beq.n	8002f76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e01f      	b.n	8002fb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e01d      	b.n	8002fb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f023 0207 	bic.w	r2, r3, #7
 8002f82:	490f      	ldr	r1, [pc, #60]	; (8002fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f8a:	f7fe fad1 	bl	8001530 <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f90:	e009      	b.n	8002fa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f92:	f7fe facd 	bl	8001530 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e007      	b.n	8002fb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_PWREx_ConfigSupply+0x70>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	58024800 	.word	0x58024800

08002fc4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	58024800 	.word	0x58024800

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	; 0x30
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f000 bc48 	b.w	8003888 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8088 	beq.w	8003116 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003006:	4b99      	ldr	r3, [pc, #612]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003010:	4b96      	ldr	r3, [pc, #600]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2b10      	cmp	r3, #16
 800301a:	d007      	beq.n	800302c <HAL_RCC_OscConfig+0x48>
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	2b18      	cmp	r3, #24
 8003020:	d111      	bne.n	8003046 <HAL_RCC_OscConfig+0x62>
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d10c      	bne.n	8003046 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	4b8f      	ldr	r3, [pc, #572]	; (800326c <HAL_RCC_OscConfig+0x288>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d06d      	beq.n	8003114 <HAL_RCC_OscConfig+0x130>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d169      	bne.n	8003114 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f000 bc21 	b.w	8003888 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x7a>
 8003050:	4b86      	ldr	r3, [pc, #536]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a85      	ldr	r2, [pc, #532]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	e02e      	b.n	80030bc <HAL_RCC_OscConfig+0xd8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x9c>
 8003066:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a80      	ldr	r2, [pc, #512]	; (800326c <HAL_RCC_OscConfig+0x288>)
 800306c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b7e      	ldr	r3, [pc, #504]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7d      	ldr	r2, [pc, #500]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xd8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0xc0>
 800308a:	4b78      	ldr	r3, [pc, #480]	; (800326c <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a77      	ldr	r2, [pc, #476]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b75      	ldr	r3, [pc, #468]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a74      	ldr	r2, [pc, #464]	; (800326c <HAL_RCC_OscConfig+0x288>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xd8>
 80030a4:	4b71      	ldr	r3, [pc, #452]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a70      	ldr	r2, [pc, #448]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b6e      	ldr	r3, [pc, #440]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6d      	ldr	r2, [pc, #436]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fa34 	bl	8001530 <HAL_GetTick>
 80030c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fa30 	bl	8001530 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e3d4      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xe8>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fa20 	bl	8001530 <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fa1c 	bl	8001530 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e3c0      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003106:	4b59      	ldr	r3, [pc, #356]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x110>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80ca 	beq.w	80032b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003124:	4b51      	ldr	r3, [pc, #324]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800312c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800312e:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_RCC_OscConfig+0x166>
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	2b18      	cmp	r3, #24
 800313e:	d156      	bne.n	80031ee <HAL_RCC_OscConfig+0x20a>
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d151      	bne.n	80031ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800314a:	4b48      	ldr	r3, [pc, #288]	; (800326c <HAL_RCC_OscConfig+0x288>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x17e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e392      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003162:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 0219 	bic.w	r2, r3, #25
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	493f      	ldr	r1, [pc, #252]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f9dc 	bl	8001530 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe f9d8 	bl	8001530 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e37c      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	f7fe f9f9 	bl	8001590 <HAL_GetREVID>
 800319e:	4603      	mov	r3, r0
 80031a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d817      	bhi.n	80031d8 <HAL_RCC_OscConfig+0x1f4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d108      	bne.n	80031c2 <HAL_RCC_OscConfig+0x1de>
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031b8:	4a2c      	ldr	r2, [pc, #176]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	e07a      	b.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	031b      	lsls	r3, r3, #12
 80031d0:	4926      	ldr	r1, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d6:	e06f      	b.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	061b      	lsls	r3, r3, #24
 80031e6:	4921      	ldr	r1, [pc, #132]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ec:	e064      	b.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d047      	beq.n	8003286 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCC_OscConfig+0x288>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0219 	bic.w	r2, r3, #25
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	491a      	ldr	r1, [pc, #104]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe f992 	bl	8001530 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe f98e 	bl	8001530 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e332      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	f7fe f9af 	bl	8001590 <HAL_GetREVID>
 8003232:	4603      	mov	r3, r0
 8003234:	f241 0203 	movw	r2, #4099	; 0x1003
 8003238:	4293      	cmp	r3, r2
 800323a:	d819      	bhi.n	8003270 <HAL_RCC_OscConfig+0x28c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d108      	bne.n	8003256 <HAL_RCC_OscConfig+0x272>
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800324c:	4a07      	ldr	r2, [pc, #28]	; (800326c <HAL_RCC_OscConfig+0x288>)
 800324e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003252:	6053      	str	r3, [r2, #4]
 8003254:	e030      	b.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	031b      	lsls	r3, r3, #12
 8003264:	4901      	ldr	r1, [pc, #4]	; (800326c <HAL_RCC_OscConfig+0x288>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
 800326a:	e025      	b.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
 800326c:	58024400 	.word	0x58024400
 8003270:	4b9a      	ldr	r3, [pc, #616]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	4997      	ldr	r1, [pc, #604]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
 8003284:	e018      	b.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b95      	ldr	r3, [pc, #596]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a94      	ldr	r2, [pc, #592]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe f94d 	bl	8001530 <HAL_GetTick>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe f949 	bl	8001530 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e2ed      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032ac:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a9 	beq.w	8003418 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c6:	4b85      	ldr	r3, [pc, #532]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032d0:	4b82      	ldr	r3, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d007      	beq.n	80032ec <HAL_RCC_OscConfig+0x308>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b18      	cmp	r3, #24
 80032e0:	d13a      	bne.n	8003358 <HAL_RCC_OscConfig+0x374>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d135      	bne.n	8003358 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ec:	4b7b      	ldr	r3, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x320>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e2c1      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003304:	f7fe f944 	bl	8001590 <HAL_GetREVID>
 8003308:	4603      	mov	r3, r0
 800330a:	f241 0203 	movw	r2, #4099	; 0x1003
 800330e:	4293      	cmp	r3, r2
 8003310:	d817      	bhi.n	8003342 <HAL_RCC_OscConfig+0x35e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	2b20      	cmp	r3, #32
 8003318:	d108      	bne.n	800332c <HAL_RCC_OscConfig+0x348>
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003322:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003328:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800332a:	e075      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	069b      	lsls	r3, r3, #26
 800333a:	4968      	ldr	r1, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003340:	e06a      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003342:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	4962      	ldr	r1, [pc, #392]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003356:	e05f      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d042      	beq.n	80033e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003360:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5d      	ldr	r2, [pc, #372]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe f8e0 	bl	8001530 <HAL_GetTick>
 8003370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003374:	f7fe f8dc 	bl	8001530 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e280      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003386:	4b55      	ldr	r3, [pc, #340]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003392:	f7fe f8fd 	bl	8001590 <HAL_GetREVID>
 8003396:	4603      	mov	r3, r0
 8003398:	f241 0203 	movw	r2, #4099	; 0x1003
 800339c:	4293      	cmp	r3, r2
 800339e:	d817      	bhi.n	80033d0 <HAL_RCC_OscConfig+0x3ec>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d108      	bne.n	80033ba <HAL_RCC_OscConfig+0x3d6>
 80033a8:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80033b0:	4a4a      	ldr	r2, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033b6:	6053      	str	r3, [r2, #4]
 80033b8:	e02e      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
 80033ba:	4b48      	ldr	r3, [pc, #288]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	069b      	lsls	r3, r3, #26
 80033c8:	4944      	ldr	r1, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
 80033ce:	e023      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	493f      	ldr	r1, [pc, #252]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
 80033e4:	e018      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80033ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe f89d 	bl	8001530 <HAL_GetTick>
 80033f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033fa:	f7fe f899 	bl	8001530 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e23d      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800340c:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d036      	beq.n	8003492 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fe f87a 	bl	8001530 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fe f876 	bl	8001530 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e21a      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x45c>
 800345e:	e018      	b.n	8003492 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe f860 	bl	8001530 <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7fe f85c 	bl	8001530 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e200      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d039      	beq.n	8003512 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f83d 	bl	8001530 <HAL_GetTick>
 80034b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ba:	f7fe f839 	bl	8001530 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1dd      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x4d6>
 80034d8:	e01b      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
 80034da:	bf00      	nop
 80034dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034e0:	4b9b      	ldr	r3, [pc, #620]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a9a      	ldr	r2, [pc, #616]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80034e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ec:	f7fe f820 	bl	8001530 <HAL_GetTick>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f4:	f7fe f81c 	bl	8001530 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e1c0      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003506:	4b92      	ldr	r3, [pc, #584]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8081 	beq.w	8003622 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003520:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCC_OscConfig+0x770>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a8b      	ldr	r2, [pc, #556]	; (8003754 <HAL_RCC_OscConfig+0x770>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800352c:	f7fe f800 	bl	8001530 <HAL_GetTick>
 8003530:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fd fffc 	bl	8001530 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1a0      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003546:	4b83      	ldr	r3, [pc, #524]	; (8003754 <HAL_RCC_OscConfig+0x770>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x584>
 800355a:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	e02d      	b.n	80035c4 <HAL_RCC_OscConfig+0x5e0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x5a6>
 8003570:	4b77      	ldr	r3, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a76      	ldr	r2, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
 800357c:	4b74      	ldr	r3, [pc, #464]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a73      	ldr	r2, [pc, #460]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003582:	f023 0304 	bic.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x5e0>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x5c8>
 8003592:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a6e      	ldr	r2, [pc, #440]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a6b      	ldr	r2, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x5e0>
 80035ac:	4b68      	ldr	r3, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a67      	ldr	r2, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	4b65      	ldr	r3, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a64      	ldr	r2, [pc, #400]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035be:	f023 0304 	bic.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd ffb0 	bl	8001530 <HAL_GetTick>
 80035d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fd ffac 	bl	8001530 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e14e      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ea:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ee      	beq.n	80035d4 <HAL_RCC_OscConfig+0x5f0>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fd ff9a 	bl	8001530 <HAL_GetTick>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd ff96 	bl	8001530 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e138      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003616:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1ee      	bne.n	8003600 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 812d 	beq.w	8003886 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003634:	2b18      	cmp	r3, #24
 8003636:	f000 80bd 	beq.w	80037b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b02      	cmp	r3, #2
 8003640:	f040 809e 	bne.w	8003780 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a41      	ldr	r2, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800364a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd ff6e 	bl	8001530 <HAL_GetTick>
 8003654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd ff6a 	bl	8001530 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e10e      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <HAL_RCC_OscConfig+0x774>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003686:	0112      	lsls	r2, r2, #4
 8003688:	430a      	orrs	r2, r1
 800368a:	4931      	ldr	r1, [pc, #196]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	628b      	str	r3, [r1, #40]	; 0x28
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	3b01      	subs	r3, #1
 8003696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	3b01      	subs	r3, #1
 80036a0:	025b      	lsls	r3, r3, #9
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	3b01      	subs	r3, #1
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	3b01      	subs	r3, #1
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036c0:	4923      	ldr	r1, [pc, #140]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d6:	4b21      	ldr	r3, [pc, #132]	; (800375c <HAL_RCC_OscConfig+0x778>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	491b      	ldr	r1, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f023 020c 	bic.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4917      	ldr	r1, [pc, #92]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036f8:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f023 0202 	bic.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	4912      	ldr	r1, [pc, #72]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_RCC_OscConfig+0x76c>)
 8003740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fef3 	bl	8001530 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800374c:	e011      	b.n	8003772 <HAL_RCC_OscConfig+0x78e>
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
 8003754:	58024800 	.word	0x58024800
 8003758:	fffffc0c 	.word	0xfffffc0c
 800375c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fd fee6 	bl	8001530 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e08a      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x77c>
 800377e:	e082      	b.n	8003886 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a42      	ldr	r2, [pc, #264]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fd fed0 	bl	8001530 <HAL_GetTick>
 8003790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fecc 	bl	8001530 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e070      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a6:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x7b0>
 80037b2:	e068      	b.n	8003886 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037b4:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037ba:	4b35      	ldr	r3, [pc, #212]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d031      	beq.n	800382c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0203 	and.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d12a      	bne.n	800382c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d122      	bne.n	800382c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d11a      	bne.n	800382c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	0a5b      	lsrs	r3, r3, #9
 80037fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d108      	bne.n	800382c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	0e1b      	lsrs	r3, r3, #24
 800381e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02b      	b.n	8003888 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800383a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	429a      	cmp	r2, r3
 8003844:	d01f      	beq.n	8003886 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	4a11      	ldr	r2, [pc, #68]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003852:	f7fd fe6d 	bl	8001530 <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003858:	bf00      	nop
 800385a:	f7fd fe69 	bl	8001530 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	4293      	cmp	r3, r2
 8003864:	d0f9      	beq.n	800385a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <HAL_RCC_OscConfig+0x8b0>)
 800386c:	4013      	ands	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003872:	00d2      	lsls	r2, r2, #3
 8003874:	4906      	ldr	r1, [pc, #24]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003876:	4313      	orrs	r3, r2
 8003878:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_RCC_OscConfig+0x8ac>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	58024400 	.word	0x58024400
 8003894:	ffff0007 	.word	0xffff0007

08003898 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e19c      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d910      	bls.n	80038dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b87      	ldr	r3, [pc, #540]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 020f 	bic.w	r2, r3, #15
 80038c2:	4985      	ldr	r1, [pc, #532]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b83      	ldr	r3, [pc, #524]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e184      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d908      	bls.n	800390a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038f8:	4b78      	ldr	r3, [pc, #480]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4975      	ldr	r1, [pc, #468]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003906:	4313      	orrs	r3, r2
 8003908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	4b70      	ldr	r3, [pc, #448]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003922:	429a      	cmp	r2, r3
 8003924:	d908      	bls.n	8003938 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003926:	4b6d      	ldr	r3, [pc, #436]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	496a      	ldr	r1, [pc, #424]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003950:	429a      	cmp	r2, r3
 8003952:	d908      	bls.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003954:	4b61      	ldr	r3, [pc, #388]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	495e      	ldr	r1, [pc, #376]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800397e:	429a      	cmp	r2, r3
 8003980:	d908      	bls.n	8003994 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4953      	ldr	r1, [pc, #332]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003990:	4313      	orrs	r3, r2
 8003992:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d908      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f023 020f 	bic.w	r2, r3, #15
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4947      	ldr	r1, [pc, #284]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d055      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039ce:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4940      	ldr	r1, [pc, #256]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0f6      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0ea      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0de      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0d6      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4925      	ldr	r1, [pc, #148]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4a:	f7fd fd71 	bl	8001530 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a52:	f7fd fd6d 	bl	8001530 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0be      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a68:	4b1c      	ldr	r3, [pc, #112]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d1eb      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d208      	bcs.n	8003aa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f023 020f 	bic.w	r2, r3, #15
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	490e      	ldr	r1, [pc, #56]	; (8003adc <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d214      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 020f 	bic.w	r2, r3, #15
 8003abe:	4906      	ldr	r1, [pc, #24]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <HAL_RCC_ClockConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e086      	b.n	8003be6 <HAL_RCC_ClockConfig+0x34e>
 8003ad8:	52002000 	.word	0x52002000
 8003adc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d208      	bcs.n	8003b0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003afc:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	4939      	ldr	r1, [pc, #228]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d208      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	492e      	ldr	r1, [pc, #184]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d208      	bcs.n	8003b6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4922      	ldr	r1, [pc, #136]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d010      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d208      	bcs.n	8003b98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b98:	f000 f834 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	4912      	ldr	r1, [pc, #72]	; (8003bf4 <HAL_RCC_ClockConfig+0x35c>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x358>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <HAL_RCC_ClockConfig+0x35c>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x360>)
 8003bce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x364>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x368>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd fc5e 	bl	800149c <HAL_InitTick>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	08009e90 	.word	0x08009e90
 8003bf8:	2400000c 	.word	0x2400000c
 8003bfc:	24000008 	.word	0x24000008
 8003c00:	24000010 	.word	0x24000010

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c0a:	4bb3      	ldr	r3, [pc, #716]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c12:	2b18      	cmp	r3, #24
 8003c14:	f200 8155 	bhi.w	8003ec2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003ec3 	.word	0x08003ec3
 8003c28:	08003ec3 	.word	0x08003ec3
 8003c2c:	08003ec3 	.word	0x08003ec3
 8003c30:	08003ec3 	.word	0x08003ec3
 8003c34:	08003ec3 	.word	0x08003ec3
 8003c38:	08003ec3 	.word	0x08003ec3
 8003c3c:	08003ec3 	.word	0x08003ec3
 8003c40:	08003cab 	.word	0x08003cab
 8003c44:	08003ec3 	.word	0x08003ec3
 8003c48:	08003ec3 	.word	0x08003ec3
 8003c4c:	08003ec3 	.word	0x08003ec3
 8003c50:	08003ec3 	.word	0x08003ec3
 8003c54:	08003ec3 	.word	0x08003ec3
 8003c58:	08003ec3 	.word	0x08003ec3
 8003c5c:	08003ec3 	.word	0x08003ec3
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003ec3 	.word	0x08003ec3
 8003c68:	08003ec3 	.word	0x08003ec3
 8003c6c:	08003ec3 	.word	0x08003ec3
 8003c70:	08003ec3 	.word	0x08003ec3
 8003c74:	08003ec3 	.word	0x08003ec3
 8003c78:	08003ec3 	.word	0x08003ec3
 8003c7c:	08003ec3 	.word	0x08003ec3
 8003c80:	08003cb7 	.word	0x08003cb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c84:	4b94      	ldr	r3, [pc, #592]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c90:	4b91      	ldr	r3, [pc, #580]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	4a90      	ldr	r2, [pc, #576]	; (8003edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ca2:	e111      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ca4:	4b8d      	ldr	r3, [pc, #564]	; (8003edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ca6:	61bb      	str	r3, [r7, #24]
      break;
 8003ca8:	e10e      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003caa:	4b8d      	ldr	r3, [pc, #564]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cac:	61bb      	str	r3, [r7, #24]
      break;
 8003cae:	e10b      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cb0:	4b8c      	ldr	r3, [pc, #560]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cb2:	61bb      	str	r3, [r7, #24]
      break;
 8003cb4:	e108      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cb6:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cc0:	4b85      	ldr	r3, [pc, #532]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ccc:	4b82      	ldr	r3, [pc, #520]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cd6:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	08db      	lsrs	r3, r3, #3
 8003cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80e1 	beq.w	8003ebc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	f000 8083 	beq.w	8003e08 <HAL_RCC_GetSysClockFreq+0x204>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	f200 80a1 	bhi.w	8003e4c <HAL_RCC_GetSysClockFreq+0x248>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x114>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d056      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d16:	e099      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d18:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02d      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d24:	4b6c      	ldr	r3, [pc, #432]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	4a6b      	ldr	r2, [pc, #428]	; (8003edc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
 8003d34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4e:	4b62      	ldr	r3, [pc, #392]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d7e:	e087      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003eec <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dc2:	e065      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd6:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e06:	e043      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ef4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e4a:	e021      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003ef0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ee8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	ee07 3a90 	vmov	s15, r3
 8003ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb4:	ee17 3a90 	vmov	r3, s15
 8003eb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003eba:	e005      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
      break;
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ec4:	61bb      	str	r3, [r7, #24]
      break;
 8003ec6:	bf00      	nop
  }

  return sysclockfreq;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	03d09000 	.word	0x03d09000
 8003ee0:	003d0900 	.word	0x003d0900
 8003ee4:	007a1200 	.word	0x007a1200
 8003ee8:	46000000 	.word	0x46000000
 8003eec:	4c742400 	.word	0x4c742400
 8003ef0:	4a742400 	.word	0x4a742400
 8003ef4:	4af42400 	.word	0x4af42400

08003ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003efe:	f7ff fe81 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	0a1b      	lsrs	r3, r3, #8
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	490f      	ldr	r1, [pc, #60]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8003f10:	5ccb      	ldrb	r3, [r1, r3]
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x54>)
 8003f26:	5cd3      	ldrb	r3, [r2, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	08009e90 	.word	0x08009e90
 8003f50:	2400000c 	.word	0x2400000c
 8003f54:	24000008 	.word	0x24000008

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f5c:	f7ff ffcc 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	08009e90 	.word	0x08009e90

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f88:	f7ff ffb6 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	08009e90 	.word	0x08009e90

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b0ca      	sub	sp, #296	; 0x128
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003fd4:	2500      	movs	r5, #0
 8003fd6:	ea54 0305 	orrs.w	r3, r4, r5
 8003fda:	d049      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fe6:	d02f      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fec:	d828      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff2:	d01a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff8:	d822      	bhi.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004002:	d007      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004004:	e01c      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004006:	4bb8      	ldr	r3, [pc, #736]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4ab7      	ldr	r2, [pc, #732]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800400c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004012:	e01a      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004018:	3308      	adds	r3, #8
 800401a:	2102      	movs	r1, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fc8f 	bl	8005940 <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004028:	e00f      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402e:	3328      	adds	r3, #40	; 0x28
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fd36 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004052:	4ba5      	ldr	r3, [pc, #660]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004060:	4aa1      	ldr	r2, [pc, #644]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004062:	430b      	orrs	r3, r1
 8004064:	6513      	str	r3, [r2, #80]	; 0x50
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800406c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800407c:	f04f 0900 	mov.w	r9, #0
 8004080:	ea58 0309 	orrs.w	r3, r8, r9
 8004084:	d047      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	2b04      	cmp	r3, #4
 800408e:	d82a      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040ad 	.word	0x080040ad
 800409c:	080040bb 	.word	0x080040bb
 80040a0:	080040d1 	.word	0x080040d1
 80040a4:	080040ef 	.word	0x080040ef
 80040a8:	080040ef 	.word	0x080040ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b8e      	ldr	r3, [pc, #568]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a8d      	ldr	r2, [pc, #564]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040b8:	e01a      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040be:	3308      	adds	r3, #8
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 fc3c 	bl	8005940 <RCCEx_PLL2_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040ce:	e00f      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d4:	3328      	adds	r3, #40	; 0x28
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fce3 	bl	8005aa4 <RCCEx_PLL3_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040e4:	e004      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80040ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f8:	4b7b      	ldr	r3, [pc, #492]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	f023 0107 	bic.w	r1, r3, #7
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	4a78      	ldr	r2, [pc, #480]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004108:	430b      	orrs	r3, r1
 800410a:	6513      	str	r3, [r2, #80]	; 0x50
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004122:	f04f 0b00 	mov.w	fp, #0
 8004126:	ea5a 030b 	orrs.w	r3, sl, fp
 800412a:	d04c      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d030      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413c:	d829      	bhi.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800413e:	2bc0      	cmp	r3, #192	; 0xc0
 8004140:	d02d      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004142:	2bc0      	cmp	r3, #192	; 0xc0
 8004144:	d825      	bhi.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d018      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800414a:	2b80      	cmp	r3, #128	; 0x80
 800414c:	d821      	bhi.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d007      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004156:	e01c      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004158:	4b63      	ldr	r3, [pc, #396]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a62      	ldr	r2, [pc, #392]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800415e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004164:	e01c      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	3308      	adds	r3, #8
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fbe6 	bl	8005940 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800417a:	e011      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004180:	3328      	adds	r3, #40	; 0x28
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f001 fc8d 	bl	8005aa4 <RCCEx_PLL3_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800419e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b6:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6513      	str	r3, [r2, #80]	; 0x50
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80041d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80041d6:	2300      	movs	r3, #0
 80041d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80041e0:	460b      	mov	r3, r1
 80041e2:	4313      	orrs	r3, r2
 80041e4:	d053      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f2:	d035      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80041f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f8:	d82e      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041fe:	d031      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004200:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004204:	d828      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420a:	d01a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800420c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004210:	d822      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800421a:	d007      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800421c:	e01c      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421e:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800422a:	e01c      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004230:	3308      	adds	r3, #8
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fb83 	bl	8005940 <RCCEx_PLL2_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004240:	e011      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004246:	3328      	adds	r3, #40	; 0x28
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fc2a 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004256:	e006      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800425e:	e002      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004260:	bf00      	nop
 8004262:	e000      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800427a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800427e:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6593      	str	r3, [r2, #88]	; 0x58
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800428a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800429a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d056      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ba:	d038      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80042bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c0:	d831      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042c6:	d034      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80042c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042cc:	d82b      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042d2:	d01d      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80042d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042d8:	d825      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80042de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80042e4:	e01f      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ec:	4ba2      	ldr	r3, [pc, #648]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	4aa1      	ldr	r2, [pc, #644]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042f8:	e01c      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fe:	3308      	adds	r3, #8
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fb1c 	bl	8005940 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004314:	3328      	adds	r3, #40	; 0x28
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fbc3 	bl	8005aa4 <RCCEx_PLL3_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800433c:	4b8e      	ldr	r3, [pc, #568]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800434c:	4a8a      	ldr	r2, [pc, #552]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6593      	str	r3, [r2, #88]	; 0x58
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004358:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004372:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d03a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	2b30      	cmp	r3, #48	; 0x30
 8004384:	d01f      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004386:	2b30      	cmp	r3, #48	; 0x30
 8004388:	d819      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800438a:	2b20      	cmp	r3, #32
 800438c:	d00c      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800438e:	2b20      	cmp	r3, #32
 8004390:	d815      	bhi.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d019      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004396:	2b10      	cmp	r3, #16
 8004398:	d111      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439a:	4b77      	ldr	r3, [pc, #476]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	4a76      	ldr	r2, [pc, #472]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043a6:	e011      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ac:	3308      	adds	r3, #8
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fac5 	bl	8005940 <RCCEx_PLL2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043c4:	e002      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043c6:	bf00      	nop
 80043c8:	e000      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80043ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043d4:	4b68      	ldr	r3, [pc, #416]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	4a65      	ldr	r2, [pc, #404]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043e4:	430b      	orrs	r3, r1
 80043e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043e8:	e003      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80043fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004408:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800440c:	460b      	mov	r3, r1
 800440e:	4313      	orrs	r3, r2
 8004410:	d051      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441c:	d035      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800441e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004422:	d82e      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004424:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004428:	d031      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800442a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800442e:	d828      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004434:	d01a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443a:	d822      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d007      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004446:	e01c      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800444e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004454:	e01c      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	3308      	adds	r3, #8
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fa6e 	bl	8005940 <RCCEx_PLL2_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004470:	3328      	adds	r3, #40	; 0x28
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f001 fb15 	bl	8005aa4 <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004480:	e006      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004488:	e002      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004490:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004498:	4b37      	ldr	r3, [pc, #220]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	; 0x50
 80044ac:	e003      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80044c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80044d0:	460b      	mov	r3, r1
 80044d2:	4313      	orrs	r3, r2
 80044d4:	d056      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e0:	d033      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80044e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e6:	d82c      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ec:	d02f      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80044ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f2:	d826      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80044f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f8:	d02b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80044fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044fe:	d820      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004504:	d012      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800450a:	d81a      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d022      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d115      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451a:	3308      	adds	r3, #8
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f001 fa0e 	bl	8005940 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800452a:	e015      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004530:	3328      	adds	r3, #40	; 0x28
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f001 fab5 	bl	8005aa4 <RCCEx_PLL3_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004540:	e00a      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800454a:	bf00      	nop
 800454c:	e004      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10d      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456e:	4a02      	ldr	r2, [pc, #8]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004570:	430b      	orrs	r3, r1
 8004572:	6513      	str	r3, [r2, #80]	; 0x50
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800459a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d055      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b0:	d033      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80045b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b6:	d82c      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d02f      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c2:	d826      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045c8:	d02b      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80045ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045ce:	d820      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d4:	d012      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80045d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045da:	d81a      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80045e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e4:	d115      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f9a6 	bl	8005940 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80045fa:	e015      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004600:	3328      	adds	r3, #40	; 0x28
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f001 fa4d 	bl	8005aa4 <RCCEx_PLL3_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004610:	e00a      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800461a:	bf00      	nop
 800461c:	e004      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800461e:	bf00      	nop
 8004620:	e002      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004622:	bf00      	nop
 8004624:	e000      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004628:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004630:	4ba3      	ldr	r3, [pc, #652]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004640:	4a9f      	ldr	r2, [pc, #636]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004642:	430b      	orrs	r3, r1
 8004644:	6593      	str	r3, [r2, #88]	; 0x58
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800465c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d037      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467a:	d00e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004680:	d816      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468a:	d111      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4b8c      	ldr	r3, [pc, #560]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4a8b      	ldr	r2, [pc, #556]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004698:	e00f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 f94c 	bl	8005940 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046c2:	4b7f      	ldr	r3, [pc, #508]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a7b      	ldr	r2, [pc, #492]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	6513      	str	r3, [r2, #80]	; 0x50
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80046ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d039      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	2b03      	cmp	r3, #3
 8004708:	d81c      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	0800474d 	.word	0x0800474d
 8004714:	08004721 	.word	0x08004721
 8004718:	0800472f 	.word	0x0800472f
 800471c:	0800474d 	.word	0x0800474d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004720:	4b67      	ldr	r3, [pc, #412]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a66      	ldr	r2, [pc, #408]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800472c:	e00f      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	3308      	adds	r3, #8
 8004734:	2102      	movs	r1, #2
 8004736:	4618      	mov	r0, r3
 8004738:	f001 f902 	bl	8005940 <RCCEx_PLL2_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004742:	e004      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800474a:	e000      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800474c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004756:	4b5a      	ldr	r3, [pc, #360]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	f023 0103 	bic.w	r1, r3, #3
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	4a56      	ldr	r2, [pc, #344]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004766:	430b      	orrs	r3, r1
 8004768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004770:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004784:	2300      	movs	r3, #0
 8004786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800478a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800478e:	460b      	mov	r3, r1
 8004790:	4313      	orrs	r3, r2
 8004792:	f000 809f 	beq.w	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004796:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047a2:	f7fc fec5 	bl	8001530 <HAL_GetTick>
 80047a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047aa:	e00b      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ac:	f7fc fec0 	bl	8001530 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b64      	cmp	r3, #100	; 0x64
 80047ba:	d903      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047c2:	e005      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c4:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ed      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80047d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d179      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80047d8:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047e4:	4053      	eors	r3, r2
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d015      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ee:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004806:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a2d      	ldr	r2, [pc, #180]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800480c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004812:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800481e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004826:	d118      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc fe82 	bl	8001530 <HAL_GetTick>
 800482c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004830:	e00d      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004832:	f7fc fe7d 	bl	8001530 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800483c:	1ad2      	subs	r2, r2, r3
 800483e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004842:	429a      	cmp	r2, r3
 8004844:	d903      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800484c:	e005      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0eb      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d129      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004866:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004872:	d10e      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004880:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004884:	091a      	lsrs	r2, r3, #4
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004888:	4013      	ands	r3, r2
 800488a:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488c:	430b      	orrs	r3, r1
 800488e:	6113      	str	r3, [r2, #16]
 8004890:	e005      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004898:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800489c:	6113      	str	r3, [r2, #16]
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ae:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
 80048b4:	e00e      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80048be:	e009      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80048c0:	58024400 	.word	0x58024400
 80048c4:	58024800 	.word	0x58024800
 80048c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f002 0301 	and.w	r3, r2, #1
 80048e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048e4:	2300      	movs	r3, #0
 80048e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f000 8089 	beq.w	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fc:	2b28      	cmp	r3, #40	; 0x28
 80048fe:	d86b      	bhi.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	080049e1 	.word	0x080049e1
 800490c:	080049d9 	.word	0x080049d9
 8004910:	080049d9 	.word	0x080049d9
 8004914:	080049d9 	.word	0x080049d9
 8004918:	080049d9 	.word	0x080049d9
 800491c:	080049d9 	.word	0x080049d9
 8004920:	080049d9 	.word	0x080049d9
 8004924:	080049d9 	.word	0x080049d9
 8004928:	080049ad 	.word	0x080049ad
 800492c:	080049d9 	.word	0x080049d9
 8004930:	080049d9 	.word	0x080049d9
 8004934:	080049d9 	.word	0x080049d9
 8004938:	080049d9 	.word	0x080049d9
 800493c:	080049d9 	.word	0x080049d9
 8004940:	080049d9 	.word	0x080049d9
 8004944:	080049d9 	.word	0x080049d9
 8004948:	080049c3 	.word	0x080049c3
 800494c:	080049d9 	.word	0x080049d9
 8004950:	080049d9 	.word	0x080049d9
 8004954:	080049d9 	.word	0x080049d9
 8004958:	080049d9 	.word	0x080049d9
 800495c:	080049d9 	.word	0x080049d9
 8004960:	080049d9 	.word	0x080049d9
 8004964:	080049d9 	.word	0x080049d9
 8004968:	080049e1 	.word	0x080049e1
 800496c:	080049d9 	.word	0x080049d9
 8004970:	080049d9 	.word	0x080049d9
 8004974:	080049d9 	.word	0x080049d9
 8004978:	080049d9 	.word	0x080049d9
 800497c:	080049d9 	.word	0x080049d9
 8004980:	080049d9 	.word	0x080049d9
 8004984:	080049d9 	.word	0x080049d9
 8004988:	080049e1 	.word	0x080049e1
 800498c:	080049d9 	.word	0x080049d9
 8004990:	080049d9 	.word	0x080049d9
 8004994:	080049d9 	.word	0x080049d9
 8004998:	080049d9 	.word	0x080049d9
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049d9 	.word	0x080049d9
 80049a4:	080049d9 	.word	0x080049d9
 80049a8:	080049e1 	.word	0x080049e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	3308      	adds	r3, #8
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 ffc3 	bl	8005940 <RCCEx_PLL2_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049c0:	e00f      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	3328      	adds	r3, #40	; 0x28
 80049c8:	2101      	movs	r1, #1
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 f86a 	bl	8005aa4 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80049d6:	e004      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049de:	e000      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80049e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80049ea:	4bbf      	ldr	r3, [pc, #764]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f8:	4abb      	ldr	r2, [pc, #748]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6553      	str	r3, [r2, #84]	; 0x54
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f002 0302 	and.w	r3, r2, #2
 8004a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d041      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d824      	bhi.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a85 	.word	0x08004a85
 8004a3c:	08004a51 	.word	0x08004a51
 8004a40:	08004a67 	.word	0x08004a67
 8004a44:	08004a85 	.word	0x08004a85
 8004a48:	08004a85 	.word	0x08004a85
 8004a4c:	08004a85 	.word	0x08004a85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	3308      	adds	r3, #8
 8004a56:	2101      	movs	r1, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 ff71 	bl	8005940 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a64:	e00f      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6a:	3328      	adds	r3, #40	; 0x28
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f818 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a7a:	e004      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a82:	e000      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a8e:	4b96      	ldr	r3, [pc, #600]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	f023 0107 	bic.w	r1, r3, #7
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9c:	4a92      	ldr	r2, [pc, #584]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6553      	str	r3, [r2, #84]	; 0x54
 8004aa2:	e003      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f002 0304 	and.w	r3, r2, #4
 8004ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d044      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d825      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004af9 	.word	0x08004af9
 8004ae8:	08004b0f 	.word	0x08004b0f
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b2d 	.word	0x08004b2d
 8004af4:	08004b2d 	.word	0x08004b2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004afc:	3308      	adds	r3, #8
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 ff1d 	bl	8005940 <RCCEx_PLL2_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b0c:	e00f      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b12:	3328      	adds	r3, #40	; 0x28
 8004b14:	2101      	movs	r1, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 ffc4 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004b22:	e004      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b2a:	e000      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b36:	4b6c      	ldr	r3, [pc, #432]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f023 0107 	bic.w	r1, r3, #7
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b46:	4a68      	ldr	r2, [pc, #416]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4c:	e003      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f002 0320 	and.w	r3, r2, #32
 8004b62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b70:	460b      	mov	r3, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	d055      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b82:	d033      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b88:	d82c      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d02f      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b94:	d826      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004b96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b9a:	d02b      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004b9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba0:	d820      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba6:	d012      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bac:	d81a      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d022      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bb6:	d115      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 febd 	bl	8005940 <RCCEx_PLL2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004bcc:	e015      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bd2:	3328      	adds	r3, #40	; 0x28
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 ff64 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004be2:	e00a      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bea:	e006      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bec:	bf00      	nop
 8004bee:	e004      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bf0:	bf00      	nop
 8004bf2:	e002      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6553      	str	r3, [r2, #84]	; 0x54
 8004c18:	e003      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c32:	2300      	movs	r3, #0
 8004c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d058      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c4e:	d033      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004c50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c54:	d82c      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	d02f      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d826      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c66:	d02b      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c6c:	d820      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c72:	d012      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c78:	d81a      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d022      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d115      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c88:	3308      	adds	r3, #8
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fe57 	bl	8005940 <RCCEx_PLL2_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c98:	e015      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c9e:	3328      	adds	r3, #40	; 0x28
 8004ca0:	2102      	movs	r1, #2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fefe 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cb6:	e006      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10e      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cde:	4a02      	ldr	r2, [pc, #8]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce4:	e006      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d055      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d20:	d033      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004d22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d26:	d82c      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d02f      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d826      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d38:	d02b      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004d3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d3e:	d820      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d44:	d012      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d4a:	d81a      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d54:	d115      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fdee 	bl	8005940 <RCCEx_PLL2_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e015      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d70:	3328      	adds	r3, #40	; 0x28
 8004d72:	2102      	movs	r1, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fe95 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d80:	e00a      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d88:	e006      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d8a:	bf00      	nop
 8004d8c:	e004      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d8e:	bf00      	nop
 8004d90:	e002      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d92:	bf00      	nop
 8004d94:	e000      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004da0:	4ba1      	ldr	r3, [pc, #644]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004db0:	4a9d      	ldr	r2, [pc, #628]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db2:	430b      	orrs	r3, r1
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
 8004db6:	e003      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f002 0308 	and.w	r3, r2, #8
 8004dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	d01e      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004df2:	3328      	adds	r3, #40	; 0x28
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fe54 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e08:	4b87      	ldr	r3, [pc, #540]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e18:	4a83      	ldr	r2, [pc, #524]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f002 0310 	and.w	r3, r2, #16
 8004e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d01e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	3328      	adds	r3, #40	; 0x28
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fe25 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e66:	4b70      	ldr	r3, [pc, #448]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e76:	4a6c      	ldr	r2, [pc, #432]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e92:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004e96:	460b      	mov	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d03e      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ea8:	d022      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eae:	d81b      	bhi.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004eba:	e015      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fd3b 	bl	8005940 <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ed0:	e00f      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed6:	3328      	adds	r3, #40	; 0x28
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fde2 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ee6:	e004      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eee:	e000      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004efa:	4b4b      	ldr	r3, [pc, #300]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f10:	e003      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f28:	2300      	movs	r3, #0
 8004f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004f30:	460b      	mov	r3, r1
 8004f32:	4313      	orrs	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f42:	d01f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f48:	d818      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f54:	d007      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004f56:	e011      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f58:	4b33      	ldr	r3, [pc, #204]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a32      	ldr	r2, [pc, #200]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f64:	e00f      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f6a:	3328      	adds	r3, #40	; 0x28
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fd98 	bl	8005aa4 <RCCEx_PLL3_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f7a:	e004      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f82:	e000      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10b      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	4a22      	ldr	r2, [pc, #136]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6553      	str	r3, [r2, #84]	; 0x54
 8004fa4:	e003      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004faa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004fba:	673b      	str	r3, [r7, #112]	; 0x70
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	677b      	str	r3, [r7, #116]	; 0x74
 8004fc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	d034      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d007      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004fda:	e011      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fdc:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	4a11      	ldr	r2, [pc, #68]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00e      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fee:	3308      	adds	r3, #8
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fca4 	bl	8005940 <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ffe:	e003      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005014:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	4a02      	ldr	r2, [pc, #8]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005020:	430b      	orrs	r3, r1
 8005022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005024:	e006      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005026:	bf00      	nop
 8005028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005040:	66bb      	str	r3, [r7, #104]	; 0x68
 8005042:	2300      	movs	r3, #0
 8005044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005046:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d00c      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005054:	3328      	adds	r3, #40	; 0x28
 8005056:	2102      	movs	r1, #2
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fd23 	bl	8005aa4 <RCCEx_PLL3_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005076:	663b      	str	r3, [r7, #96]	; 0x60
 8005078:	2300      	movs	r3, #0
 800507a:	667b      	str	r3, [r7, #100]	; 0x64
 800507c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005080:	460b      	mov	r3, r1
 8005082:	4313      	orrs	r3, r2
 8005084:	d038      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005092:	d018      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005098:	d811      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800509a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509e:	d014      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a4:	d80b      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d011      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d106      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4bc3      	ldr	r3, [pc, #780]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4ac2      	ldr	r2, [pc, #776]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050c4:	e004      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050c6:	bf00      	nop
 80050c8:	e002      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80050ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050d8:	4bb9      	ldr	r3, [pc, #740]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e8:	4ab5      	ldr	r2, [pc, #724]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80050ea:	430b      	orrs	r3, r1
 80050ec:	6553      	str	r3, [r2, #84]	; 0x54
 80050ee:	e003      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005104:	65bb      	str	r3, [r7, #88]	; 0x58
 8005106:	2300      	movs	r3, #0
 8005108:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005114:	4baa      	ldr	r3, [pc, #680]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005122:	4aa7      	ldr	r2, [pc, #668]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005124:	430b      	orrs	r3, r1
 8005126:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005134:	653b      	str	r3, [r7, #80]	; 0x50
 8005136:	2300      	movs	r3, #0
 8005138:	657b      	str	r3, [r7, #84]	; 0x54
 800513a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800513e:	460b      	mov	r3, r1
 8005140:	4313      	orrs	r3, r2
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005144:	4b9e      	ldr	r3, [pc, #632]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800514c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005150:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005154:	4a9a      	ldr	r2, [pc, #616]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005166:	64bb      	str	r3, [r7, #72]	; 0x48
 8005168:	2300      	movs	r3, #0
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005176:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005184:	4a8e      	ldr	r2, [pc, #568]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005186:	430b      	orrs	r3, r1
 8005188:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005196:	643b      	str	r3, [r7, #64]	; 0x40
 8005198:	2300      	movs	r3, #0
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
 800519c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80051a0:	460b      	mov	r3, r1
 80051a2:	4313      	orrs	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051a6:	4b86      	ldr	r3, [pc, #536]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	4a85      	ldr	r2, [pc, #532]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051b0:	6113      	str	r3, [r2, #16]
 80051b2:	4b83      	ldr	r3, [pc, #524]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051b4:	6919      	ldr	r1, [r3, #16]
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051be:	4a80      	ldr	r2, [pc, #512]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051d2:	2300      	movs	r3, #0
 80051d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80051da:	460b      	mov	r3, r1
 80051dc:	4313      	orrs	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051e0:	4b77      	ldr	r3, [pc, #476]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	4a74      	ldr	r2, [pc, #464]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f0:	430b      	orrs	r3, r1
 80051f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
 8005206:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005210:	4b6b      	ldr	r3, [pc, #428]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005220:	4a67      	ldr	r2, [pc, #412]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005222:	430b      	orrs	r3, r1
 8005224:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	2100      	movs	r1, #0
 8005230:	62b9      	str	r1, [r7, #40]	; 0x28
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005238:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800523c:	460b      	mov	r3, r1
 800523e:	4313      	orrs	r3, r2
 8005240:	d011      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005246:	3308      	adds	r3, #8
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb78 	bl	8005940 <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	2100      	movs	r1, #0
 8005270:	6239      	str	r1, [r7, #32]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
 8005278:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800527c:	460b      	mov	r3, r1
 800527e:	4313      	orrs	r3, r2
 8005280:	d011      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	3308      	adds	r3, #8
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fb58 	bl	8005940 <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	2100      	movs	r1, #0
 80052b0:	61b9      	str	r1, [r7, #24]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052bc:	460b      	mov	r3, r1
 80052be:	4313      	orrs	r3, r2
 80052c0:	d011      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052c6:	3308      	adds	r3, #8
 80052c8:	2102      	movs	r1, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fb38 	bl	8005940 <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80052d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	2100      	movs	r1, #0
 80052f0:	6139      	str	r1, [r7, #16]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052fc:	460b      	mov	r3, r1
 80052fe:	4313      	orrs	r3, r2
 8005300:	d011      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005306:	3328      	adds	r3, #40	; 0x28
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fbca 	bl	8005aa4 <RCCEx_PLL3_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005322:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	2100      	movs	r1, #0
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800533c:	460b      	mov	r3, r1
 800533e:	4313      	orrs	r3, r2
 8005340:	d011      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	3328      	adds	r3, #40	; 0x28
 8005348:	2101      	movs	r1, #1
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fbaa 	bl	8005aa4 <RCCEx_PLL3_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	2100      	movs	r1, #0
 8005370:	6039      	str	r1, [r7, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	e9d7 1200 	ldrd	r1, r2, [r7]
 800537c:	460b      	mov	r3, r1
 800537e:	4313      	orrs	r3, r2
 8005380:	d011      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005386:	3328      	adds	r3, #40	; 0x28
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fb8a 	bl	8005aa4 <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80053a6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e000      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80053ba:	46bd      	mov	sp, r7
 80053bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c0:	58024400 	.word	0x58024400

080053c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80053c8:	f7fe fd96 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4904      	ldr	r1, [pc, #16]	; (80053ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	58024400 	.word	0x58024400
 80053ec:	08009e90 	.word	0x08009e90

080053f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b089      	sub	sp, #36	; 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053f8:	4ba1      	ldr	r3, [pc, #644]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005402:	4b9f      	ldr	r3, [pc, #636]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	0b1b      	lsrs	r3, r3, #12
 8005408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800540e:	4b9c      	ldr	r3, [pc, #624]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800541a:	4b99      	ldr	r3, [pc, #612]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	08db      	lsrs	r3, r3, #3
 8005420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8111 	beq.w	8005660 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b02      	cmp	r3, #2
 8005442:	f000 8083 	beq.w	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f200 80a1 	bhi.w	8005590 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d056      	beq.n	8005508 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800545a:	e099      	b.n	8005590 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800545c:	4b88      	ldr	r3, [pc, #544]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02d      	beq.n	80054c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005468:	4b85      	ldr	r3, [pc, #532]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	08db      	lsrs	r3, r3, #3
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	4a84      	ldr	r2, [pc, #528]	; (8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
 8005478:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005492:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054c2:	e087      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800568c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80054d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d6:	4b6a      	ldr	r3, [pc, #424]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005506:	e065      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551a:	4b59      	ldr	r3, [pc, #356]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552a:	ed97 6a03 	vldr	s12, [r7, #12]
 800552e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800554a:	e043      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b48      	ldr	r3, [pc, #288]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005572:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800558e:	e021      	b.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005690 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b37      	ldr	r3, [pc, #220]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005688 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80055d4:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	0a5b      	lsrs	r3, r3, #9
 80055da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80055f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fa:	ee17 2a90 	vmov	r2, s15
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	0c1b      	lsrs	r3, r3, #16
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800561c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005628:	ee17 2a90 	vmov	r2, s15
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800564a:	edd7 6a07 	vldr	s13, [r7, #28]
 800564e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005656:	ee17 2a90 	vmov	r2, s15
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800565e:	e008      	b.n	8005672 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
}
 8005672:	bf00      	nop
 8005674:	3724      	adds	r7, #36	; 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	58024400 	.word	0x58024400
 8005684:	03d09000 	.word	0x03d09000
 8005688:	46000000 	.word	0x46000000
 800568c:	4c742400 	.word	0x4c742400
 8005690:	4a742400 	.word	0x4a742400
 8005694:	4af42400 	.word	0x4af42400

08005698 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056a0:	4ba1      	ldr	r3, [pc, #644]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80056aa:	4b9f      	ldr	r3, [pc, #636]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	0d1b      	lsrs	r3, r3, #20
 80056b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056b6:	4b9c      	ldr	r3, [pc, #624]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80056c2:	4b99      	ldr	r3, [pc, #612]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8111 	beq.w	8005908 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f000 8083 	beq.w	80057f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	f200 80a1 	bhi.w	8005838 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d056      	beq.n	80057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005702:	e099      	b.n	8005838 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005704:	4b88      	ldr	r3, [pc, #544]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02d      	beq.n	800576c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005710:	4b85      	ldr	r3, [pc, #532]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	4a84      	ldr	r2, [pc, #528]	; (800592c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	ee07 3a90 	vmov	s15, r3
 8005728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573a:	4b7b      	ldr	r3, [pc, #492]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574a:	ed97 6a03 	vldr	s12, [r7, #12]
 800574e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005766:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800576a:	e087      	b.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005934 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800577a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577e:	4b6a      	ldr	r3, [pc, #424]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005792:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ae:	e065      	b.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c2:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057f2:	e043      	b.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800593c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b48      	ldr	r3, [pc, #288]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a03 	vldr	s12, [r7, #12]
 800581a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005836:	e021      	b.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b37      	ldr	r3, [pc, #220]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a03 	vldr	s12, [r7, #12]
 800585e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800587a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800587c:	4b2a      	ldr	r3, [pc, #168]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005896:	edd7 6a07 	vldr	s13, [r7, #28]
 800589a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a2:	ee17 2a90 	vmov	r2, s15
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80058aa:	4b1f      	ldr	r3, [pc, #124]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	0c1b      	lsrs	r3, r3, #16
 80058b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b4:	ee07 3a90 	vmov	s15, r3
 80058b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d0:	ee17 2a90 	vmov	r2, s15
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	0e1b      	lsrs	r3, r3, #24
 80058de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fe:	ee17 2a90 	vmov	r2, s15
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005906:	e008      	b.n	800591a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	609a      	str	r2, [r3, #8]
}
 800591a:	bf00      	nop
 800591c:	3724      	adds	r7, #36	; 0x24
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	58024400 	.word	0x58024400
 800592c:	03d09000 	.word	0x03d09000
 8005930:	46000000 	.word	0x46000000
 8005934:	4c742400 	.word	0x4c742400
 8005938:	4a742400 	.word	0x4a742400
 800593c:	4af42400 	.word	0x4af42400

08005940 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800594e:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d101      	bne.n	800595e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e099      	b.n	8005a92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800595e:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4e      	ldr	r2, [pc, #312]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005964:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596a:	f7fb fde1 	bl	8001530 <HAL_GetTick>
 800596e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005970:	e008      	b.n	8005984 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005972:	f7fb fddd 	bl	8001530 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e086      	b.n	8005a92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f0      	bne.n	8005972 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005990:	4b42      	ldr	r3, [pc, #264]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	031b      	lsls	r3, r3, #12
 800599e:	493f      	ldr	r1, [pc, #252]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	628b      	str	r3, [r1, #40]	; 0x28
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	025b      	lsls	r3, r3, #9
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	3b01      	subs	r3, #1
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	061b      	lsls	r3, r3, #24
 80059d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059d4:	4931      	ldr	r1, [pc, #196]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	492d      	ldr	r1, [pc, #180]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f023 0220 	bic.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	4928      	ldr	r1, [pc, #160]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059fe:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a04:	f023 0310 	bic.w	r3, r3, #16
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <RCCEx_PLL2_Config+0x160>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	69d2      	ldr	r2, [r2, #28]
 8005a16:	00d2      	lsls	r2, r2, #3
 8005a18:	4920      	ldr	r1, [pc, #128]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a1e:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a24:	f043 0310 	orr.w	r3, r3, #16
 8005a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a3c:	e00f      	b.n	8005a5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d106      	bne.n	8005a52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a50:	e005      	b.n	8005a5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4a11      	ldr	r2, [pc, #68]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6a:	f7fb fd61 	bl	8001530 <HAL_GetTick>
 8005a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a70:	e008      	b.n	8005a84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a72:	f7fb fd5d 	bl	8001530 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e006      	b.n	8005a92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <RCCEx_PLL2_Config+0x15c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	ffff0007 	.word	0xffff0007

08005aa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ab2:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d101      	bne.n	8005ac2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e099      	b.n	8005bf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ac2:	4b4f      	ldr	r3, [pc, #316]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a4e      	ldr	r2, [pc, #312]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ace:	f7fb fd2f 	bl	8001530 <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ad4:	e008      	b.n	8005ae8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ad6:	f7fb fd2b 	bl	8001530 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e086      	b.n	8005bf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ae8:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f0      	bne.n	8005ad6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	051b      	lsls	r3, r3, #20
 8005b02:	493f      	ldr	r1, [pc, #252]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	628b      	str	r3, [r1, #40]	; 0x28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	025b      	lsls	r3, r3, #9
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b38:	4931      	ldr	r1, [pc, #196]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b3e:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	492d      	ldr	r1, [pc, #180]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b50:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	4928      	ldr	r1, [pc, #160]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <RCCEx_PLL3_Config+0x160>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	69d2      	ldr	r2, [r2, #28]
 8005b7a:	00d2      	lsls	r2, r2, #3
 8005b7c:	4920      	ldr	r1, [pc, #128]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b82:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b94:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ba0:	e00f      	b.n	8005bc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d106      	bne.n	8005bb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005bae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bb4:	e005      	b.n	8005bc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bce:	f7fb fcaf 	bl	8001530 <HAL_GetTick>
 8005bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bd4:	e008      	b.n	8005be8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bd6:	f7fb fcab 	bl	8001530 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e006      	b.n	8005bf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <RCCEx_PLL3_Config+0x15c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	58024400 	.word	0x58024400
 8005c04:	ffff0007 	.word	0xffff0007

08005c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e042      	b.n	8005ca0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fb f971 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8ba 	bl	8005dc4 <UART_SetConfig>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e022      	b.n	8005ca0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fe16 	bl	8006894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fe9d 	bl	80069d8 <UART_CheckIdleState>
 8005c9e:	4603      	mov	r3, r0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d17b      	bne.n	8005dba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_Transmit+0x26>
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e074      	b.n	8005dbc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2221      	movs	r2, #33	; 0x21
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce2:	f7fb fc25 	bl	8001530 <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d108      	bne.n	8005d14 <HAL_UART_Transmit+0x6c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e003      	b.n	8005d1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d1c:	e030      	b.n	8005d80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	; 0x80
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 feff 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e03d      	b.n	8005dbc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	3302      	adds	r3, #2
 8005d5a:	61bb      	str	r3, [r7, #24]
 8005d5c:	e007      	b.n	8005d6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1c8      	bne.n	8005d1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fec8 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e006      	b.n	8005dbc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc8:	b092      	sub	sp, #72	; 0x48
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4bbe      	ldr	r3, [pc, #760]	; (80060ec <UART_SetConfig+0x328>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4ab3      	ldr	r2, [pc, #716]	; (80060f0 <UART_SetConfig+0x32c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	4baf      	ldr	r3, [pc, #700]	; (80060f4 <UART_SetConfig+0x330>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e40:	430b      	orrs	r3, r1
 8005e42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	f023 010f 	bic.w	r1, r3, #15
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4aa6      	ldr	r2, [pc, #664]	; (80060f8 <UART_SetConfig+0x334>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d177      	bne.n	8005f54 <UART_SetConfig+0x190>
 8005e64:	4ba5      	ldr	r3, [pc, #660]	; (80060fc <UART_SetConfig+0x338>)
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e6c:	2b28      	cmp	r3, #40	; 0x28
 8005e6e:	d86d      	bhi.n	8005f4c <UART_SetConfig+0x188>
 8005e70:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0xb4>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005f1d 	.word	0x08005f1d
 8005e7c:	08005f4d 	.word	0x08005f4d
 8005e80:	08005f4d 	.word	0x08005f4d
 8005e84:	08005f4d 	.word	0x08005f4d
 8005e88:	08005f4d 	.word	0x08005f4d
 8005e8c:	08005f4d 	.word	0x08005f4d
 8005e90:	08005f4d 	.word	0x08005f4d
 8005e94:	08005f4d 	.word	0x08005f4d
 8005e98:	08005f25 	.word	0x08005f25
 8005e9c:	08005f4d 	.word	0x08005f4d
 8005ea0:	08005f4d 	.word	0x08005f4d
 8005ea4:	08005f4d 	.word	0x08005f4d
 8005ea8:	08005f4d 	.word	0x08005f4d
 8005eac:	08005f4d 	.word	0x08005f4d
 8005eb0:	08005f4d 	.word	0x08005f4d
 8005eb4:	08005f4d 	.word	0x08005f4d
 8005eb8:	08005f2d 	.word	0x08005f2d
 8005ebc:	08005f4d 	.word	0x08005f4d
 8005ec0:	08005f4d 	.word	0x08005f4d
 8005ec4:	08005f4d 	.word	0x08005f4d
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08005f4d 	.word	0x08005f4d
 8005ed0:	08005f4d 	.word	0x08005f4d
 8005ed4:	08005f4d 	.word	0x08005f4d
 8005ed8:	08005f35 	.word	0x08005f35
 8005edc:	08005f4d 	.word	0x08005f4d
 8005ee0:	08005f4d 	.word	0x08005f4d
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08005f4d 	.word	0x08005f4d
 8005ef0:	08005f4d 	.word	0x08005f4d
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08005f4d 	.word	0x08005f4d
 8005f00:	08005f4d 	.word	0x08005f4d
 8005f04:	08005f4d 	.word	0x08005f4d
 8005f08:	08005f4d 	.word	0x08005f4d
 8005f0c:	08005f4d 	.word	0x08005f4d
 8005f10:	08005f4d 	.word	0x08005f4d
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e222      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e21e      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e21a      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e216      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e212      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e20e      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e20a      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a69      	ldr	r2, [pc, #420]	; (8006100 <UART_SetConfig+0x33c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d130      	bne.n	8005fc0 <UART_SetConfig+0x1fc>
 8005f5e:	4b67      	ldr	r3, [pc, #412]	; (80060fc <UART_SetConfig+0x338>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d826      	bhi.n	8005fb8 <UART_SetConfig+0x1f4>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x1ac>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e1ec      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e1e8      	b.n	800636a <UART_SetConfig+0x5a6>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e1e4      	b.n	800636a <UART_SetConfig+0x5a6>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e1e0      	b.n	800636a <UART_SetConfig+0x5a6>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e1dc      	b.n	800636a <UART_SetConfig+0x5a6>
 8005fb0:	2340      	movs	r3, #64	; 0x40
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e1d8      	b.n	800636a <UART_SetConfig+0x5a6>
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e1d4      	b.n	800636a <UART_SetConfig+0x5a6>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a4f      	ldr	r2, [pc, #316]	; (8006104 <UART_SetConfig+0x340>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d130      	bne.n	800602c <UART_SetConfig+0x268>
 8005fca:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <UART_SetConfig+0x338>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d826      	bhi.n	8006024 <UART_SetConfig+0x260>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0x218>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e1b6      	b.n	800636a <UART_SetConfig+0x5a6>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e1b2      	b.n	800636a <UART_SetConfig+0x5a6>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e1ae      	b.n	800636a <UART_SetConfig+0x5a6>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e1aa      	b.n	800636a <UART_SetConfig+0x5a6>
 8006014:	2320      	movs	r3, #32
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e1a6      	b.n	800636a <UART_SetConfig+0x5a6>
 800601c:	2340      	movs	r3, #64	; 0x40
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e1a2      	b.n	800636a <UART_SetConfig+0x5a6>
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e19e      	b.n	800636a <UART_SetConfig+0x5a6>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a35      	ldr	r2, [pc, #212]	; (8006108 <UART_SetConfig+0x344>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d130      	bne.n	8006098 <UART_SetConfig+0x2d4>
 8006036:	4b31      	ldr	r3, [pc, #196]	; (80060fc <UART_SetConfig+0x338>)
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	2b05      	cmp	r3, #5
 8006040:	d826      	bhi.n	8006090 <UART_SetConfig+0x2cc>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <UART_SetConfig+0x284>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006061 	.word	0x08006061
 800604c:	08006069 	.word	0x08006069
 8006050:	08006071 	.word	0x08006071
 8006054:	08006079 	.word	0x08006079
 8006058:	08006081 	.word	0x08006081
 800605c:	08006089 	.word	0x08006089
 8006060:	2300      	movs	r3, #0
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e180      	b.n	800636a <UART_SetConfig+0x5a6>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e17c      	b.n	800636a <UART_SetConfig+0x5a6>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e178      	b.n	800636a <UART_SetConfig+0x5a6>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e174      	b.n	800636a <UART_SetConfig+0x5a6>
 8006080:	2320      	movs	r3, #32
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e170      	b.n	800636a <UART_SetConfig+0x5a6>
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e16c      	b.n	800636a <UART_SetConfig+0x5a6>
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e168      	b.n	800636a <UART_SetConfig+0x5a6>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <UART_SetConfig+0x348>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d142      	bne.n	8006128 <UART_SetConfig+0x364>
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <UART_SetConfig+0x338>)
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d838      	bhi.n	8006120 <UART_SetConfig+0x35c>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0x2f0>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060cd 	.word	0x080060cd
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	080060dd 	.word	0x080060dd
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	08006111 	.word	0x08006111
 80060c8:	08006119 	.word	0x08006119
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e14a      	b.n	800636a <UART_SetConfig+0x5a6>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e146      	b.n	800636a <UART_SetConfig+0x5a6>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e142      	b.n	800636a <UART_SetConfig+0x5a6>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e13e      	b.n	800636a <UART_SetConfig+0x5a6>
 80060ec:	cfff69f3 	.word	0xcfff69f3
 80060f0:	58000c00 	.word	0x58000c00
 80060f4:	11fff4ff 	.word	0x11fff4ff
 80060f8:	40011000 	.word	0x40011000
 80060fc:	58024400 	.word	0x58024400
 8006100:	40004400 	.word	0x40004400
 8006104:	40004800 	.word	0x40004800
 8006108:	40004c00 	.word	0x40004c00
 800610c:	40005000 	.word	0x40005000
 8006110:	2320      	movs	r3, #32
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e128      	b.n	800636a <UART_SetConfig+0x5a6>
 8006118:	2340      	movs	r3, #64	; 0x40
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e124      	b.n	800636a <UART_SetConfig+0x5a6>
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e120      	b.n	800636a <UART_SetConfig+0x5a6>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4acb      	ldr	r2, [pc, #812]	; (800645c <UART_SetConfig+0x698>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d176      	bne.n	8006220 <UART_SetConfig+0x45c>
 8006132:	4bcb      	ldr	r3, [pc, #812]	; (8006460 <UART_SetConfig+0x69c>)
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800613a:	2b28      	cmp	r3, #40	; 0x28
 800613c:	d86c      	bhi.n	8006218 <UART_SetConfig+0x454>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0x380>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	080061e9 	.word	0x080061e9
 8006148:	08006219 	.word	0x08006219
 800614c:	08006219 	.word	0x08006219
 8006150:	08006219 	.word	0x08006219
 8006154:	08006219 	.word	0x08006219
 8006158:	08006219 	.word	0x08006219
 800615c:	08006219 	.word	0x08006219
 8006160:	08006219 	.word	0x08006219
 8006164:	080061f1 	.word	0x080061f1
 8006168:	08006219 	.word	0x08006219
 800616c:	08006219 	.word	0x08006219
 8006170:	08006219 	.word	0x08006219
 8006174:	08006219 	.word	0x08006219
 8006178:	08006219 	.word	0x08006219
 800617c:	08006219 	.word	0x08006219
 8006180:	08006219 	.word	0x08006219
 8006184:	080061f9 	.word	0x080061f9
 8006188:	08006219 	.word	0x08006219
 800618c:	08006219 	.word	0x08006219
 8006190:	08006219 	.word	0x08006219
 8006194:	08006219 	.word	0x08006219
 8006198:	08006219 	.word	0x08006219
 800619c:	08006219 	.word	0x08006219
 80061a0:	08006219 	.word	0x08006219
 80061a4:	08006201 	.word	0x08006201
 80061a8:	08006219 	.word	0x08006219
 80061ac:	08006219 	.word	0x08006219
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006219 	.word	0x08006219
 80061b8:	08006219 	.word	0x08006219
 80061bc:	08006219 	.word	0x08006219
 80061c0:	08006219 	.word	0x08006219
 80061c4:	08006209 	.word	0x08006209
 80061c8:	08006219 	.word	0x08006219
 80061cc:	08006219 	.word	0x08006219
 80061d0:	08006219 	.word	0x08006219
 80061d4:	08006219 	.word	0x08006219
 80061d8:	08006219 	.word	0x08006219
 80061dc:	08006219 	.word	0x08006219
 80061e0:	08006219 	.word	0x08006219
 80061e4:	08006211 	.word	0x08006211
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e0bc      	b.n	800636a <UART_SetConfig+0x5a6>
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e0b8      	b.n	800636a <UART_SetConfig+0x5a6>
 80061f8:	2308      	movs	r3, #8
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fe:	e0b4      	b.n	800636a <UART_SetConfig+0x5a6>
 8006200:	2310      	movs	r3, #16
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006206:	e0b0      	b.n	800636a <UART_SetConfig+0x5a6>
 8006208:	2320      	movs	r3, #32
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620e:	e0ac      	b.n	800636a <UART_SetConfig+0x5a6>
 8006210:	2340      	movs	r3, #64	; 0x40
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006216:	e0a8      	b.n	800636a <UART_SetConfig+0x5a6>
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621e:	e0a4      	b.n	800636a <UART_SetConfig+0x5a6>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a8f      	ldr	r2, [pc, #572]	; (8006464 <UART_SetConfig+0x6a0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d130      	bne.n	800628c <UART_SetConfig+0x4c8>
 800622a:	4b8d      	ldr	r3, [pc, #564]	; (8006460 <UART_SetConfig+0x69c>)
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	2b05      	cmp	r3, #5
 8006234:	d826      	bhi.n	8006284 <UART_SetConfig+0x4c0>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x478>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	08006255 	.word	0x08006255
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006265 	.word	0x08006265
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006275 	.word	0x08006275
 8006250:	0800627d 	.word	0x0800627d
 8006254:	2300      	movs	r3, #0
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625a:	e086      	b.n	800636a <UART_SetConfig+0x5a6>
 800625c:	2304      	movs	r3, #4
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006262:	e082      	b.n	800636a <UART_SetConfig+0x5a6>
 8006264:	2308      	movs	r3, #8
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626a:	e07e      	b.n	800636a <UART_SetConfig+0x5a6>
 800626c:	2310      	movs	r3, #16
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006272:	e07a      	b.n	800636a <UART_SetConfig+0x5a6>
 8006274:	2320      	movs	r3, #32
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627a:	e076      	b.n	800636a <UART_SetConfig+0x5a6>
 800627c:	2340      	movs	r3, #64	; 0x40
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006282:	e072      	b.n	800636a <UART_SetConfig+0x5a6>
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e06e      	b.n	800636a <UART_SetConfig+0x5a6>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a75      	ldr	r2, [pc, #468]	; (8006468 <UART_SetConfig+0x6a4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d130      	bne.n	80062f8 <UART_SetConfig+0x534>
 8006296:	4b72      	ldr	r3, [pc, #456]	; (8006460 <UART_SetConfig+0x69c>)
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d826      	bhi.n	80062f0 <UART_SetConfig+0x52c>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <UART_SetConfig+0x4e4>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062c1 	.word	0x080062c1
 80062ac:	080062c9 	.word	0x080062c9
 80062b0:	080062d1 	.word	0x080062d1
 80062b4:	080062d9 	.word	0x080062d9
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e050      	b.n	800636a <UART_SetConfig+0x5a6>
 80062c8:	2304      	movs	r3, #4
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ce:	e04c      	b.n	800636a <UART_SetConfig+0x5a6>
 80062d0:	2308      	movs	r3, #8
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d6:	e048      	b.n	800636a <UART_SetConfig+0x5a6>
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e044      	b.n	800636a <UART_SetConfig+0x5a6>
 80062e0:	2320      	movs	r3, #32
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e6:	e040      	b.n	800636a <UART_SetConfig+0x5a6>
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e03c      	b.n	800636a <UART_SetConfig+0x5a6>
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f6:	e038      	b.n	800636a <UART_SetConfig+0x5a6>
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5b      	ldr	r2, [pc, #364]	; (800646c <UART_SetConfig+0x6a8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d130      	bne.n	8006364 <UART_SetConfig+0x5a0>
 8006302:	4b57      	ldr	r3, [pc, #348]	; (8006460 <UART_SetConfig+0x69c>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b05      	cmp	r3, #5
 800630c:	d826      	bhi.n	800635c <UART_SetConfig+0x598>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0x550>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	0800632d 	.word	0x0800632d
 8006318:	08006335 	.word	0x08006335
 800631c:	0800633d 	.word	0x0800633d
 8006320:	08006345 	.word	0x08006345
 8006324:	0800634d 	.word	0x0800634d
 8006328:	08006355 	.word	0x08006355
 800632c:	2302      	movs	r3, #2
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e01a      	b.n	800636a <UART_SetConfig+0x5a6>
 8006334:	2304      	movs	r3, #4
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e016      	b.n	800636a <UART_SetConfig+0x5a6>
 800633c:	2308      	movs	r3, #8
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e012      	b.n	800636a <UART_SetConfig+0x5a6>
 8006344:	2310      	movs	r3, #16
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e00e      	b.n	800636a <UART_SetConfig+0x5a6>
 800634c:	2320      	movs	r3, #32
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e00a      	b.n	800636a <UART_SetConfig+0x5a6>
 8006354:	2340      	movs	r3, #64	; 0x40
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635a:	e006      	b.n	800636a <UART_SetConfig+0x5a6>
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e002      	b.n	800636a <UART_SetConfig+0x5a6>
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a3f      	ldr	r2, [pc, #252]	; (800646c <UART_SetConfig+0x6a8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	f040 80f8 	bne.w	8006566 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006376:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800637a:	2b20      	cmp	r3, #32
 800637c:	dc46      	bgt.n	800640c <UART_SetConfig+0x648>
 800637e:	2b02      	cmp	r3, #2
 8006380:	f2c0 8082 	blt.w	8006488 <UART_SetConfig+0x6c4>
 8006384:	3b02      	subs	r3, #2
 8006386:	2b1e      	cmp	r3, #30
 8006388:	d87e      	bhi.n	8006488 <UART_SetConfig+0x6c4>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0x5cc>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	08006413 	.word	0x08006413
 8006394:	08006489 	.word	0x08006489
 8006398:	0800641b 	.word	0x0800641b
 800639c:	08006489 	.word	0x08006489
 80063a0:	08006489 	.word	0x08006489
 80063a4:	08006489 	.word	0x08006489
 80063a8:	0800642b 	.word	0x0800642b
 80063ac:	08006489 	.word	0x08006489
 80063b0:	08006489 	.word	0x08006489
 80063b4:	08006489 	.word	0x08006489
 80063b8:	08006489 	.word	0x08006489
 80063bc:	08006489 	.word	0x08006489
 80063c0:	08006489 	.word	0x08006489
 80063c4:	08006489 	.word	0x08006489
 80063c8:	0800643b 	.word	0x0800643b
 80063cc:	08006489 	.word	0x08006489
 80063d0:	08006489 	.word	0x08006489
 80063d4:	08006489 	.word	0x08006489
 80063d8:	08006489 	.word	0x08006489
 80063dc:	08006489 	.word	0x08006489
 80063e0:	08006489 	.word	0x08006489
 80063e4:	08006489 	.word	0x08006489
 80063e8:	08006489 	.word	0x08006489
 80063ec:	08006489 	.word	0x08006489
 80063f0:	08006489 	.word	0x08006489
 80063f4:	08006489 	.word	0x08006489
 80063f8:	08006489 	.word	0x08006489
 80063fc:	08006489 	.word	0x08006489
 8006400:	08006489 	.word	0x08006489
 8006404:	08006489 	.word	0x08006489
 8006408:	0800647b 	.word	0x0800647b
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d037      	beq.n	8006480 <UART_SetConfig+0x6bc>
 8006410:	e03a      	b.n	8006488 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006412:	f7fe ffd7 	bl	80053c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006416:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006418:	e03c      	b.n	8006494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe ffe6 	bl	80053f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006428:	e034      	b.n	8006494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800642a:	f107 0318 	add.w	r3, r7, #24
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f932 	bl	8005698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006438:	e02c      	b.n	8006494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <UART_SetConfig+0x69c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <UART_SetConfig+0x69c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	08db      	lsrs	r3, r3, #3
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	4a07      	ldr	r2, [pc, #28]	; (8006470 <UART_SetConfig+0x6ac>)
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006458:	e01c      	b.n	8006494 <UART_SetConfig+0x6d0>
 800645a:	bf00      	nop
 800645c:	40011400 	.word	0x40011400
 8006460:	58024400 	.word	0x58024400
 8006464:	40007800 	.word	0x40007800
 8006468:	40007c00 	.word	0x40007c00
 800646c:	58000c00 	.word	0x58000c00
 8006470:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006474:	4b9d      	ldr	r3, [pc, #628]	; (80066ec <UART_SetConfig+0x928>)
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006478:	e00c      	b.n	8006494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800647a:	4b9d      	ldr	r3, [pc, #628]	; (80066f0 <UART_SetConfig+0x92c>)
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800647e:	e009      	b.n	8006494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006486:	e005      	b.n	8006494 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006492:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 81de 	beq.w	8006858 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4a94      	ldr	r2, [pc, #592]	; (80066f4 <UART_SetConfig+0x930>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	4413      	add	r3, r2
 80064ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064bc:	429a      	cmp	r2, r3
 80064be:	d305      	bcc.n	80064cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d903      	bls.n	80064d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064d2:	e1c1      	b.n	8006858 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d6:	2200      	movs	r2, #0
 80064d8:	60bb      	str	r3, [r7, #8]
 80064da:	60fa      	str	r2, [r7, #12]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	4a84      	ldr	r2, [pc, #528]	; (80066f4 <UART_SetConfig+0x930>)
 80064e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064f6:	f7f9 ff4b 	bl	8000390 <__aeabi_uldivmod>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	020b      	lsls	r3, r1, #8
 800650c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006510:	0202      	lsls	r2, r0, #8
 8006512:	6979      	ldr	r1, [r7, #20]
 8006514:	6849      	ldr	r1, [r1, #4]
 8006516:	0849      	lsrs	r1, r1, #1
 8006518:	2000      	movs	r0, #0
 800651a:	460c      	mov	r4, r1
 800651c:	4605      	mov	r5, r0
 800651e:	eb12 0804 	adds.w	r8, r2, r4
 8006522:	eb43 0905 	adc.w	r9, r3, r5
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	469a      	mov	sl, r3
 800652e:	4693      	mov	fp, r2
 8006530:	4652      	mov	r2, sl
 8006532:	465b      	mov	r3, fp
 8006534:	4640      	mov	r0, r8
 8006536:	4649      	mov	r1, r9
 8006538:	f7f9 ff2a 	bl	8000390 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4613      	mov	r3, r2
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800654a:	d308      	bcc.n	800655e <UART_SetConfig+0x79a>
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006552:	d204      	bcs.n	800655e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800655a:	60da      	str	r2, [r3, #12]
 800655c:	e17c      	b.n	8006858 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006564:	e178      	b.n	8006858 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656e:	f040 80c5 	bne.w	80066fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006572:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006576:	2b20      	cmp	r3, #32
 8006578:	dc48      	bgt.n	800660c <UART_SetConfig+0x848>
 800657a:	2b00      	cmp	r3, #0
 800657c:	db7b      	blt.n	8006676 <UART_SetConfig+0x8b2>
 800657e:	2b20      	cmp	r3, #32
 8006580:	d879      	bhi.n	8006676 <UART_SetConfig+0x8b2>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <UART_SetConfig+0x7c4>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	08006613 	.word	0x08006613
 800658c:	0800661b 	.word	0x0800661b
 8006590:	08006677 	.word	0x08006677
 8006594:	08006677 	.word	0x08006677
 8006598:	08006623 	.word	0x08006623
 800659c:	08006677 	.word	0x08006677
 80065a0:	08006677 	.word	0x08006677
 80065a4:	08006677 	.word	0x08006677
 80065a8:	08006633 	.word	0x08006633
 80065ac:	08006677 	.word	0x08006677
 80065b0:	08006677 	.word	0x08006677
 80065b4:	08006677 	.word	0x08006677
 80065b8:	08006677 	.word	0x08006677
 80065bc:	08006677 	.word	0x08006677
 80065c0:	08006677 	.word	0x08006677
 80065c4:	08006677 	.word	0x08006677
 80065c8:	08006643 	.word	0x08006643
 80065cc:	08006677 	.word	0x08006677
 80065d0:	08006677 	.word	0x08006677
 80065d4:	08006677 	.word	0x08006677
 80065d8:	08006677 	.word	0x08006677
 80065dc:	08006677 	.word	0x08006677
 80065e0:	08006677 	.word	0x08006677
 80065e4:	08006677 	.word	0x08006677
 80065e8:	08006677 	.word	0x08006677
 80065ec:	08006677 	.word	0x08006677
 80065f0:	08006677 	.word	0x08006677
 80065f4:	08006677 	.word	0x08006677
 80065f8:	08006677 	.word	0x08006677
 80065fc:	08006677 	.word	0x08006677
 8006600:	08006677 	.word	0x08006677
 8006604:	08006677 	.word	0x08006677
 8006608:	08006669 	.word	0x08006669
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d02e      	beq.n	800666e <UART_SetConfig+0x8aa>
 8006610:	e031      	b.n	8006676 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006612:	f7fd fca1 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8006616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006618:	e033      	b.n	8006682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800661a:	f7fd fcb3 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 800661e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006620:	e02f      	b.n	8006682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fee2 	bl	80053f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006630:	e027      	b.n	8006682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006632:	f107 0318 	add.w	r3, r7, #24
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff f82e 	bl	8005698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006640:	e01f      	b.n	8006682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006642:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <UART_SetConfig+0x934>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800664e:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <UART_SetConfig+0x934>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	4a24      	ldr	r2, [pc, #144]	; (80066ec <UART_SetConfig+0x928>)
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006660:	e00f      	b.n	8006682 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006662:	4b22      	ldr	r3, [pc, #136]	; (80066ec <UART_SetConfig+0x928>)
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006666:	e00c      	b.n	8006682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006668:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <UART_SetConfig+0x92c>)
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800666c:	e009      	b.n	8006682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006674:	e005      	b.n	8006682 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80e7 	beq.w	8006858 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <UART_SetConfig+0x930>)
 8006690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006694:	461a      	mov	r2, r3
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	fbb3 f3f2 	udiv	r3, r3, r2
 800669c:	005a      	lsls	r2, r3, #1
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	441a      	add	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d916      	bls.n	80066e4 <UART_SetConfig+0x920>
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066bc:	d212      	bcs.n	80066e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f023 030f 	bic.w	r3, r3, #15
 80066c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066d6:	4313      	orrs	r3, r2
 80066d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	e0b9      	b.n	8006858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066ea:	e0b5      	b.n	8006858 <UART_SetConfig+0xa94>
 80066ec:	03d09000 	.word	0x03d09000
 80066f0:	003d0900 	.word	0x003d0900
 80066f4:	08009ea0 	.word	0x08009ea0
 80066f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006700:	2b20      	cmp	r3, #32
 8006702:	dc49      	bgt.n	8006798 <UART_SetConfig+0x9d4>
 8006704:	2b00      	cmp	r3, #0
 8006706:	db7c      	blt.n	8006802 <UART_SetConfig+0xa3e>
 8006708:	2b20      	cmp	r3, #32
 800670a:	d87a      	bhi.n	8006802 <UART_SetConfig+0xa3e>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x950>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	0800679f 	.word	0x0800679f
 8006718:	080067a7 	.word	0x080067a7
 800671c:	08006803 	.word	0x08006803
 8006720:	08006803 	.word	0x08006803
 8006724:	080067af 	.word	0x080067af
 8006728:	08006803 	.word	0x08006803
 800672c:	08006803 	.word	0x08006803
 8006730:	08006803 	.word	0x08006803
 8006734:	080067bf 	.word	0x080067bf
 8006738:	08006803 	.word	0x08006803
 800673c:	08006803 	.word	0x08006803
 8006740:	08006803 	.word	0x08006803
 8006744:	08006803 	.word	0x08006803
 8006748:	08006803 	.word	0x08006803
 800674c:	08006803 	.word	0x08006803
 8006750:	08006803 	.word	0x08006803
 8006754:	080067cf 	.word	0x080067cf
 8006758:	08006803 	.word	0x08006803
 800675c:	08006803 	.word	0x08006803
 8006760:	08006803 	.word	0x08006803
 8006764:	08006803 	.word	0x08006803
 8006768:	08006803 	.word	0x08006803
 800676c:	08006803 	.word	0x08006803
 8006770:	08006803 	.word	0x08006803
 8006774:	08006803 	.word	0x08006803
 8006778:	08006803 	.word	0x08006803
 800677c:	08006803 	.word	0x08006803
 8006780:	08006803 	.word	0x08006803
 8006784:	08006803 	.word	0x08006803
 8006788:	08006803 	.word	0x08006803
 800678c:	08006803 	.word	0x08006803
 8006790:	08006803 	.word	0x08006803
 8006794:	080067f5 	.word	0x080067f5
 8006798:	2b40      	cmp	r3, #64	; 0x40
 800679a:	d02e      	beq.n	80067fa <UART_SetConfig+0xa36>
 800679c:	e031      	b.n	8006802 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679e:	f7fd fbdb 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80067a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067a4:	e033      	b.n	800680e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a6:	f7fd fbed 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 80067aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067ac:	e02f      	b.n	800680e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fe1c 	bl	80053f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067bc:	e027      	b.n	800680e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067be:	f107 0318 	add.w	r3, r7, #24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe ff68 	bl	8005698 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067cc:	e01f      	b.n	800680e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ce:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <UART_SetConfig+0xac0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067da:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <UART_SetConfig+0xac0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	4a28      	ldr	r2, [pc, #160]	; (8006888 <UART_SetConfig+0xac4>)
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067ec:	e00f      	b.n	800680e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067ee:	4b26      	ldr	r3, [pc, #152]	; (8006888 <UART_SetConfig+0xac4>)
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f2:	e00c      	b.n	800680e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <UART_SetConfig+0xac8>)
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f8:	e009      	b.n	800680e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006800:	e005      	b.n	800680e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800680c:	bf00      	nop
    }

    if (pclk != 0U)
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d021      	beq.n	8006858 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <UART_SetConfig+0xacc>)
 800681a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800681e:	461a      	mov	r2, r3
 8006820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006822:	fbb3 f2f2 	udiv	r2, r3, r2
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	441a      	add	r2, r3
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	2b0f      	cmp	r3, #15
 800683c:	d909      	bls.n	8006852 <UART_SetConfig+0xa8e>
 800683e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d205      	bcs.n	8006852 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	b29a      	uxth	r2, r3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60da      	str	r2, [r3, #12]
 8006850:	e002      	b.n	8006858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2201      	movs	r2, #1
 800685c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2201      	movs	r2, #1
 8006864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2200      	movs	r2, #0
 8006872:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006874:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006878:	4618      	mov	r0, r3
 800687a:	3748      	adds	r7, #72	; 0x48
 800687c:	46bd      	mov	sp, r7
 800687e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006882:	bf00      	nop
 8006884:	58024400 	.word	0x58024400
 8006888:	03d09000 	.word	0x03d09000
 800688c:	003d0900 	.word	0x003d0900
 8006890:	08009ea0 	.word	0x08009ea0

08006894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f003 0308 	and.w	r3, r3, #8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01a      	beq.n	80069aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006992:	d10a      	bne.n	80069aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b098      	sub	sp, #96	; 0x60
 80069dc:	af02      	add	r7, sp, #8
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069e8:	f7fa fda2 	bl	8001530 <HAL_GetTick>
 80069ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d12f      	bne.n	8006a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a04:	2200      	movs	r2, #0
 8006a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f88e 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d022      	beq.n	8006a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a34:	647b      	str	r3, [r7, #68]	; 0x44
 8006a36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e063      	b.n	8006b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d149      	bne.n	8006afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a72:	2200      	movs	r2, #0
 8006a74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f857 	bl	8006b2c <UART_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d03c      	beq.n	8006afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	623b      	str	r3, [r7, #32]
   return(result);
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e6      	bne.n	8006a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad6:	61fa      	str	r2, [r7, #28]
 8006ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e012      	b.n	8006b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3758      	adds	r7, #88	; 0x58
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b3c:	e049      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b44:	d045      	beq.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fa fcf3 	bl	8001530 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e048      	b.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d031      	beq.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d110      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f839 	bl	8006bfc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e029      	b.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bac:	d111      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f81f 	bl	8006bfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e00f      	b.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	461a      	mov	r2, r3
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d0a6      	beq.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b095      	sub	sp, #84	; 0x54
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40
 8006c24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	4b1e      	ldr	r3, [pc, #120]	; (8006cc4 <UART_EndRxTransfer+0xc8>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d118      	bne.n	8006ca4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f023 0310 	bic.w	r3, r3, #16
 8006c86:	647b      	str	r3, [r7, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6979      	ldr	r1, [r7, #20]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e6      	bne.n	8006c72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cb8:	bf00      	nop
 8006cba:	3754      	adds	r7, #84	; 0x54
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	effffffe 	.word	0xeffffffe

08006cc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_UARTEx_DisableFifoMode+0x16>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e027      	b.n	8006d2e <HAL_UARTEx_DisableFifoMode+0x66>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2224      	movs	r2, #36	; 0x24
 8006cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e02d      	b.n	8006dae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2224      	movs	r2, #36	; 0x24
 8006d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f850 	bl	8006e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e02d      	b.n	8006e2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	; 0x24
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f812 	bl	8006e34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d108      	bne.n	8006e56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e54:	e031      	b.n	8006eba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e56:	2310      	movs	r3, #16
 8006e58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	0e5b      	lsrs	r3, r3, #25
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	0f5b      	lsrs	r3, r3, #29
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	7b3a      	ldrb	r2, [r7, #12]
 8006e82:	4911      	ldr	r1, [pc, #68]	; (8006ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8006e84:	5c8a      	ldrb	r2, [r1, r2]
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e8a:	7b3a      	ldrb	r2, [r7, #12]
 8006e8c:	490f      	ldr	r1, [pc, #60]	; (8006ecc <UARTEx_SetNbDataToProcess+0x98>)
 8006e8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	7b7a      	ldrb	r2, [r7, #13]
 8006ea0:	4909      	ldr	r1, [pc, #36]	; (8006ec8 <UARTEx_SetNbDataToProcess+0x94>)
 8006ea2:	5c8a      	ldrb	r2, [r1, r2]
 8006ea4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ea8:	7b7a      	ldrb	r2, [r7, #13]
 8006eaa:	4908      	ldr	r1, [pc, #32]	; (8006ecc <UARTEx_SetNbDataToProcess+0x98>)
 8006eac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eae:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	08009eb8 	.word	0x08009eb8
 8006ecc:	08009ec0 	.word	0x08009ec0

08006ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	f107 001c 	add.w	r0, r7, #28
 8006ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d120      	bne.n	8006f2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <USB_CoreInit+0xd4>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d105      	bne.n	8006f1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 faac 	bl	800747c <USB_CoreReset>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e01a      	b.n	8006f60 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 faa0 	bl	800747c <USB_CoreReset>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
 8006f52:	e005      	b.n	8006f60 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d116      	bne.n	8006f94 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <USB_CoreInit+0xd8>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f043 0206 	orr.w	r2, r3, #6
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fa0:	b004      	add	sp, #16
 8006fa2:	4770      	bx	lr
 8006fa4:	ffbdffbf 	.word	0xffbdffbf
 8006fa8:	03ee0000 	.word	0x03ee0000

08006fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f023 0201 	bic.w	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d115      	bne.n	800701c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	f7fa faa3 	bl	8001548 <HAL_Delay>
      ms++;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fa29 	bl	8007460 <USB_GetMode>
 800700e:	4603      	mov	r3, r0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d01e      	beq.n	8007052 <USB_SetCurrentMode+0x84>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b31      	cmp	r3, #49	; 0x31
 8007018:	d9f0      	bls.n	8006ffc <USB_SetCurrentMode+0x2e>
 800701a:	e01a      	b.n	8007052 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d115      	bne.n	800704e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800702e:	2001      	movs	r0, #1
 8007030:	f7fa fa8a 	bl	8001548 <HAL_Delay>
      ms++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa10 	bl	8007460 <USB_GetMode>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <USB_SetCurrentMode+0x84>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b31      	cmp	r3, #49	; 0x31
 800704a:	d9f0      	bls.n	800702e <USB_SetCurrentMode+0x60>
 800704c:	e001      	b.n	8007052 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e005      	b.n	800705e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b32      	cmp	r3, #50	; 0x32
 8007056:	d101      	bne.n	800705c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007068:	b084      	sub	sp, #16
 800706a:	b580      	push	{r7, lr}
 800706c:	b086      	sub	sp, #24
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	e009      	b.n	800709c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3340      	adds	r3, #64	; 0x40
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	2200      	movs	r2, #0
 8007094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3301      	adds	r3, #1
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b0e      	cmp	r3, #14
 80070a0:	d9f2      	bls.n	8007088 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11c      	bne.n	80070e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b6:	f043 0302 	orr.w	r3, r3, #2
 80070ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e005      	b.n	80070ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070f4:	461a      	mov	r2, r3
 80070f6:	2300      	movs	r3, #0
 80070f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	4619      	mov	r1, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007108:	461a      	mov	r2, r3
 800710a:	680b      	ldr	r3, [r1, #0]
 800710c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	2b01      	cmp	r3, #1
 8007112:	d10c      	bne.n	800712e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800711a:	2100      	movs	r1, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f965 	bl	80073ec <USB_SetDevSpeed>
 8007122:	e008      	b.n	8007136 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007124:	2101      	movs	r1, #1
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f960 	bl	80073ec <USB_SetDevSpeed>
 800712c:	e003      	b.n	8007136 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800712e:	2103      	movs	r1, #3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f95b 	bl	80073ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007136:	2110      	movs	r1, #16
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8f3 	bl	8007324 <USB_FlushTxFifo>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f91f 	bl	800738c <USB_FlushRxFifo>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	461a      	mov	r2, r3
 8007160:	2300      	movs	r3, #0
 8007162:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	461a      	mov	r2, r3
 800716c:	2300      	movs	r3, #0
 800716e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	461a      	mov	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	e043      	b.n	800720a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007198:	d118      	bne.n	80071cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	461a      	mov	r2, r3
 80071ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	e013      	b.n	80071de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	461a      	mov	r2, r3
 80071c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	e008      	b.n	80071de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d8:	461a      	mov	r2, r3
 80071da:	2300      	movs	r3, #0
 80071dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ea:	461a      	mov	r2, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fc:	461a      	mov	r2, r3
 80071fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007202:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	3301      	adds	r3, #1
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d3b7      	bcc.n	8007182 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007212:	2300      	movs	r3, #0
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	e043      	b.n	80072a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800722a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800722e:	d118      	bne.n	8007262 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	461a      	mov	r2, r3
 8007244:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e013      	b.n	8007274 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007258:	461a      	mov	r2, r3
 800725a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	e008      	b.n	8007274 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726e:	461a      	mov	r2, r3
 8007270:	2300      	movs	r3, #0
 8007272:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007292:	461a      	mov	r2, r3
 8007294:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007298:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3301      	adds	r3, #1
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d3b7      	bcc.n	8007218 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f043 0210 	orr.w	r2, r3, #16
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	4b0e      	ldr	r3, [pc, #56]	; (800731c <USB_DevInit+0x2b4>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f043 0208 	orr.w	r2, r3, #8
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <USB_DevInit+0x2b8>)
 8007306:	4313      	orrs	r3, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007318:	b004      	add	sp, #16
 800731a:	4770      	bx	lr
 800731c:	803c3800 	.word	0x803c3800
 8007320:	40000004 	.word	0x40000004

08007324 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a13      	ldr	r2, [pc, #76]	; (8007388 <USB_FlushTxFifo+0x64>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e01b      	b.n	800737c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	daf2      	bge.n	8007332 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	019b      	lsls	r3, r3, #6
 8007354:	f043 0220 	orr.w	r2, r3, #32
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <USB_FlushTxFifo+0x64>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e006      	b.n	800737c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b20      	cmp	r3, #32
 8007378:	d0f0      	beq.n	800735c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	00030d40 	.word	0x00030d40

0800738c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <USB_FlushRxFifo+0x5c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d901      	bls.n	80073aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e018      	b.n	80073dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	daf2      	bge.n	8007398 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2210      	movs	r2, #16
 80073ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3301      	adds	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <USB_FlushRxFifo+0x5c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e006      	b.n	80073dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d0f0      	beq.n	80073bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	00030d40 	.word	0x00030d40

080073ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	68f9      	ldr	r1, [r7, #12]
 8007408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800740c:	4313      	orrs	r3, r2
 800740e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007438:	f023 0303 	bic.w	r3, r3, #3
 800743c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800744c:	f043 0302 	orr.w	r3, r3, #2
 8007450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f003 0301 	and.w	r3, r3, #1
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <USB_CoreReset+0x64>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e01b      	b.n	80074d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	daf2      	bge.n	8007488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f043 0201 	orr.w	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <USB_CoreReset+0x64>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d901      	bls.n	80074c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e006      	b.n	80074d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d0f0      	beq.n	80074b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	00030d40 	.word	0x00030d40

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	; (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	24000018 	.word	0x24000018

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4d0d      	ldr	r5, [pc, #52]	; (8007528 <__libc_init_array+0x38>)
 80074f4:	4c0d      	ldr	r4, [pc, #52]	; (800752c <__libc_init_array+0x3c>)
 80074f6:	1b64      	subs	r4, r4, r5
 80074f8:	10a4      	asrs	r4, r4, #2
 80074fa:	2600      	movs	r6, #0
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	4d0b      	ldr	r5, [pc, #44]	; (8007530 <__libc_init_array+0x40>)
 8007502:	4c0c      	ldr	r4, [pc, #48]	; (8007534 <__libc_init_array+0x44>)
 8007504:	f002 fca8 	bl	8009e58 <_init>
 8007508:	1b64      	subs	r4, r4, r5
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	2600      	movs	r6, #0
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f855 3b04 	ldr.w	r3, [r5], #4
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	0800a2ac 	.word	0x0800a2ac
 800752c:	0800a2ac 	.word	0x0800a2ac
 8007530:	0800a2ac 	.word	0x0800a2ac
 8007534:	0800a2b0 	.word	0x0800a2b0

08007538 <memset>:
 8007538:	4402      	add	r2, r0
 800753a:	4603      	mov	r3, r0
 800753c:	4293      	cmp	r3, r2
 800753e:	d100      	bne.n	8007542 <memset+0xa>
 8007540:	4770      	bx	lr
 8007542:	f803 1b01 	strb.w	r1, [r3], #1
 8007546:	e7f9      	b.n	800753c <memset+0x4>

08007548 <__cvt>:
 8007548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800754a:	ed2d 8b02 	vpush	{d8}
 800754e:	eeb0 8b40 	vmov.f64	d8, d0
 8007552:	b085      	sub	sp, #20
 8007554:	4617      	mov	r7, r2
 8007556:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007558:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800755a:	ee18 2a90 	vmov	r2, s17
 800755e:	f025 0520 	bic.w	r5, r5, #32
 8007562:	2a00      	cmp	r2, #0
 8007564:	bfb6      	itet	lt
 8007566:	222d      	movlt	r2, #45	; 0x2d
 8007568:	2200      	movge	r2, #0
 800756a:	eeb1 8b40 	vneglt.f64	d8, d0
 800756e:	2d46      	cmp	r5, #70	; 0x46
 8007570:	460c      	mov	r4, r1
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	d004      	beq.n	8007580 <__cvt+0x38>
 8007576:	2d45      	cmp	r5, #69	; 0x45
 8007578:	d100      	bne.n	800757c <__cvt+0x34>
 800757a:	3401      	adds	r4, #1
 800757c:	2102      	movs	r1, #2
 800757e:	e000      	b.n	8007582 <__cvt+0x3a>
 8007580:	2103      	movs	r1, #3
 8007582:	ab03      	add	r3, sp, #12
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	ab02      	add	r3, sp, #8
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	4622      	mov	r2, r4
 800758c:	4633      	mov	r3, r6
 800758e:	eeb0 0b48 	vmov.f64	d0, d8
 8007592:	f000 fcc1 	bl	8007f18 <_dtoa_r>
 8007596:	2d47      	cmp	r5, #71	; 0x47
 8007598:	d101      	bne.n	800759e <__cvt+0x56>
 800759a:	07fb      	lsls	r3, r7, #31
 800759c:	d51a      	bpl.n	80075d4 <__cvt+0x8c>
 800759e:	2d46      	cmp	r5, #70	; 0x46
 80075a0:	eb00 0204 	add.w	r2, r0, r4
 80075a4:	d10c      	bne.n	80075c0 <__cvt+0x78>
 80075a6:	7803      	ldrb	r3, [r0, #0]
 80075a8:	2b30      	cmp	r3, #48	; 0x30
 80075aa:	d107      	bne.n	80075bc <__cvt+0x74>
 80075ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	bf1c      	itt	ne
 80075b6:	f1c4 0401 	rsbne	r4, r4, #1
 80075ba:	6034      	strne	r4, [r6, #0]
 80075bc:	6833      	ldr	r3, [r6, #0]
 80075be:	441a      	add	r2, r3
 80075c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	bf08      	it	eq
 80075ca:	9203      	streq	r2, [sp, #12]
 80075cc:	2130      	movs	r1, #48	; 0x30
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d307      	bcc.n	80075e4 <__cvt+0x9c>
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075d8:	1a1b      	subs	r3, r3, r0
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	b005      	add	sp, #20
 80075de:	ecbd 8b02 	vpop	{d8}
 80075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e4:	1c5c      	adds	r4, r3, #1
 80075e6:	9403      	str	r4, [sp, #12]
 80075e8:	7019      	strb	r1, [r3, #0]
 80075ea:	e7f0      	b.n	80075ce <__cvt+0x86>

080075ec <__exponent>:
 80075ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ee:	4603      	mov	r3, r0
 80075f0:	2900      	cmp	r1, #0
 80075f2:	bfb8      	it	lt
 80075f4:	4249      	neglt	r1, r1
 80075f6:	f803 2b02 	strb.w	r2, [r3], #2
 80075fa:	bfb4      	ite	lt
 80075fc:	222d      	movlt	r2, #45	; 0x2d
 80075fe:	222b      	movge	r2, #43	; 0x2b
 8007600:	2909      	cmp	r1, #9
 8007602:	7042      	strb	r2, [r0, #1]
 8007604:	dd2a      	ble.n	800765c <__exponent+0x70>
 8007606:	f10d 0407 	add.w	r4, sp, #7
 800760a:	46a4      	mov	ip, r4
 800760c:	270a      	movs	r7, #10
 800760e:	46a6      	mov	lr, r4
 8007610:	460a      	mov	r2, r1
 8007612:	fb91 f6f7 	sdiv	r6, r1, r7
 8007616:	fb07 1516 	mls	r5, r7, r6, r1
 800761a:	3530      	adds	r5, #48	; 0x30
 800761c:	2a63      	cmp	r2, #99	; 0x63
 800761e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007622:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007626:	4631      	mov	r1, r6
 8007628:	dcf1      	bgt.n	800760e <__exponent+0x22>
 800762a:	3130      	adds	r1, #48	; 0x30
 800762c:	f1ae 0502 	sub.w	r5, lr, #2
 8007630:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007634:	1c44      	adds	r4, r0, #1
 8007636:	4629      	mov	r1, r5
 8007638:	4561      	cmp	r1, ip
 800763a:	d30a      	bcc.n	8007652 <__exponent+0x66>
 800763c:	f10d 0209 	add.w	r2, sp, #9
 8007640:	eba2 020e 	sub.w	r2, r2, lr
 8007644:	4565      	cmp	r5, ip
 8007646:	bf88      	it	hi
 8007648:	2200      	movhi	r2, #0
 800764a:	4413      	add	r3, r2
 800764c:	1a18      	subs	r0, r3, r0
 800764e:	b003      	add	sp, #12
 8007650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007656:	f804 2f01 	strb.w	r2, [r4, #1]!
 800765a:	e7ed      	b.n	8007638 <__exponent+0x4c>
 800765c:	2330      	movs	r3, #48	; 0x30
 800765e:	3130      	adds	r1, #48	; 0x30
 8007660:	7083      	strb	r3, [r0, #2]
 8007662:	70c1      	strb	r1, [r0, #3]
 8007664:	1d03      	adds	r3, r0, #4
 8007666:	e7f1      	b.n	800764c <__exponent+0x60>

08007668 <_printf_float>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	b08b      	sub	sp, #44	; 0x2c
 800766e:	460c      	mov	r4, r1
 8007670:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007674:	4616      	mov	r6, r2
 8007676:	461f      	mov	r7, r3
 8007678:	4605      	mov	r5, r0
 800767a:	f001 fab1 	bl	8008be0 <_localeconv_r>
 800767e:	f8d0 b000 	ldr.w	fp, [r0]
 8007682:	4658      	mov	r0, fp
 8007684:	f7f8 fe2c 	bl	80002e0 <strlen>
 8007688:	2300      	movs	r3, #0
 800768a:	9308      	str	r3, [sp, #32]
 800768c:	f8d8 3000 	ldr.w	r3, [r8]
 8007690:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	3307      	adds	r3, #7
 8007698:	f023 0307 	bic.w	r3, r3, #7
 800769c:	f103 0108 	add.w	r1, r3, #8
 80076a0:	f8c8 1000 	str.w	r1, [r8]
 80076a4:	4682      	mov	sl, r0
 80076a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80076ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007910 <_printf_float+0x2a8>
 80076b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80076b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80076ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	dd24      	ble.n	800770e <_printf_float+0xa6>
 80076c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80076c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076cc:	d502      	bpl.n	80076d4 <_printf_float+0x6c>
 80076ce:	232d      	movs	r3, #45	; 0x2d
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	4b90      	ldr	r3, [pc, #576]	; (8007918 <_printf_float+0x2b0>)
 80076d6:	4891      	ldr	r0, [pc, #580]	; (800791c <_printf_float+0x2b4>)
 80076d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80076dc:	bf94      	ite	ls
 80076de:	4698      	movls	r8, r3
 80076e0:	4680      	movhi	r8, r0
 80076e2:	2303      	movs	r3, #3
 80076e4:	6123      	str	r3, [r4, #16]
 80076e6:	f022 0204 	bic.w	r2, r2, #4
 80076ea:	2300      	movs	r3, #0
 80076ec:	6022      	str	r2, [r4, #0]
 80076ee:	9304      	str	r3, [sp, #16]
 80076f0:	9700      	str	r7, [sp, #0]
 80076f2:	4633      	mov	r3, r6
 80076f4:	aa09      	add	r2, sp, #36	; 0x24
 80076f6:	4621      	mov	r1, r4
 80076f8:	4628      	mov	r0, r5
 80076fa:	f000 f9d3 	bl	8007aa4 <_printf_common>
 80076fe:	3001      	adds	r0, #1
 8007700:	f040 808a 	bne.w	8007818 <_printf_float+0x1b0>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007708:	b00b      	add	sp, #44	; 0x2c
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007716:	d709      	bvc.n	800772c <_printf_float+0xc4>
 8007718:	ee10 3a90 	vmov	r3, s1
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfbc      	itt	lt
 8007720:	232d      	movlt	r3, #45	; 0x2d
 8007722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007726:	487e      	ldr	r0, [pc, #504]	; (8007920 <_printf_float+0x2b8>)
 8007728:	4b7e      	ldr	r3, [pc, #504]	; (8007924 <_printf_float+0x2bc>)
 800772a:	e7d5      	b.n	80076d8 <_printf_float+0x70>
 800772c:	6863      	ldr	r3, [r4, #4]
 800772e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007732:	9104      	str	r1, [sp, #16]
 8007734:	1c59      	adds	r1, r3, #1
 8007736:	d13c      	bne.n	80077b2 <_printf_float+0x14a>
 8007738:	2306      	movs	r3, #6
 800773a:	6063      	str	r3, [r4, #4]
 800773c:	2300      	movs	r3, #0
 800773e:	9303      	str	r3, [sp, #12]
 8007740:	ab08      	add	r3, sp, #32
 8007742:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007746:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800774a:	ab07      	add	r3, sp, #28
 800774c:	6861      	ldr	r1, [r4, #4]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	6022      	str	r2, [r4, #0]
 8007752:	f10d 031b 	add.w	r3, sp, #27
 8007756:	4628      	mov	r0, r5
 8007758:	f7ff fef6 	bl	8007548 <__cvt>
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	9907      	ldr	r1, [sp, #28]
 8007760:	2b47      	cmp	r3, #71	; 0x47
 8007762:	4680      	mov	r8, r0
 8007764:	d108      	bne.n	8007778 <_printf_float+0x110>
 8007766:	1cc8      	adds	r0, r1, #3
 8007768:	db02      	blt.n	8007770 <_printf_float+0x108>
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	4299      	cmp	r1, r3
 800776e:	dd41      	ble.n	80077f4 <_printf_float+0x18c>
 8007770:	f1a9 0902 	sub.w	r9, r9, #2
 8007774:	fa5f f989 	uxtb.w	r9, r9
 8007778:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800777c:	d820      	bhi.n	80077c0 <_printf_float+0x158>
 800777e:	3901      	subs	r1, #1
 8007780:	464a      	mov	r2, r9
 8007782:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007786:	9107      	str	r1, [sp, #28]
 8007788:	f7ff ff30 	bl	80075ec <__exponent>
 800778c:	9a08      	ldr	r2, [sp, #32]
 800778e:	9004      	str	r0, [sp, #16]
 8007790:	1813      	adds	r3, r2, r0
 8007792:	2a01      	cmp	r2, #1
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	dc02      	bgt.n	800779e <_printf_float+0x136>
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	07d2      	lsls	r2, r2, #31
 800779c:	d501      	bpl.n	80077a2 <_printf_float+0x13a>
 800779e:	3301      	adds	r3, #1
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0a2      	beq.n	80076f0 <_printf_float+0x88>
 80077aa:	232d      	movs	r3, #45	; 0x2d
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b0:	e79e      	b.n	80076f0 <_printf_float+0x88>
 80077b2:	9904      	ldr	r1, [sp, #16]
 80077b4:	2947      	cmp	r1, #71	; 0x47
 80077b6:	d1c1      	bne.n	800773c <_printf_float+0xd4>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1bf      	bne.n	800773c <_printf_float+0xd4>
 80077bc:	2301      	movs	r3, #1
 80077be:	e7bc      	b.n	800773a <_printf_float+0xd2>
 80077c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80077c4:	d118      	bne.n	80077f8 <_printf_float+0x190>
 80077c6:	2900      	cmp	r1, #0
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	dd0b      	ble.n	80077e4 <_printf_float+0x17c>
 80077cc:	6121      	str	r1, [r4, #16]
 80077ce:	b913      	cbnz	r3, 80077d6 <_printf_float+0x16e>
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	07d0      	lsls	r0, r2, #31
 80077d4:	d502      	bpl.n	80077dc <_printf_float+0x174>
 80077d6:	3301      	adds	r3, #1
 80077d8:	440b      	add	r3, r1
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	2300      	movs	r3, #0
 80077de:	65a1      	str	r1, [r4, #88]	; 0x58
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	e7de      	b.n	80077a2 <_printf_float+0x13a>
 80077e4:	b913      	cbnz	r3, 80077ec <_printf_float+0x184>
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	07d2      	lsls	r2, r2, #31
 80077ea:	d501      	bpl.n	80077f0 <_printf_float+0x188>
 80077ec:	3302      	adds	r3, #2
 80077ee:	e7f4      	b.n	80077da <_printf_float+0x172>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e7f2      	b.n	80077da <_printf_float+0x172>
 80077f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	4299      	cmp	r1, r3
 80077fc:	db05      	blt.n	800780a <_printf_float+0x1a2>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	6121      	str	r1, [r4, #16]
 8007802:	07d8      	lsls	r0, r3, #31
 8007804:	d5ea      	bpl.n	80077dc <_printf_float+0x174>
 8007806:	1c4b      	adds	r3, r1, #1
 8007808:	e7e7      	b.n	80077da <_printf_float+0x172>
 800780a:	2900      	cmp	r1, #0
 800780c:	bfd4      	ite	le
 800780e:	f1c1 0202 	rsble	r2, r1, #2
 8007812:	2201      	movgt	r2, #1
 8007814:	4413      	add	r3, r2
 8007816:	e7e0      	b.n	80077da <_printf_float+0x172>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	055a      	lsls	r2, r3, #21
 800781c:	d407      	bmi.n	800782e <_printf_float+0x1c6>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	4642      	mov	r2, r8
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	d12a      	bne.n	8007882 <_printf_float+0x21a>
 800782c:	e76a      	b.n	8007704 <_printf_float+0x9c>
 800782e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007832:	f240 80e2 	bls.w	80079fa <_printf_float+0x392>
 8007836:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800783a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800783e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007842:	d133      	bne.n	80078ac <_printf_float+0x244>
 8007844:	4a38      	ldr	r2, [pc, #224]	; (8007928 <_printf_float+0x2c0>)
 8007846:	2301      	movs	r3, #1
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f af58 	beq.w	8007704 <_printf_float+0x9c>
 8007854:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007858:	429a      	cmp	r2, r3
 800785a:	db02      	blt.n	8007862 <_printf_float+0x1fa>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	07d8      	lsls	r0, r3, #31
 8007860:	d50f      	bpl.n	8007882 <_printf_float+0x21a>
 8007862:	4653      	mov	r3, sl
 8007864:	465a      	mov	r2, fp
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f af49 	beq.w	8007704 <_printf_float+0x9c>
 8007872:	f04f 0800 	mov.w	r8, #0
 8007876:	f104 091a 	add.w	r9, r4, #26
 800787a:	9b08      	ldr	r3, [sp, #32]
 800787c:	3b01      	subs	r3, #1
 800787e:	4543      	cmp	r3, r8
 8007880:	dc09      	bgt.n	8007896 <_printf_float+0x22e>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	079b      	lsls	r3, r3, #30
 8007886:	f100 8108 	bmi.w	8007a9a <_printf_float+0x432>
 800788a:	68e0      	ldr	r0, [r4, #12]
 800788c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788e:	4298      	cmp	r0, r3
 8007890:	bfb8      	it	lt
 8007892:	4618      	movlt	r0, r3
 8007894:	e738      	b.n	8007708 <_printf_float+0xa0>
 8007896:	2301      	movs	r3, #1
 8007898:	464a      	mov	r2, r9
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f af2f 	beq.w	8007704 <_printf_float+0x9c>
 80078a6:	f108 0801 	add.w	r8, r8, #1
 80078aa:	e7e6      	b.n	800787a <_printf_float+0x212>
 80078ac:	9b07      	ldr	r3, [sp, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dc3c      	bgt.n	800792c <_printf_float+0x2c4>
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <_printf_float+0x2c0>)
 80078b4:	2301      	movs	r3, #1
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f af21 	beq.w	8007704 <_printf_float+0x9c>
 80078c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	d102      	bne.n	80078d0 <_printf_float+0x268>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	07d9      	lsls	r1, r3, #31
 80078ce:	d5d8      	bpl.n	8007882 <_printf_float+0x21a>
 80078d0:	4653      	mov	r3, sl
 80078d2:	465a      	mov	r2, fp
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f af12 	beq.w	8007704 <_printf_float+0x9c>
 80078e0:	f04f 0900 	mov.w	r9, #0
 80078e4:	f104 0a1a 	add.w	sl, r4, #26
 80078e8:	9b07      	ldr	r3, [sp, #28]
 80078ea:	425b      	negs	r3, r3
 80078ec:	454b      	cmp	r3, r9
 80078ee:	dc01      	bgt.n	80078f4 <_printf_float+0x28c>
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	e795      	b.n	8007820 <_printf_float+0x1b8>
 80078f4:	2301      	movs	r3, #1
 80078f6:	4652      	mov	r2, sl
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f af00 	beq.w	8007704 <_printf_float+0x9c>
 8007904:	f109 0901 	add.w	r9, r9, #1
 8007908:	e7ee      	b.n	80078e8 <_printf_float+0x280>
 800790a:	bf00      	nop
 800790c:	f3af 8000 	nop.w
 8007910:	ffffffff 	.word	0xffffffff
 8007914:	7fefffff 	.word	0x7fefffff
 8007918:	08009ecc 	.word	0x08009ecc
 800791c:	08009ed0 	.word	0x08009ed0
 8007920:	08009ed8 	.word	0x08009ed8
 8007924:	08009ed4 	.word	0x08009ed4
 8007928:	08009edc 	.word	0x08009edc
 800792c:	9a08      	ldr	r2, [sp, #32]
 800792e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007930:	429a      	cmp	r2, r3
 8007932:	bfa8      	it	ge
 8007934:	461a      	movge	r2, r3
 8007936:	2a00      	cmp	r2, #0
 8007938:	4691      	mov	r9, r2
 800793a:	dc38      	bgt.n	80079ae <_printf_float+0x346>
 800793c:	2300      	movs	r3, #0
 800793e:	9305      	str	r3, [sp, #20]
 8007940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007944:	f104 021a 	add.w	r2, r4, #26
 8007948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800794a:	9905      	ldr	r1, [sp, #20]
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	eba3 0309 	sub.w	r3, r3, r9
 8007952:	428b      	cmp	r3, r1
 8007954:	dc33      	bgt.n	80079be <_printf_float+0x356>
 8007956:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800795a:	429a      	cmp	r2, r3
 800795c:	db3c      	blt.n	80079d8 <_printf_float+0x370>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	07da      	lsls	r2, r3, #31
 8007962:	d439      	bmi.n	80079d8 <_printf_float+0x370>
 8007964:	9b08      	ldr	r3, [sp, #32]
 8007966:	9a04      	ldr	r2, [sp, #16]
 8007968:	9907      	ldr	r1, [sp, #28]
 800796a:	1a9a      	subs	r2, r3, r2
 800796c:	eba3 0901 	sub.w	r9, r3, r1
 8007970:	4591      	cmp	r9, r2
 8007972:	bfa8      	it	ge
 8007974:	4691      	movge	r9, r2
 8007976:	f1b9 0f00 	cmp.w	r9, #0
 800797a:	dc35      	bgt.n	80079e8 <_printf_float+0x380>
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007984:	f104 0a1a 	add.w	sl, r4, #26
 8007988:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800798c:	1a9b      	subs	r3, r3, r2
 800798e:	eba3 0309 	sub.w	r3, r3, r9
 8007992:	4543      	cmp	r3, r8
 8007994:	f77f af75 	ble.w	8007882 <_printf_float+0x21a>
 8007998:	2301      	movs	r3, #1
 800799a:	4652      	mov	r2, sl
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f aeae 	beq.w	8007704 <_printf_float+0x9c>
 80079a8:	f108 0801 	add.w	r8, r8, #1
 80079ac:	e7ec      	b.n	8007988 <_printf_float+0x320>
 80079ae:	4613      	mov	r3, r2
 80079b0:	4631      	mov	r1, r6
 80079b2:	4642      	mov	r2, r8
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	d1bf      	bne.n	800793c <_printf_float+0x2d4>
 80079bc:	e6a2      	b.n	8007704 <_printf_float+0x9c>
 80079be:	2301      	movs	r3, #1
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	9204      	str	r2, [sp, #16]
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f ae9b 	beq.w	8007704 <_printf_float+0x9c>
 80079ce:	9b05      	ldr	r3, [sp, #20]
 80079d0:	9a04      	ldr	r2, [sp, #16]
 80079d2:	3301      	adds	r3, #1
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	e7b7      	b.n	8007948 <_printf_float+0x2e0>
 80079d8:	4653      	mov	r3, sl
 80079da:	465a      	mov	r2, fp
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	d1be      	bne.n	8007964 <_printf_float+0x2fc>
 80079e6:	e68d      	b.n	8007704 <_printf_float+0x9c>
 80079e8:	9a04      	ldr	r2, [sp, #16]
 80079ea:	464b      	mov	r3, r9
 80079ec:	4442      	add	r2, r8
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	d1c1      	bne.n	800797c <_printf_float+0x314>
 80079f8:	e684      	b.n	8007704 <_printf_float+0x9c>
 80079fa:	9a08      	ldr	r2, [sp, #32]
 80079fc:	2a01      	cmp	r2, #1
 80079fe:	dc01      	bgt.n	8007a04 <_printf_float+0x39c>
 8007a00:	07db      	lsls	r3, r3, #31
 8007a02:	d537      	bpl.n	8007a74 <_printf_float+0x40c>
 8007a04:	2301      	movs	r3, #1
 8007a06:	4642      	mov	r2, r8
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	47b8      	blx	r7
 8007a0e:	3001      	adds	r0, #1
 8007a10:	f43f ae78 	beq.w	8007704 <_printf_float+0x9c>
 8007a14:	4653      	mov	r3, sl
 8007a16:	465a      	mov	r2, fp
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f ae70 	beq.w	8007704 <_printf_float+0x9c>
 8007a24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007a28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a30:	d01b      	beq.n	8007a6a <_printf_float+0x402>
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	f108 0201 	add.w	r2, r8, #1
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	d10e      	bne.n	8007a62 <_printf_float+0x3fa>
 8007a44:	e65e      	b.n	8007704 <_printf_float+0x9c>
 8007a46:	2301      	movs	r3, #1
 8007a48:	464a      	mov	r2, r9
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	f43f ae57 	beq.w	8007704 <_printf_float+0x9c>
 8007a56:	f108 0801 	add.w	r8, r8, #1
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	4543      	cmp	r3, r8
 8007a60:	dcf1      	bgt.n	8007a46 <_printf_float+0x3de>
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a68:	e6db      	b.n	8007822 <_printf_float+0x1ba>
 8007a6a:	f04f 0800 	mov.w	r8, #0
 8007a6e:	f104 091a 	add.w	r9, r4, #26
 8007a72:	e7f2      	b.n	8007a5a <_printf_float+0x3f2>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4642      	mov	r2, r8
 8007a78:	e7df      	b.n	8007a3a <_printf_float+0x3d2>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	464a      	mov	r2, r9
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b8      	blx	r7
 8007a84:	3001      	adds	r0, #1
 8007a86:	f43f ae3d 	beq.w	8007704 <_printf_float+0x9c>
 8007a8a:	f108 0801 	add.w	r8, r8, #1
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a92:	1a5b      	subs	r3, r3, r1
 8007a94:	4543      	cmp	r3, r8
 8007a96:	dcf0      	bgt.n	8007a7a <_printf_float+0x412>
 8007a98:	e6f7      	b.n	800788a <_printf_float+0x222>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	f104 0919 	add.w	r9, r4, #25
 8007aa2:	e7f4      	b.n	8007a8e <_printf_float+0x426>

08007aa4 <_printf_common>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	4616      	mov	r6, r2
 8007aaa:	4699      	mov	r9, r3
 8007aac:	688a      	ldr	r2, [r1, #8]
 8007aae:	690b      	ldr	r3, [r1, #16]
 8007ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	bfb8      	it	lt
 8007ab8:	4613      	movlt	r3, r2
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	b10a      	cbz	r2, 8007aca <_printf_common+0x26>
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	0699      	lsls	r1, r3, #26
 8007ace:	bf42      	ittt	mi
 8007ad0:	6833      	ldrmi	r3, [r6, #0]
 8007ad2:	3302      	addmi	r3, #2
 8007ad4:	6033      	strmi	r3, [r6, #0]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	f015 0506 	ands.w	r5, r5, #6
 8007adc:	d106      	bne.n	8007aec <_printf_common+0x48>
 8007ade:	f104 0a19 	add.w	sl, r4, #25
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	6832      	ldr	r2, [r6, #0]
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dc26      	bgt.n	8007b3a <_printf_common+0x96>
 8007aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007af0:	1e13      	subs	r3, r2, #0
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	bf18      	it	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	0692      	lsls	r2, r2, #26
 8007afa:	d42b      	bmi.n	8007b54 <_printf_common+0xb0>
 8007afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b00:	4649      	mov	r1, r9
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c0      	blx	r8
 8007b06:	3001      	adds	r0, #1
 8007b08:	d01e      	beq.n	8007b48 <_printf_common+0xa4>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	68e5      	ldr	r5, [r4, #12]
 8007b0e:	6832      	ldr	r2, [r6, #0]
 8007b10:	f003 0306 	and.w	r3, r3, #6
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	bf08      	it	eq
 8007b18:	1aad      	subeq	r5, r5, r2
 8007b1a:	68a3      	ldr	r3, [r4, #8]
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	bf0c      	ite	eq
 8007b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b24:	2500      	movne	r5, #0
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bfc4      	itt	gt
 8007b2a:	1a9b      	subgt	r3, r3, r2
 8007b2c:	18ed      	addgt	r5, r5, r3
 8007b2e:	2600      	movs	r6, #0
 8007b30:	341a      	adds	r4, #26
 8007b32:	42b5      	cmp	r5, r6
 8007b34:	d11a      	bne.n	8007b6c <_printf_common+0xc8>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e008      	b.n	8007b4c <_printf_common+0xa8>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4638      	mov	r0, r7
 8007b42:	47c0      	blx	r8
 8007b44:	3001      	adds	r0, #1
 8007b46:	d103      	bne.n	8007b50 <_printf_common+0xac>
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	3501      	adds	r5, #1
 8007b52:	e7c6      	b.n	8007ae2 <_printf_common+0x3e>
 8007b54:	18e1      	adds	r1, r4, r3
 8007b56:	1c5a      	adds	r2, r3, #1
 8007b58:	2030      	movs	r0, #48	; 0x30
 8007b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b5e:	4422      	add	r2, r4
 8007b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b68:	3302      	adds	r3, #2
 8007b6a:	e7c7      	b.n	8007afc <_printf_common+0x58>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4622      	mov	r2, r4
 8007b70:	4649      	mov	r1, r9
 8007b72:	4638      	mov	r0, r7
 8007b74:	47c0      	blx	r8
 8007b76:	3001      	adds	r0, #1
 8007b78:	d0e6      	beq.n	8007b48 <_printf_common+0xa4>
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7d9      	b.n	8007b32 <_printf_common+0x8e>
	...

08007b80 <_printf_i>:
 8007b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b84:	7e0f      	ldrb	r7, [r1, #24]
 8007b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b88:	2f78      	cmp	r7, #120	; 0x78
 8007b8a:	4691      	mov	r9, r2
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	469a      	mov	sl, r3
 8007b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b96:	d807      	bhi.n	8007ba8 <_printf_i+0x28>
 8007b98:	2f62      	cmp	r7, #98	; 0x62
 8007b9a:	d80a      	bhi.n	8007bb2 <_printf_i+0x32>
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	f000 80d8 	beq.w	8007d52 <_printf_i+0x1d2>
 8007ba2:	2f58      	cmp	r7, #88	; 0x58
 8007ba4:	f000 80a3 	beq.w	8007cee <_printf_i+0x16e>
 8007ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bb0:	e03a      	b.n	8007c28 <_printf_i+0xa8>
 8007bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bb6:	2b15      	cmp	r3, #21
 8007bb8:	d8f6      	bhi.n	8007ba8 <_printf_i+0x28>
 8007bba:	a101      	add	r1, pc, #4	; (adr r1, 8007bc0 <_printf_i+0x40>)
 8007bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007ba9 	.word	0x08007ba9
 8007bcc:	08007ba9 	.word	0x08007ba9
 8007bd0:	08007ba9 	.word	0x08007ba9
 8007bd4:	08007ba9 	.word	0x08007ba9
 8007bd8:	08007c2d 	.word	0x08007c2d
 8007bdc:	08007ba9 	.word	0x08007ba9
 8007be0:	08007ba9 	.word	0x08007ba9
 8007be4:	08007ba9 	.word	0x08007ba9
 8007be8:	08007ba9 	.word	0x08007ba9
 8007bec:	08007d39 	.word	0x08007d39
 8007bf0:	08007c5d 	.word	0x08007c5d
 8007bf4:	08007d1b 	.word	0x08007d1b
 8007bf8:	08007ba9 	.word	0x08007ba9
 8007bfc:	08007ba9 	.word	0x08007ba9
 8007c00:	08007d5b 	.word	0x08007d5b
 8007c04:	08007ba9 	.word	0x08007ba9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007ba9 	.word	0x08007ba9
 8007c10:	08007ba9 	.word	0x08007ba9
 8007c14:	08007d23 	.word	0x08007d23
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	1d1a      	adds	r2, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	602a      	str	r2, [r5, #0]
 8007c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0a3      	b.n	8007d74 <_printf_i+0x1f4>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	6829      	ldr	r1, [r5, #0]
 8007c30:	0606      	lsls	r6, r0, #24
 8007c32:	f101 0304 	add.w	r3, r1, #4
 8007c36:	d50a      	bpl.n	8007c4e <_printf_i+0xce>
 8007c38:	680e      	ldr	r6, [r1, #0]
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	da03      	bge.n	8007c48 <_printf_i+0xc8>
 8007c40:	232d      	movs	r3, #45	; 0x2d
 8007c42:	4276      	negs	r6, r6
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c48:	485e      	ldr	r0, [pc, #376]	; (8007dc4 <_printf_i+0x244>)
 8007c4a:	230a      	movs	r3, #10
 8007c4c:	e019      	b.n	8007c82 <_printf_i+0x102>
 8007c4e:	680e      	ldr	r6, [r1, #0]
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c56:	bf18      	it	ne
 8007c58:	b236      	sxthne	r6, r6
 8007c5a:	e7ef      	b.n	8007c3c <_printf_i+0xbc>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	6029      	str	r1, [r5, #0]
 8007c64:	0601      	lsls	r1, r0, #24
 8007c66:	d501      	bpl.n	8007c6c <_printf_i+0xec>
 8007c68:	681e      	ldr	r6, [r3, #0]
 8007c6a:	e002      	b.n	8007c72 <_printf_i+0xf2>
 8007c6c:	0646      	lsls	r6, r0, #25
 8007c6e:	d5fb      	bpl.n	8007c68 <_printf_i+0xe8>
 8007c70:	881e      	ldrh	r6, [r3, #0]
 8007c72:	4854      	ldr	r0, [pc, #336]	; (8007dc4 <_printf_i+0x244>)
 8007c74:	2f6f      	cmp	r7, #111	; 0x6f
 8007c76:	bf0c      	ite	eq
 8007c78:	2308      	moveq	r3, #8
 8007c7a:	230a      	movne	r3, #10
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c82:	6865      	ldr	r5, [r4, #4]
 8007c84:	60a5      	str	r5, [r4, #8]
 8007c86:	2d00      	cmp	r5, #0
 8007c88:	bfa2      	ittt	ge
 8007c8a:	6821      	ldrge	r1, [r4, #0]
 8007c8c:	f021 0104 	bicge.w	r1, r1, #4
 8007c90:	6021      	strge	r1, [r4, #0]
 8007c92:	b90e      	cbnz	r6, 8007c98 <_printf_i+0x118>
 8007c94:	2d00      	cmp	r5, #0
 8007c96:	d04d      	beq.n	8007d34 <_printf_i+0x1b4>
 8007c98:	4615      	mov	r5, r2
 8007c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8007ca2:	5dc7      	ldrb	r7, [r0, r7]
 8007ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ca8:	4637      	mov	r7, r6
 8007caa:	42bb      	cmp	r3, r7
 8007cac:	460e      	mov	r6, r1
 8007cae:	d9f4      	bls.n	8007c9a <_printf_i+0x11a>
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d10b      	bne.n	8007ccc <_printf_i+0x14c>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	07de      	lsls	r6, r3, #31
 8007cb8:	d508      	bpl.n	8007ccc <_printf_i+0x14c>
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	6861      	ldr	r1, [r4, #4]
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	bfde      	ittt	le
 8007cc2:	2330      	movle	r3, #48	; 0x30
 8007cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ccc:	1b52      	subs	r2, r2, r5
 8007cce:	6122      	str	r2, [r4, #16]
 8007cd0:	f8cd a000 	str.w	sl, [sp]
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	aa03      	add	r2, sp, #12
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7ff fee2 	bl	8007aa4 <_printf_common>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d14c      	bne.n	8007d7e <_printf_i+0x1fe>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce8:	b004      	add	sp, #16
 8007cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cee:	4835      	ldr	r0, [pc, #212]	; (8007dc4 <_printf_i+0x244>)
 8007cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007cf4:	6829      	ldr	r1, [r5, #0]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cfc:	6029      	str	r1, [r5, #0]
 8007cfe:	061d      	lsls	r5, r3, #24
 8007d00:	d514      	bpl.n	8007d2c <_printf_i+0x1ac>
 8007d02:	07df      	lsls	r7, r3, #31
 8007d04:	bf44      	itt	mi
 8007d06:	f043 0320 	orrmi.w	r3, r3, #32
 8007d0a:	6023      	strmi	r3, [r4, #0]
 8007d0c:	b91e      	cbnz	r6, 8007d16 <_printf_i+0x196>
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	f023 0320 	bic.w	r3, r3, #32
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	2310      	movs	r3, #16
 8007d18:	e7b0      	b.n	8007c7c <_printf_i+0xfc>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	f043 0320 	orr.w	r3, r3, #32
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	2378      	movs	r3, #120	; 0x78
 8007d24:	4828      	ldr	r0, [pc, #160]	; (8007dc8 <_printf_i+0x248>)
 8007d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d2a:	e7e3      	b.n	8007cf4 <_printf_i+0x174>
 8007d2c:	0659      	lsls	r1, r3, #25
 8007d2e:	bf48      	it	mi
 8007d30:	b2b6      	uxthmi	r6, r6
 8007d32:	e7e6      	b.n	8007d02 <_printf_i+0x182>
 8007d34:	4615      	mov	r5, r2
 8007d36:	e7bb      	b.n	8007cb0 <_printf_i+0x130>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	6826      	ldr	r6, [r4, #0]
 8007d3c:	6961      	ldr	r1, [r4, #20]
 8007d3e:	1d18      	adds	r0, r3, #4
 8007d40:	6028      	str	r0, [r5, #0]
 8007d42:	0635      	lsls	r5, r6, #24
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0x1cc>
 8007d48:	6019      	str	r1, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <_printf_i+0x1d2>
 8007d4c:	0670      	lsls	r0, r6, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0x1c8>
 8007d50:	8019      	strh	r1, [r3, #0]
 8007d52:	2300      	movs	r3, #0
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	4615      	mov	r5, r2
 8007d58:	e7ba      	b.n	8007cd0 <_printf_i+0x150>
 8007d5a:	682b      	ldr	r3, [r5, #0]
 8007d5c:	1d1a      	adds	r2, r3, #4
 8007d5e:	602a      	str	r2, [r5, #0]
 8007d60:	681d      	ldr	r5, [r3, #0]
 8007d62:	6862      	ldr	r2, [r4, #4]
 8007d64:	2100      	movs	r1, #0
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7f8 fac2 	bl	80002f0 <memchr>
 8007d6c:	b108      	cbz	r0, 8007d72 <_printf_i+0x1f2>
 8007d6e:	1b40      	subs	r0, r0, r5
 8007d70:	6060      	str	r0, [r4, #4]
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	6123      	str	r3, [r4, #16]
 8007d76:	2300      	movs	r3, #0
 8007d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d7c:	e7a8      	b.n	8007cd0 <_printf_i+0x150>
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	462a      	mov	r2, r5
 8007d82:	4649      	mov	r1, r9
 8007d84:	4640      	mov	r0, r8
 8007d86:	47d0      	blx	sl
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d0ab      	beq.n	8007ce4 <_printf_i+0x164>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	079b      	lsls	r3, r3, #30
 8007d90:	d413      	bmi.n	8007dba <_printf_i+0x23a>
 8007d92:	68e0      	ldr	r0, [r4, #12]
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	4298      	cmp	r0, r3
 8007d98:	bfb8      	it	lt
 8007d9a:	4618      	movlt	r0, r3
 8007d9c:	e7a4      	b.n	8007ce8 <_printf_i+0x168>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4632      	mov	r2, r6
 8007da2:	4649      	mov	r1, r9
 8007da4:	4640      	mov	r0, r8
 8007da6:	47d0      	blx	sl
 8007da8:	3001      	adds	r0, #1
 8007daa:	d09b      	beq.n	8007ce4 <_printf_i+0x164>
 8007dac:	3501      	adds	r5, #1
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	9903      	ldr	r1, [sp, #12]
 8007db2:	1a5b      	subs	r3, r3, r1
 8007db4:	42ab      	cmp	r3, r5
 8007db6:	dcf2      	bgt.n	8007d9e <_printf_i+0x21e>
 8007db8:	e7eb      	b.n	8007d92 <_printf_i+0x212>
 8007dba:	2500      	movs	r5, #0
 8007dbc:	f104 0619 	add.w	r6, r4, #25
 8007dc0:	e7f5      	b.n	8007dae <_printf_i+0x22e>
 8007dc2:	bf00      	nop
 8007dc4:	08009ede 	.word	0x08009ede
 8007dc8:	08009eef 	.word	0x08009eef

08007dcc <iprintf>:
 8007dcc:	b40f      	push	{r0, r1, r2, r3}
 8007dce:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <iprintf+0x2c>)
 8007dd0:	b513      	push	{r0, r1, r4, lr}
 8007dd2:	681c      	ldr	r4, [r3, #0]
 8007dd4:	b124      	cbz	r4, 8007de0 <iprintf+0x14>
 8007dd6:	69a3      	ldr	r3, [r4, #24]
 8007dd8:	b913      	cbnz	r3, 8007de0 <iprintf+0x14>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fe62 	bl	8008aa4 <__sinit>
 8007de0:	ab05      	add	r3, sp, #20
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	68a1      	ldr	r1, [r4, #8]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 fbbb 	bl	8009564 <_vfiprintf_r>
 8007dee:	b002      	add	sp, #8
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	b004      	add	sp, #16
 8007df6:	4770      	bx	lr
 8007df8:	24000018 	.word	0x24000018

08007dfc <quorem>:
 8007dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e00:	6903      	ldr	r3, [r0, #16]
 8007e02:	690c      	ldr	r4, [r1, #16]
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	4607      	mov	r7, r0
 8007e08:	f2c0 8081 	blt.w	8007f0e <quorem+0x112>
 8007e0c:	3c01      	subs	r4, #1
 8007e0e:	f101 0814 	add.w	r8, r1, #20
 8007e12:	f100 0514 	add.w	r5, r0, #20
 8007e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e24:	3301      	adds	r3, #1
 8007e26:	429a      	cmp	r2, r3
 8007e28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e30:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e34:	d331      	bcc.n	8007e9a <quorem+0x9e>
 8007e36:	f04f 0e00 	mov.w	lr, #0
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	46ac      	mov	ip, r5
 8007e3e:	46f2      	mov	sl, lr
 8007e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e44:	b293      	uxth	r3, r2
 8007e46:	fb06 e303 	mla	r3, r6, r3, lr
 8007e4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	ebaa 0303 	sub.w	r3, sl, r3
 8007e54:	f8dc a000 	ldr.w	sl, [ip]
 8007e58:	0c12      	lsrs	r2, r2, #16
 8007e5a:	fa13 f38a 	uxtah	r3, r3, sl
 8007e5e:	fb06 e202 	mla	r2, r6, r2, lr
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	9b00      	ldr	r3, [sp, #0]
 8007e66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e6a:	b292      	uxth	r2, r2
 8007e6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e74:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e78:	4581      	cmp	r9, r0
 8007e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e7e:	f84c 3b04 	str.w	r3, [ip], #4
 8007e82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e86:	d2db      	bcs.n	8007e40 <quorem+0x44>
 8007e88:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e8c:	b92b      	cbnz	r3, 8007e9a <quorem+0x9e>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	3b04      	subs	r3, #4
 8007e92:	429d      	cmp	r5, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	d32e      	bcc.n	8007ef6 <quorem+0xfa>
 8007e98:	613c      	str	r4, [r7, #16]
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	f001 f940 	bl	8009120 <__mcmp>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	db24      	blt.n	8007eee <quorem+0xf2>
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f04f 0c00 	mov.w	ip, #0
 8007eac:	f858 2b04 	ldr.w	r2, [r8], #4
 8007eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8007eb4:	b293      	uxth	r3, r2
 8007eb6:	ebac 0303 	sub.w	r3, ip, r3
 8007eba:	0c12      	lsrs	r2, r2, #16
 8007ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8007ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ece:	45c1      	cmp	r9, r8
 8007ed0:	f840 3b04 	str.w	r3, [r0], #4
 8007ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ed8:	d2e8      	bcs.n	8007eac <quorem+0xb0>
 8007eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ee2:	b922      	cbnz	r2, 8007eee <quorem+0xf2>
 8007ee4:	3b04      	subs	r3, #4
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	d30a      	bcc.n	8007f02 <quorem+0x106>
 8007eec:	613c      	str	r4, [r7, #16]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	b003      	add	sp, #12
 8007ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	d1cc      	bne.n	8007e98 <quorem+0x9c>
 8007efe:	3c01      	subs	r4, #1
 8007f00:	e7c7      	b.n	8007e92 <quorem+0x96>
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	3b04      	subs	r3, #4
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	d1f0      	bne.n	8007eec <quorem+0xf0>
 8007f0a:	3c01      	subs	r4, #1
 8007f0c:	e7eb      	b.n	8007ee6 <quorem+0xea>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e7ee      	b.n	8007ef0 <quorem+0xf4>
 8007f12:	0000      	movs	r0, r0
 8007f14:	0000      	movs	r0, r0
	...

08007f18 <_dtoa_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b02 	vpush	{d8}
 8007f20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f22:	b091      	sub	sp, #68	; 0x44
 8007f24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f28:	ec59 8b10 	vmov	r8, r9, d0
 8007f2c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007f2e:	9106      	str	r1, [sp, #24]
 8007f30:	4606      	mov	r6, r0
 8007f32:	9208      	str	r2, [sp, #32]
 8007f34:	930c      	str	r3, [sp, #48]	; 0x30
 8007f36:	b975      	cbnz	r5, 8007f56 <_dtoa_r+0x3e>
 8007f38:	2010      	movs	r0, #16
 8007f3a:	f000 fe59 	bl	8008bf0 <malloc>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6270      	str	r0, [r6, #36]	; 0x24
 8007f42:	b920      	cbnz	r0, 8007f4e <_dtoa_r+0x36>
 8007f44:	4baa      	ldr	r3, [pc, #680]	; (80081f0 <_dtoa_r+0x2d8>)
 8007f46:	21ea      	movs	r1, #234	; 0xea
 8007f48:	48aa      	ldr	r0, [pc, #680]	; (80081f4 <_dtoa_r+0x2dc>)
 8007f4a:	f001 fd61 	bl	8009a10 <__assert_func>
 8007f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f52:	6005      	str	r5, [r0, #0]
 8007f54:	60c5      	str	r5, [r0, #12]
 8007f56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f58:	6819      	ldr	r1, [r3, #0]
 8007f5a:	b151      	cbz	r1, 8007f72 <_dtoa_r+0x5a>
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	604a      	str	r2, [r1, #4]
 8007f60:	2301      	movs	r3, #1
 8007f62:	4093      	lsls	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 fe98 	bl	8008c9c <_Bfree>
 8007f6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	f1b9 0300 	subs.w	r3, r9, #0
 8007f76:	bfbb      	ittet	lt
 8007f78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	9303      	strlt	r3, [sp, #12]
 8007f7e:	2300      	movge	r3, #0
 8007f80:	2201      	movlt	r2, #1
 8007f82:	bfac      	ite	ge
 8007f84:	6023      	strge	r3, [r4, #0]
 8007f86:	6022      	strlt	r2, [r4, #0]
 8007f88:	4b9b      	ldr	r3, [pc, #620]	; (80081f8 <_dtoa_r+0x2e0>)
 8007f8a:	9c03      	ldr	r4, [sp, #12]
 8007f8c:	43a3      	bics	r3, r4
 8007f8e:	d11c      	bne.n	8007fca <_dtoa_r+0xb2>
 8007f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f92:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007f9c:	ea53 0308 	orrs.w	r3, r3, r8
 8007fa0:	f000 84fd 	beq.w	800899e <_dtoa_r+0xa86>
 8007fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fa6:	b963      	cbnz	r3, 8007fc2 <_dtoa_r+0xaa>
 8007fa8:	4b94      	ldr	r3, [pc, #592]	; (80081fc <_dtoa_r+0x2e4>)
 8007faa:	e01f      	b.n	8007fec <_dtoa_r+0xd4>
 8007fac:	4b94      	ldr	r3, [pc, #592]	; (8008200 <_dtoa_r+0x2e8>)
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	9801      	ldr	r0, [sp, #4]
 8007fb8:	b011      	add	sp, #68	; 0x44
 8007fba:	ecbd 8b02 	vpop	{d8}
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc2:	4b8e      	ldr	r3, [pc, #568]	; (80081fc <_dtoa_r+0x2e4>)
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	3303      	adds	r3, #3
 8007fc8:	e7f3      	b.n	8007fb2 <_dtoa_r+0x9a>
 8007fca:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007fce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd6:	d10b      	bne.n	8007ff0 <_dtoa_r+0xd8>
 8007fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fda:	2301      	movs	r3, #1
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 84d9 	beq.w	8008998 <_dtoa_r+0xa80>
 8007fe6:	4887      	ldr	r0, [pc, #540]	; (8008204 <_dtoa_r+0x2ec>)
 8007fe8:	6018      	str	r0, [r3, #0]
 8007fea:	1e43      	subs	r3, r0, #1
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	e7e2      	b.n	8007fb6 <_dtoa_r+0x9e>
 8007ff0:	a90f      	add	r1, sp, #60	; 0x3c
 8007ff2:	aa0e      	add	r2, sp, #56	; 0x38
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	eeb0 0b48 	vmov.f64	d0, d8
 8007ffa:	f001 f937 	bl	800926c <__d2b>
 8007ffe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008002:	4605      	mov	r5, r0
 8008004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008006:	2900      	cmp	r1, #0
 8008008:	d046      	beq.n	8008098 <_dtoa_r+0x180>
 800800a:	ee18 4a90 	vmov	r4, s17
 800800e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008012:	ec53 2b18 	vmov	r2, r3, d8
 8008016:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800801a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800801e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008022:	2400      	movs	r4, #0
 8008024:	ec43 2b16 	vmov	d6, r2, r3
 8008028:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800802c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80081d8 <_dtoa_r+0x2c0>
 8008030:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008034:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80081e0 <_dtoa_r+0x2c8>
 8008038:	eea7 6b05 	vfma.f64	d6, d7, d5
 800803c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80081e8 <_dtoa_r+0x2d0>
 8008040:	ee07 1a90 	vmov	s15, r1
 8008044:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008048:	eeb0 7b46 	vmov.f64	d7, d6
 800804c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008050:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008054:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805c:	ee16 ba90 	vmov	fp, s13
 8008060:	940a      	str	r4, [sp, #40]	; 0x28
 8008062:	d508      	bpl.n	8008076 <_dtoa_r+0x15e>
 8008064:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008068:	eeb4 6b47 	vcmp.f64	d6, d7
 800806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008070:	bf18      	it	ne
 8008072:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8008076:	f1bb 0f16 	cmp.w	fp, #22
 800807a:	d82f      	bhi.n	80080dc <_dtoa_r+0x1c4>
 800807c:	4b62      	ldr	r3, [pc, #392]	; (8008208 <_dtoa_r+0x2f0>)
 800807e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008082:	ed93 7b00 	vldr	d7, [r3]
 8008086:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808e:	d501      	bpl.n	8008094 <_dtoa_r+0x17c>
 8008090:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008094:	2300      	movs	r3, #0
 8008096:	e022      	b.n	80080de <_dtoa_r+0x1c6>
 8008098:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800809a:	4401      	add	r1, r0
 800809c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	bfc1      	itttt	gt
 80080a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080a8:	fa04 f303 	lslgt.w	r3, r4, r3
 80080ac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80080b0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80080b4:	bfd6      	itet	le
 80080b6:	f1c3 0320 	rsble	r3, r3, #32
 80080ba:	ea43 0808 	orrgt.w	r8, r3, r8
 80080be:	fa08 f803 	lslle.w	r8, r8, r3
 80080c2:	ee07 8a90 	vmov	s15, r8
 80080c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80080ca:	3901      	subs	r1, #1
 80080cc:	ee17 4a90 	vmov	r4, s15
 80080d0:	ec53 2b17 	vmov	r2, r3, d7
 80080d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80080d8:	2401      	movs	r4, #1
 80080da:	e7a3      	b.n	8008024 <_dtoa_r+0x10c>
 80080dc:	2301      	movs	r3, #1
 80080de:	930b      	str	r3, [sp, #44]	; 0x2c
 80080e0:	1a43      	subs	r3, r0, r1
 80080e2:	1e5a      	subs	r2, r3, #1
 80080e4:	bf45      	ittet	mi
 80080e6:	f1c3 0301 	rsbmi	r3, r3, #1
 80080ea:	9304      	strmi	r3, [sp, #16]
 80080ec:	2300      	movpl	r3, #0
 80080ee:	2300      	movmi	r3, #0
 80080f0:	9205      	str	r2, [sp, #20]
 80080f2:	bf54      	ite	pl
 80080f4:	9304      	strpl	r3, [sp, #16]
 80080f6:	9305      	strmi	r3, [sp, #20]
 80080f8:	f1bb 0f00 	cmp.w	fp, #0
 80080fc:	db18      	blt.n	8008130 <_dtoa_r+0x218>
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008104:	445b      	add	r3, fp
 8008106:	9305      	str	r3, [sp, #20]
 8008108:	2300      	movs	r3, #0
 800810a:	9a06      	ldr	r2, [sp, #24]
 800810c:	2a09      	cmp	r2, #9
 800810e:	d849      	bhi.n	80081a4 <_dtoa_r+0x28c>
 8008110:	2a05      	cmp	r2, #5
 8008112:	bfc4      	itt	gt
 8008114:	3a04      	subgt	r2, #4
 8008116:	9206      	strgt	r2, [sp, #24]
 8008118:	9a06      	ldr	r2, [sp, #24]
 800811a:	f1a2 0202 	sub.w	r2, r2, #2
 800811e:	bfcc      	ite	gt
 8008120:	2400      	movgt	r4, #0
 8008122:	2401      	movle	r4, #1
 8008124:	2a03      	cmp	r2, #3
 8008126:	d848      	bhi.n	80081ba <_dtoa_r+0x2a2>
 8008128:	e8df f002 	tbb	[pc, r2]
 800812c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	2200      	movs	r2, #0
 8008134:	eba3 030b 	sub.w	r3, r3, fp
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	9209      	str	r2, [sp, #36]	; 0x24
 800813c:	f1cb 0300 	rsb	r3, fp, #0
 8008140:	e7e3      	b.n	800810a <_dtoa_r+0x1f2>
 8008142:	2200      	movs	r2, #0
 8008144:	9207      	str	r2, [sp, #28]
 8008146:	9a08      	ldr	r2, [sp, #32]
 8008148:	2a00      	cmp	r2, #0
 800814a:	dc39      	bgt.n	80081c0 <_dtoa_r+0x2a8>
 800814c:	f04f 0a01 	mov.w	sl, #1
 8008150:	46d1      	mov	r9, sl
 8008152:	4652      	mov	r2, sl
 8008154:	f8cd a020 	str.w	sl, [sp, #32]
 8008158:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800815a:	2100      	movs	r1, #0
 800815c:	6079      	str	r1, [r7, #4]
 800815e:	2004      	movs	r0, #4
 8008160:	f100 0c14 	add.w	ip, r0, #20
 8008164:	4594      	cmp	ip, r2
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	d92f      	bls.n	80081ca <_dtoa_r+0x2b2>
 800816a:	4630      	mov	r0, r6
 800816c:	930d      	str	r3, [sp, #52]	; 0x34
 800816e:	f000 fd55 	bl	8008c1c <_Balloc>
 8008172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008174:	9001      	str	r0, [sp, #4]
 8008176:	4602      	mov	r2, r0
 8008178:	2800      	cmp	r0, #0
 800817a:	d149      	bne.n	8008210 <_dtoa_r+0x2f8>
 800817c:	4b23      	ldr	r3, [pc, #140]	; (800820c <_dtoa_r+0x2f4>)
 800817e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008182:	e6e1      	b.n	8007f48 <_dtoa_r+0x30>
 8008184:	2201      	movs	r2, #1
 8008186:	e7dd      	b.n	8008144 <_dtoa_r+0x22c>
 8008188:	2200      	movs	r2, #0
 800818a:	9207      	str	r2, [sp, #28]
 800818c:	9a08      	ldr	r2, [sp, #32]
 800818e:	eb0b 0a02 	add.w	sl, fp, r2
 8008192:	f10a 0901 	add.w	r9, sl, #1
 8008196:	464a      	mov	r2, r9
 8008198:	2a01      	cmp	r2, #1
 800819a:	bfb8      	it	lt
 800819c:	2201      	movlt	r2, #1
 800819e:	e7db      	b.n	8008158 <_dtoa_r+0x240>
 80081a0:	2201      	movs	r2, #1
 80081a2:	e7f2      	b.n	800818a <_dtoa_r+0x272>
 80081a4:	2401      	movs	r4, #1
 80081a6:	2200      	movs	r2, #0
 80081a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80081ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80081b0:	2100      	movs	r1, #0
 80081b2:	46d1      	mov	r9, sl
 80081b4:	2212      	movs	r2, #18
 80081b6:	9108      	str	r1, [sp, #32]
 80081b8:	e7ce      	b.n	8008158 <_dtoa_r+0x240>
 80081ba:	2201      	movs	r2, #1
 80081bc:	9207      	str	r2, [sp, #28]
 80081be:	e7f5      	b.n	80081ac <_dtoa_r+0x294>
 80081c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80081c4:	46d1      	mov	r9, sl
 80081c6:	4652      	mov	r2, sl
 80081c8:	e7c6      	b.n	8008158 <_dtoa_r+0x240>
 80081ca:	3101      	adds	r1, #1
 80081cc:	6079      	str	r1, [r7, #4]
 80081ce:	0040      	lsls	r0, r0, #1
 80081d0:	e7c6      	b.n	8008160 <_dtoa_r+0x248>
 80081d2:	bf00      	nop
 80081d4:	f3af 8000 	nop.w
 80081d8:	636f4361 	.word	0x636f4361
 80081dc:	3fd287a7 	.word	0x3fd287a7
 80081e0:	8b60c8b3 	.word	0x8b60c8b3
 80081e4:	3fc68a28 	.word	0x3fc68a28
 80081e8:	509f79fb 	.word	0x509f79fb
 80081ec:	3fd34413 	.word	0x3fd34413
 80081f0:	08009f0d 	.word	0x08009f0d
 80081f4:	08009f24 	.word	0x08009f24
 80081f8:	7ff00000 	.word	0x7ff00000
 80081fc:	08009f09 	.word	0x08009f09
 8008200:	08009f00 	.word	0x08009f00
 8008204:	08009edd 	.word	0x08009edd
 8008208:	0800a078 	.word	0x0800a078
 800820c:	08009f7f 	.word	0x08009f7f
 8008210:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008212:	9901      	ldr	r1, [sp, #4]
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	f1b9 0f0e 	cmp.w	r9, #14
 800821a:	d86c      	bhi.n	80082f6 <_dtoa_r+0x3de>
 800821c:	2c00      	cmp	r4, #0
 800821e:	d06a      	beq.n	80082f6 <_dtoa_r+0x3de>
 8008220:	f1bb 0f00 	cmp.w	fp, #0
 8008224:	f340 80a0 	ble.w	8008368 <_dtoa_r+0x450>
 8008228:	49c1      	ldr	r1, [pc, #772]	; (8008530 <_dtoa_r+0x618>)
 800822a:	f00b 020f 	and.w	r2, fp, #15
 800822e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008232:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008236:	ed92 7b00 	vldr	d7, [r2]
 800823a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800823e:	f000 8087 	beq.w	8008350 <_dtoa_r+0x438>
 8008242:	4abc      	ldr	r2, [pc, #752]	; (8008534 <_dtoa_r+0x61c>)
 8008244:	ed92 6b08 	vldr	d6, [r2, #32]
 8008248:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800824c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008250:	f001 010f 	and.w	r1, r1, #15
 8008254:	2203      	movs	r2, #3
 8008256:	48b7      	ldr	r0, [pc, #732]	; (8008534 <_dtoa_r+0x61c>)
 8008258:	2900      	cmp	r1, #0
 800825a:	d17b      	bne.n	8008354 <_dtoa_r+0x43c>
 800825c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008260:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008264:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800826a:	2900      	cmp	r1, #0
 800826c:	f000 80a2 	beq.w	80083b4 <_dtoa_r+0x49c>
 8008270:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008274:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008278:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008280:	f140 8098 	bpl.w	80083b4 <_dtoa_r+0x49c>
 8008284:	f1b9 0f00 	cmp.w	r9, #0
 8008288:	f000 8094 	beq.w	80083b4 <_dtoa_r+0x49c>
 800828c:	f1ba 0f00 	cmp.w	sl, #0
 8008290:	dd2f      	ble.n	80082f2 <_dtoa_r+0x3da>
 8008292:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008296:	ee27 7b06 	vmul.f64	d7, d7, d6
 800829a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800829e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80082a2:	3201      	adds	r2, #1
 80082a4:	4650      	mov	r0, sl
 80082a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80082ae:	ee07 2a90 	vmov	s15, r2
 80082b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80082ba:	ee15 4a90 	vmov	r4, s11
 80082be:	ec52 1b15 	vmov	r1, r2, d5
 80082c2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d177      	bne.n	80083ba <_dtoa_r+0x4a2>
 80082ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80082ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082d2:	ec42 1b17 	vmov	d7, r1, r2
 80082d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082de:	f300 8263 	bgt.w	80087a8 <_dtoa_r+0x890>
 80082e2:	eeb1 7b47 	vneg.f64	d7, d7
 80082e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	f100 8258 	bmi.w	80087a2 <_dtoa_r+0x88a>
 80082f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	f2c0 811d 	blt.w	8008538 <_dtoa_r+0x620>
 80082fe:	f1bb 0f0e 	cmp.w	fp, #14
 8008302:	f300 8119 	bgt.w	8008538 <_dtoa_r+0x620>
 8008306:	4b8a      	ldr	r3, [pc, #552]	; (8008530 <_dtoa_r+0x618>)
 8008308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800830c:	ed93 6b00 	vldr	d6, [r3]
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f280 80b7 	bge.w	8008486 <_dtoa_r+0x56e>
 8008318:	f1b9 0f00 	cmp.w	r9, #0
 800831c:	f300 80b3 	bgt.w	8008486 <_dtoa_r+0x56e>
 8008320:	f040 823f 	bne.w	80087a2 <_dtoa_r+0x88a>
 8008324:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008328:	ee26 6b07 	vmul.f64	d6, d6, d7
 800832c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008338:	464c      	mov	r4, r9
 800833a:	464f      	mov	r7, r9
 800833c:	f280 8215 	bge.w	800876a <_dtoa_r+0x852>
 8008340:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008344:	2331      	movs	r3, #49	; 0x31
 8008346:	f808 3b01 	strb.w	r3, [r8], #1
 800834a:	f10b 0b01 	add.w	fp, fp, #1
 800834e:	e211      	b.n	8008774 <_dtoa_r+0x85c>
 8008350:	2202      	movs	r2, #2
 8008352:	e780      	b.n	8008256 <_dtoa_r+0x33e>
 8008354:	07cc      	lsls	r4, r1, #31
 8008356:	d504      	bpl.n	8008362 <_dtoa_r+0x44a>
 8008358:	ed90 6b00 	vldr	d6, [r0]
 800835c:	3201      	adds	r2, #1
 800835e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008362:	1049      	asrs	r1, r1, #1
 8008364:	3008      	adds	r0, #8
 8008366:	e777      	b.n	8008258 <_dtoa_r+0x340>
 8008368:	d022      	beq.n	80083b0 <_dtoa_r+0x498>
 800836a:	f1cb 0100 	rsb	r1, fp, #0
 800836e:	4a70      	ldr	r2, [pc, #448]	; (8008530 <_dtoa_r+0x618>)
 8008370:	f001 000f 	and.w	r0, r1, #15
 8008374:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008378:	ed92 7b00 	vldr	d7, [r2]
 800837c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008384:	486b      	ldr	r0, [pc, #428]	; (8008534 <_dtoa_r+0x61c>)
 8008386:	1109      	asrs	r1, r1, #4
 8008388:	2400      	movs	r4, #0
 800838a:	2202      	movs	r2, #2
 800838c:	b929      	cbnz	r1, 800839a <_dtoa_r+0x482>
 800838e:	2c00      	cmp	r4, #0
 8008390:	f43f af6a 	beq.w	8008268 <_dtoa_r+0x350>
 8008394:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008398:	e766      	b.n	8008268 <_dtoa_r+0x350>
 800839a:	07cf      	lsls	r7, r1, #31
 800839c:	d505      	bpl.n	80083aa <_dtoa_r+0x492>
 800839e:	ed90 6b00 	vldr	d6, [r0]
 80083a2:	3201      	adds	r2, #1
 80083a4:	2401      	movs	r4, #1
 80083a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083aa:	1049      	asrs	r1, r1, #1
 80083ac:	3008      	adds	r0, #8
 80083ae:	e7ed      	b.n	800838c <_dtoa_r+0x474>
 80083b0:	2202      	movs	r2, #2
 80083b2:	e759      	b.n	8008268 <_dtoa_r+0x350>
 80083b4:	465f      	mov	r7, fp
 80083b6:	4648      	mov	r0, r9
 80083b8:	e775      	b.n	80082a6 <_dtoa_r+0x38e>
 80083ba:	ec42 1b17 	vmov	d7, r1, r2
 80083be:	4a5c      	ldr	r2, [pc, #368]	; (8008530 <_dtoa_r+0x618>)
 80083c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80083c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80083c8:	9a01      	ldr	r2, [sp, #4]
 80083ca:	1814      	adds	r4, r2, r0
 80083cc:	9a07      	ldr	r2, [sp, #28]
 80083ce:	b352      	cbz	r2, 8008426 <_dtoa_r+0x50e>
 80083d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80083d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80083d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80083e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80083e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80083ec:	ee14 2a90 	vmov	r2, s9
 80083f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80083f4:	3230      	adds	r2, #48	; 0x30
 80083f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80083fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008402:	f808 2b01 	strb.w	r2, [r8], #1
 8008406:	d439      	bmi.n	800847c <_dtoa_r+0x564>
 8008408:	ee32 5b46 	vsub.f64	d5, d2, d6
 800840c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	d472      	bmi.n	80084fc <_dtoa_r+0x5e4>
 8008416:	45a0      	cmp	r8, r4
 8008418:	f43f af6b 	beq.w	80082f2 <_dtoa_r+0x3da>
 800841c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008420:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008424:	e7e0      	b.n	80083e8 <_dtoa_r+0x4d0>
 8008426:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800842a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800842e:	4621      	mov	r1, r4
 8008430:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008434:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008438:	ee14 2a90 	vmov	r2, s9
 800843c:	3230      	adds	r2, #48	; 0x30
 800843e:	f808 2b01 	strb.w	r2, [r8], #1
 8008442:	45a0      	cmp	r8, r4
 8008444:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008448:	ee36 6b45 	vsub.f64	d6, d6, d5
 800844c:	d118      	bne.n	8008480 <_dtoa_r+0x568>
 800844e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008452:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008456:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800845a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845e:	dc4d      	bgt.n	80084fc <_dtoa_r+0x5e4>
 8008460:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	f57f af41 	bpl.w	80082f2 <_dtoa_r+0x3da>
 8008470:	4688      	mov	r8, r1
 8008472:	3901      	subs	r1, #1
 8008474:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008478:	2b30      	cmp	r3, #48	; 0x30
 800847a:	d0f9      	beq.n	8008470 <_dtoa_r+0x558>
 800847c:	46bb      	mov	fp, r7
 800847e:	e02a      	b.n	80084d6 <_dtoa_r+0x5be>
 8008480:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008484:	e7d6      	b.n	8008434 <_dtoa_r+0x51c>
 8008486:	ed9d 7b02 	vldr	d7, [sp, #8]
 800848a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800848e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008492:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008496:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800849a:	ee15 3a10 	vmov	r3, s10
 800849e:	3330      	adds	r3, #48	; 0x30
 80084a0:	f808 3b01 	strb.w	r3, [r8], #1
 80084a4:	9b01      	ldr	r3, [sp, #4]
 80084a6:	eba8 0303 	sub.w	r3, r8, r3
 80084aa:	4599      	cmp	r9, r3
 80084ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80084b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80084b4:	d133      	bne.n	800851e <_dtoa_r+0x606>
 80084b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80084ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c2:	dc1a      	bgt.n	80084fa <_dtoa_r+0x5e2>
 80084c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	d103      	bne.n	80084d6 <_dtoa_r+0x5be>
 80084ce:	ee15 3a10 	vmov	r3, s10
 80084d2:	07d9      	lsls	r1, r3, #31
 80084d4:	d411      	bmi.n	80084fa <_dtoa_r+0x5e2>
 80084d6:	4629      	mov	r1, r5
 80084d8:	4630      	mov	r0, r6
 80084da:	f000 fbdf 	bl	8008c9c <_Bfree>
 80084de:	2300      	movs	r3, #0
 80084e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084e2:	f888 3000 	strb.w	r3, [r8]
 80084e6:	f10b 0301 	add.w	r3, fp, #1
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f43f ad61 	beq.w	8007fb6 <_dtoa_r+0x9e>
 80084f4:	f8c3 8000 	str.w	r8, [r3]
 80084f8:	e55d      	b.n	8007fb6 <_dtoa_r+0x9e>
 80084fa:	465f      	mov	r7, fp
 80084fc:	4643      	mov	r3, r8
 80084fe:	4698      	mov	r8, r3
 8008500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008504:	2a39      	cmp	r2, #57	; 0x39
 8008506:	d106      	bne.n	8008516 <_dtoa_r+0x5fe>
 8008508:	9a01      	ldr	r2, [sp, #4]
 800850a:	429a      	cmp	r2, r3
 800850c:	d1f7      	bne.n	80084fe <_dtoa_r+0x5e6>
 800850e:	9901      	ldr	r1, [sp, #4]
 8008510:	2230      	movs	r2, #48	; 0x30
 8008512:	3701      	adds	r7, #1
 8008514:	700a      	strb	r2, [r1, #0]
 8008516:	781a      	ldrb	r2, [r3, #0]
 8008518:	3201      	adds	r2, #1
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	e7ae      	b.n	800847c <_dtoa_r+0x564>
 800851e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008522:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852a:	d1b2      	bne.n	8008492 <_dtoa_r+0x57a>
 800852c:	e7d3      	b.n	80084d6 <_dtoa_r+0x5be>
 800852e:	bf00      	nop
 8008530:	0800a078 	.word	0x0800a078
 8008534:	0800a050 	.word	0x0800a050
 8008538:	9907      	ldr	r1, [sp, #28]
 800853a:	2900      	cmp	r1, #0
 800853c:	f000 80d0 	beq.w	80086e0 <_dtoa_r+0x7c8>
 8008540:	9906      	ldr	r1, [sp, #24]
 8008542:	2901      	cmp	r1, #1
 8008544:	f300 80b4 	bgt.w	80086b0 <_dtoa_r+0x798>
 8008548:	990a      	ldr	r1, [sp, #40]	; 0x28
 800854a:	2900      	cmp	r1, #0
 800854c:	f000 80ac 	beq.w	80086a8 <_dtoa_r+0x790>
 8008550:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008558:	461c      	mov	r4, r3
 800855a:	930a      	str	r3, [sp, #40]	; 0x28
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	4413      	add	r3, r2
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	9b05      	ldr	r3, [sp, #20]
 8008564:	2101      	movs	r1, #1
 8008566:	4413      	add	r3, r2
 8008568:	4630      	mov	r0, r6
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	f000 fc4e 	bl	8008e0c <__i2b>
 8008570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008572:	4607      	mov	r7, r0
 8008574:	f1b8 0f00 	cmp.w	r8, #0
 8008578:	dd0d      	ble.n	8008596 <_dtoa_r+0x67e>
 800857a:	9a05      	ldr	r2, [sp, #20]
 800857c:	2a00      	cmp	r2, #0
 800857e:	dd0a      	ble.n	8008596 <_dtoa_r+0x67e>
 8008580:	4542      	cmp	r2, r8
 8008582:	9904      	ldr	r1, [sp, #16]
 8008584:	bfa8      	it	ge
 8008586:	4642      	movge	r2, r8
 8008588:	1a89      	subs	r1, r1, r2
 800858a:	9104      	str	r1, [sp, #16]
 800858c:	9905      	ldr	r1, [sp, #20]
 800858e:	eba8 0802 	sub.w	r8, r8, r2
 8008592:	1a8a      	subs	r2, r1, r2
 8008594:	9205      	str	r2, [sp, #20]
 8008596:	b303      	cbz	r3, 80085da <_dtoa_r+0x6c2>
 8008598:	9a07      	ldr	r2, [sp, #28]
 800859a:	2a00      	cmp	r2, #0
 800859c:	f000 80a5 	beq.w	80086ea <_dtoa_r+0x7d2>
 80085a0:	2c00      	cmp	r4, #0
 80085a2:	dd13      	ble.n	80085cc <_dtoa_r+0x6b4>
 80085a4:	4639      	mov	r1, r7
 80085a6:	4622      	mov	r2, r4
 80085a8:	4630      	mov	r0, r6
 80085aa:	930d      	str	r3, [sp, #52]	; 0x34
 80085ac:	f000 fcee 	bl	8008f8c <__pow5mult>
 80085b0:	462a      	mov	r2, r5
 80085b2:	4601      	mov	r1, r0
 80085b4:	4607      	mov	r7, r0
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 fc3e 	bl	8008e38 <__multiply>
 80085bc:	4629      	mov	r1, r5
 80085be:	900a      	str	r0, [sp, #40]	; 0x28
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 fb6b 	bl	8008c9c <_Bfree>
 80085c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ca:	4615      	mov	r5, r2
 80085cc:	1b1a      	subs	r2, r3, r4
 80085ce:	d004      	beq.n	80085da <_dtoa_r+0x6c2>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 fcda 	bl	8008f8c <__pow5mult>
 80085d8:	4605      	mov	r5, r0
 80085da:	2101      	movs	r1, #1
 80085dc:	4630      	mov	r0, r6
 80085de:	f000 fc15 	bl	8008e0c <__i2b>
 80085e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	4604      	mov	r4, r0
 80085e8:	f340 8081 	ble.w	80086ee <_dtoa_r+0x7d6>
 80085ec:	461a      	mov	r2, r3
 80085ee:	4601      	mov	r1, r0
 80085f0:	4630      	mov	r0, r6
 80085f2:	f000 fccb 	bl	8008f8c <__pow5mult>
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	4604      	mov	r4, r0
 80085fc:	dd7a      	ble.n	80086f4 <_dtoa_r+0x7dc>
 80085fe:	2300      	movs	r3, #0
 8008600:	930a      	str	r3, [sp, #40]	; 0x28
 8008602:	6922      	ldr	r2, [r4, #16]
 8008604:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008608:	6910      	ldr	r0, [r2, #16]
 800860a:	f000 fbaf 	bl	8008d6c <__hi0bits>
 800860e:	f1c0 0020 	rsb	r0, r0, #32
 8008612:	9b05      	ldr	r3, [sp, #20]
 8008614:	4418      	add	r0, r3
 8008616:	f010 001f 	ands.w	r0, r0, #31
 800861a:	f000 808c 	beq.w	8008736 <_dtoa_r+0x81e>
 800861e:	f1c0 0220 	rsb	r2, r0, #32
 8008622:	2a04      	cmp	r2, #4
 8008624:	f340 8085 	ble.w	8008732 <_dtoa_r+0x81a>
 8008628:	f1c0 001c 	rsb	r0, r0, #28
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	4403      	add	r3, r0
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	4403      	add	r3, r0
 8008636:	4480      	add	r8, r0
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	dd05      	ble.n	800864c <_dtoa_r+0x734>
 8008640:	4629      	mov	r1, r5
 8008642:	461a      	mov	r2, r3
 8008644:	4630      	mov	r0, r6
 8008646:	f000 fcfb 	bl	8009040 <__lshift>
 800864a:	4605      	mov	r5, r0
 800864c:	9b05      	ldr	r3, [sp, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd05      	ble.n	800865e <_dtoa_r+0x746>
 8008652:	4621      	mov	r1, r4
 8008654:	461a      	mov	r2, r3
 8008656:	4630      	mov	r0, r6
 8008658:	f000 fcf2 	bl	8009040 <__lshift>
 800865c:	4604      	mov	r4, r0
 800865e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d06a      	beq.n	800873a <_dtoa_r+0x822>
 8008664:	4621      	mov	r1, r4
 8008666:	4628      	mov	r0, r5
 8008668:	f000 fd5a 	bl	8009120 <__mcmp>
 800866c:	2800      	cmp	r0, #0
 800866e:	da64      	bge.n	800873a <_dtoa_r+0x822>
 8008670:	2300      	movs	r3, #0
 8008672:	4629      	mov	r1, r5
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f000 fb32 	bl	8008ce0 <__multadd>
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008682:	4605      	mov	r5, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 8191 	beq.w	80089ac <_dtoa_r+0xa94>
 800868a:	4639      	mov	r1, r7
 800868c:	2300      	movs	r3, #0
 800868e:	220a      	movs	r2, #10
 8008690:	4630      	mov	r0, r6
 8008692:	f000 fb25 	bl	8008ce0 <__multadd>
 8008696:	f1ba 0f00 	cmp.w	sl, #0
 800869a:	4607      	mov	r7, r0
 800869c:	f300 808d 	bgt.w	80087ba <_dtoa_r+0x8a2>
 80086a0:	9b06      	ldr	r3, [sp, #24]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	dc50      	bgt.n	8008748 <_dtoa_r+0x830>
 80086a6:	e088      	b.n	80087ba <_dtoa_r+0x8a2>
 80086a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086ae:	e751      	b.n	8008554 <_dtoa_r+0x63c>
 80086b0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	bfbf      	itttt	lt
 80086b8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80086ba:	1ae3      	sublt	r3, r4, r3
 80086bc:	18d2      	addlt	r2, r2, r3
 80086be:	9209      	strlt	r2, [sp, #36]	; 0x24
 80086c0:	bfb6      	itet	lt
 80086c2:	4623      	movlt	r3, r4
 80086c4:	1b1c      	subge	r4, r3, r4
 80086c6:	2400      	movlt	r4, #0
 80086c8:	f1b9 0f00 	cmp.w	r9, #0
 80086cc:	bfb5      	itete	lt
 80086ce:	9a04      	ldrlt	r2, [sp, #16]
 80086d0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80086d4:	eba2 0809 	sublt.w	r8, r2, r9
 80086d8:	464a      	movge	r2, r9
 80086da:	bfb8      	it	lt
 80086dc:	2200      	movlt	r2, #0
 80086de:	e73c      	b.n	800855a <_dtoa_r+0x642>
 80086e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80086e4:	9f07      	ldr	r7, [sp, #28]
 80086e6:	461c      	mov	r4, r3
 80086e8:	e744      	b.n	8008574 <_dtoa_r+0x65c>
 80086ea:	461a      	mov	r2, r3
 80086ec:	e770      	b.n	80085d0 <_dtoa_r+0x6b8>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	dc18      	bgt.n	8008726 <_dtoa_r+0x80e>
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	b9b3      	cbnz	r3, 8008726 <_dtoa_r+0x80e>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80086fe:	b9a2      	cbnz	r2, 800872a <_dtoa_r+0x812>
 8008700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008704:	0d12      	lsrs	r2, r2, #20
 8008706:	0512      	lsls	r2, r2, #20
 8008708:	b18a      	cbz	r2, 800872e <_dtoa_r+0x816>
 800870a:	9b04      	ldr	r3, [sp, #16]
 800870c:	3301      	adds	r3, #1
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	3301      	adds	r3, #1
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	2301      	movs	r3, #1
 8008718:	930a      	str	r3, [sp, #40]	; 0x28
 800871a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	f47f af70 	bne.w	8008602 <_dtoa_r+0x6ea>
 8008722:	2001      	movs	r0, #1
 8008724:	e775      	b.n	8008612 <_dtoa_r+0x6fa>
 8008726:	2300      	movs	r3, #0
 8008728:	e7f6      	b.n	8008718 <_dtoa_r+0x800>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	e7f4      	b.n	8008718 <_dtoa_r+0x800>
 800872e:	920a      	str	r2, [sp, #40]	; 0x28
 8008730:	e7f3      	b.n	800871a <_dtoa_r+0x802>
 8008732:	d082      	beq.n	800863a <_dtoa_r+0x722>
 8008734:	4610      	mov	r0, r2
 8008736:	301c      	adds	r0, #28
 8008738:	e778      	b.n	800862c <_dtoa_r+0x714>
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	dc37      	bgt.n	80087b0 <_dtoa_r+0x898>
 8008740:	9b06      	ldr	r3, [sp, #24]
 8008742:	2b02      	cmp	r3, #2
 8008744:	dd34      	ble.n	80087b0 <_dtoa_r+0x898>
 8008746:	46ca      	mov	sl, r9
 8008748:	f1ba 0f00 	cmp.w	sl, #0
 800874c:	d10d      	bne.n	800876a <_dtoa_r+0x852>
 800874e:	4621      	mov	r1, r4
 8008750:	4653      	mov	r3, sl
 8008752:	2205      	movs	r2, #5
 8008754:	4630      	mov	r0, r6
 8008756:	f000 fac3 	bl	8008ce0 <__multadd>
 800875a:	4601      	mov	r1, r0
 800875c:	4604      	mov	r4, r0
 800875e:	4628      	mov	r0, r5
 8008760:	f000 fcde 	bl	8009120 <__mcmp>
 8008764:	2800      	cmp	r0, #0
 8008766:	f73f adeb 	bgt.w	8008340 <_dtoa_r+0x428>
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008770:	ea6f 0b03 	mvn.w	fp, r3
 8008774:	f04f 0900 	mov.w	r9, #0
 8008778:	4621      	mov	r1, r4
 800877a:	4630      	mov	r0, r6
 800877c:	f000 fa8e 	bl	8008c9c <_Bfree>
 8008780:	2f00      	cmp	r7, #0
 8008782:	f43f aea8 	beq.w	80084d6 <_dtoa_r+0x5be>
 8008786:	f1b9 0f00 	cmp.w	r9, #0
 800878a:	d005      	beq.n	8008798 <_dtoa_r+0x880>
 800878c:	45b9      	cmp	r9, r7
 800878e:	d003      	beq.n	8008798 <_dtoa_r+0x880>
 8008790:	4649      	mov	r1, r9
 8008792:	4630      	mov	r0, r6
 8008794:	f000 fa82 	bl	8008c9c <_Bfree>
 8008798:	4639      	mov	r1, r7
 800879a:	4630      	mov	r0, r6
 800879c:	f000 fa7e 	bl	8008c9c <_Bfree>
 80087a0:	e699      	b.n	80084d6 <_dtoa_r+0x5be>
 80087a2:	2400      	movs	r4, #0
 80087a4:	4627      	mov	r7, r4
 80087a6:	e7e0      	b.n	800876a <_dtoa_r+0x852>
 80087a8:	46bb      	mov	fp, r7
 80087aa:	4604      	mov	r4, r0
 80087ac:	4607      	mov	r7, r0
 80087ae:	e5c7      	b.n	8008340 <_dtoa_r+0x428>
 80087b0:	9b07      	ldr	r3, [sp, #28]
 80087b2:	46ca      	mov	sl, r9
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8100 	beq.w	80089ba <_dtoa_r+0xaa2>
 80087ba:	f1b8 0f00 	cmp.w	r8, #0
 80087be:	dd05      	ble.n	80087cc <_dtoa_r+0x8b4>
 80087c0:	4639      	mov	r1, r7
 80087c2:	4642      	mov	r2, r8
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 fc3b 	bl	8009040 <__lshift>
 80087ca:	4607      	mov	r7, r0
 80087cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d05d      	beq.n	800888e <_dtoa_r+0x976>
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 fa21 	bl	8008c1c <_Balloc>
 80087da:	4680      	mov	r8, r0
 80087dc:	b928      	cbnz	r0, 80087ea <_dtoa_r+0x8d2>
 80087de:	4b82      	ldr	r3, [pc, #520]	; (80089e8 <_dtoa_r+0xad0>)
 80087e0:	4602      	mov	r2, r0
 80087e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087e6:	f7ff bbaf 	b.w	8007f48 <_dtoa_r+0x30>
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	3202      	adds	r2, #2
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	f107 010c 	add.w	r1, r7, #12
 80087f4:	300c      	adds	r0, #12
 80087f6:	f000 fa03 	bl	8008c00 <memcpy>
 80087fa:	2201      	movs	r2, #1
 80087fc:	4641      	mov	r1, r8
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 fc1e 	bl	8009040 <__lshift>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	4453      	add	r3, sl
 800880e:	9308      	str	r3, [sp, #32]
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	46b9      	mov	r9, r7
 8008818:	9307      	str	r3, [sp, #28]
 800881a:	4607      	mov	r7, r0
 800881c:	9b04      	ldr	r3, [sp, #16]
 800881e:	4621      	mov	r1, r4
 8008820:	3b01      	subs	r3, #1
 8008822:	4628      	mov	r0, r5
 8008824:	9302      	str	r3, [sp, #8]
 8008826:	f7ff fae9 	bl	8007dfc <quorem>
 800882a:	4603      	mov	r3, r0
 800882c:	3330      	adds	r3, #48	; 0x30
 800882e:	9005      	str	r0, [sp, #20]
 8008830:	4649      	mov	r1, r9
 8008832:	4628      	mov	r0, r5
 8008834:	9309      	str	r3, [sp, #36]	; 0x24
 8008836:	f000 fc73 	bl	8009120 <__mcmp>
 800883a:	463a      	mov	r2, r7
 800883c:	4682      	mov	sl, r0
 800883e:	4621      	mov	r1, r4
 8008840:	4630      	mov	r0, r6
 8008842:	f000 fc89 	bl	8009158 <__mdiff>
 8008846:	68c2      	ldr	r2, [r0, #12]
 8008848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884a:	4680      	mov	r8, r0
 800884c:	bb0a      	cbnz	r2, 8008892 <_dtoa_r+0x97a>
 800884e:	4601      	mov	r1, r0
 8008850:	4628      	mov	r0, r5
 8008852:	f000 fc65 	bl	8009120 <__mcmp>
 8008856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008858:	4602      	mov	r2, r0
 800885a:	4641      	mov	r1, r8
 800885c:	4630      	mov	r0, r6
 800885e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008862:	f000 fa1b 	bl	8008c9c <_Bfree>
 8008866:	9b06      	ldr	r3, [sp, #24]
 8008868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800886e:	ea43 0102 	orr.w	r1, r3, r2
 8008872:	9b07      	ldr	r3, [sp, #28]
 8008874:	430b      	orrs	r3, r1
 8008876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008878:	d10d      	bne.n	8008896 <_dtoa_r+0x97e>
 800887a:	2b39      	cmp	r3, #57	; 0x39
 800887c:	d029      	beq.n	80088d2 <_dtoa_r+0x9ba>
 800887e:	f1ba 0f00 	cmp.w	sl, #0
 8008882:	dd01      	ble.n	8008888 <_dtoa_r+0x970>
 8008884:	9b05      	ldr	r3, [sp, #20]
 8008886:	3331      	adds	r3, #49	; 0x31
 8008888:	9a02      	ldr	r2, [sp, #8]
 800888a:	7013      	strb	r3, [r2, #0]
 800888c:	e774      	b.n	8008778 <_dtoa_r+0x860>
 800888e:	4638      	mov	r0, r7
 8008890:	e7b8      	b.n	8008804 <_dtoa_r+0x8ec>
 8008892:	2201      	movs	r2, #1
 8008894:	e7e1      	b.n	800885a <_dtoa_r+0x942>
 8008896:	f1ba 0f00 	cmp.w	sl, #0
 800889a:	db06      	blt.n	80088aa <_dtoa_r+0x992>
 800889c:	9906      	ldr	r1, [sp, #24]
 800889e:	ea41 0a0a 	orr.w	sl, r1, sl
 80088a2:	9907      	ldr	r1, [sp, #28]
 80088a4:	ea5a 0101 	orrs.w	r1, sl, r1
 80088a8:	d120      	bne.n	80088ec <_dtoa_r+0x9d4>
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	ddec      	ble.n	8008888 <_dtoa_r+0x970>
 80088ae:	4629      	mov	r1, r5
 80088b0:	2201      	movs	r2, #1
 80088b2:	4630      	mov	r0, r6
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	f000 fbc3 	bl	8009040 <__lshift>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4605      	mov	r5, r0
 80088be:	f000 fc2f 	bl	8009120 <__mcmp>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	9b04      	ldr	r3, [sp, #16]
 80088c6:	dc02      	bgt.n	80088ce <_dtoa_r+0x9b6>
 80088c8:	d1de      	bne.n	8008888 <_dtoa_r+0x970>
 80088ca:	07da      	lsls	r2, r3, #31
 80088cc:	d5dc      	bpl.n	8008888 <_dtoa_r+0x970>
 80088ce:	2b39      	cmp	r3, #57	; 0x39
 80088d0:	d1d8      	bne.n	8008884 <_dtoa_r+0x96c>
 80088d2:	9a02      	ldr	r2, [sp, #8]
 80088d4:	2339      	movs	r3, #57	; 0x39
 80088d6:	7013      	strb	r3, [r2, #0]
 80088d8:	4643      	mov	r3, r8
 80088da:	4698      	mov	r8, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80088e2:	2a39      	cmp	r2, #57	; 0x39
 80088e4:	d051      	beq.n	800898a <_dtoa_r+0xa72>
 80088e6:	3201      	adds	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
 80088ea:	e745      	b.n	8008778 <_dtoa_r+0x860>
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	dd03      	ble.n	80088f8 <_dtoa_r+0x9e0>
 80088f0:	2b39      	cmp	r3, #57	; 0x39
 80088f2:	d0ee      	beq.n	80088d2 <_dtoa_r+0x9ba>
 80088f4:	3301      	adds	r3, #1
 80088f6:	e7c7      	b.n	8008888 <_dtoa_r+0x970>
 80088f8:	9a04      	ldr	r2, [sp, #16]
 80088fa:	9908      	ldr	r1, [sp, #32]
 80088fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008900:	428a      	cmp	r2, r1
 8008902:	d02b      	beq.n	800895c <_dtoa_r+0xa44>
 8008904:	4629      	mov	r1, r5
 8008906:	2300      	movs	r3, #0
 8008908:	220a      	movs	r2, #10
 800890a:	4630      	mov	r0, r6
 800890c:	f000 f9e8 	bl	8008ce0 <__multadd>
 8008910:	45b9      	cmp	r9, r7
 8008912:	4605      	mov	r5, r0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	f04f 020a 	mov.w	r2, #10
 800891c:	4649      	mov	r1, r9
 800891e:	4630      	mov	r0, r6
 8008920:	d107      	bne.n	8008932 <_dtoa_r+0xa1a>
 8008922:	f000 f9dd 	bl	8008ce0 <__multadd>
 8008926:	4681      	mov	r9, r0
 8008928:	4607      	mov	r7, r0
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	3301      	adds	r3, #1
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	e774      	b.n	800881c <_dtoa_r+0x904>
 8008932:	f000 f9d5 	bl	8008ce0 <__multadd>
 8008936:	4639      	mov	r1, r7
 8008938:	4681      	mov	r9, r0
 800893a:	2300      	movs	r3, #0
 800893c:	220a      	movs	r2, #10
 800893e:	4630      	mov	r0, r6
 8008940:	f000 f9ce 	bl	8008ce0 <__multadd>
 8008944:	4607      	mov	r7, r0
 8008946:	e7f0      	b.n	800892a <_dtoa_r+0xa12>
 8008948:	f1ba 0f00 	cmp.w	sl, #0
 800894c:	9a01      	ldr	r2, [sp, #4]
 800894e:	bfcc      	ite	gt
 8008950:	46d0      	movgt	r8, sl
 8008952:	f04f 0801 	movle.w	r8, #1
 8008956:	4490      	add	r8, r2
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	4629      	mov	r1, r5
 800895e:	2201      	movs	r2, #1
 8008960:	4630      	mov	r0, r6
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	f000 fb6c 	bl	8009040 <__lshift>
 8008968:	4621      	mov	r1, r4
 800896a:	4605      	mov	r5, r0
 800896c:	f000 fbd8 	bl	8009120 <__mcmp>
 8008970:	2800      	cmp	r0, #0
 8008972:	dcb1      	bgt.n	80088d8 <_dtoa_r+0x9c0>
 8008974:	d102      	bne.n	800897c <_dtoa_r+0xa64>
 8008976:	9b02      	ldr	r3, [sp, #8]
 8008978:	07db      	lsls	r3, r3, #31
 800897a:	d4ad      	bmi.n	80088d8 <_dtoa_r+0x9c0>
 800897c:	4643      	mov	r3, r8
 800897e:	4698      	mov	r8, r3
 8008980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008984:	2a30      	cmp	r2, #48	; 0x30
 8008986:	d0fa      	beq.n	800897e <_dtoa_r+0xa66>
 8008988:	e6f6      	b.n	8008778 <_dtoa_r+0x860>
 800898a:	9a01      	ldr	r2, [sp, #4]
 800898c:	429a      	cmp	r2, r3
 800898e:	d1a4      	bne.n	80088da <_dtoa_r+0x9c2>
 8008990:	f10b 0b01 	add.w	fp, fp, #1
 8008994:	2331      	movs	r3, #49	; 0x31
 8008996:	e778      	b.n	800888a <_dtoa_r+0x972>
 8008998:	4b14      	ldr	r3, [pc, #80]	; (80089ec <_dtoa_r+0xad4>)
 800899a:	f7ff bb27 	b.w	8007fec <_dtoa_r+0xd4>
 800899e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f ab03 	bne.w	8007fac <_dtoa_r+0x94>
 80089a6:	4b12      	ldr	r3, [pc, #72]	; (80089f0 <_dtoa_r+0xad8>)
 80089a8:	f7ff bb20 	b.w	8007fec <_dtoa_r+0xd4>
 80089ac:	f1ba 0f00 	cmp.w	sl, #0
 80089b0:	dc03      	bgt.n	80089ba <_dtoa_r+0xaa2>
 80089b2:	9b06      	ldr	r3, [sp, #24]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	f73f aec7 	bgt.w	8008748 <_dtoa_r+0x830>
 80089ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089be:	4621      	mov	r1, r4
 80089c0:	4628      	mov	r0, r5
 80089c2:	f7ff fa1b 	bl	8007dfc <quorem>
 80089c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089ca:	f808 3b01 	strb.w	r3, [r8], #1
 80089ce:	9a01      	ldr	r2, [sp, #4]
 80089d0:	eba8 0202 	sub.w	r2, r8, r2
 80089d4:	4592      	cmp	sl, r2
 80089d6:	ddb7      	ble.n	8008948 <_dtoa_r+0xa30>
 80089d8:	4629      	mov	r1, r5
 80089da:	2300      	movs	r3, #0
 80089dc:	220a      	movs	r2, #10
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 f97e 	bl	8008ce0 <__multadd>
 80089e4:	4605      	mov	r5, r0
 80089e6:	e7ea      	b.n	80089be <_dtoa_r+0xaa6>
 80089e8:	08009f7f 	.word	0x08009f7f
 80089ec:	08009edc 	.word	0x08009edc
 80089f0:	08009f00 	.word	0x08009f00

080089f4 <std>:
 80089f4:	2300      	movs	r3, #0
 80089f6:	b510      	push	{r4, lr}
 80089f8:	4604      	mov	r4, r0
 80089fa:	e9c0 3300 	strd	r3, r3, [r0]
 80089fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a02:	6083      	str	r3, [r0, #8]
 8008a04:	8181      	strh	r1, [r0, #12]
 8008a06:	6643      	str	r3, [r0, #100]	; 0x64
 8008a08:	81c2      	strh	r2, [r0, #14]
 8008a0a:	6183      	str	r3, [r0, #24]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	2208      	movs	r2, #8
 8008a10:	305c      	adds	r0, #92	; 0x5c
 8008a12:	f7fe fd91 	bl	8007538 <memset>
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <std+0x38>)
 8008a18:	6263      	str	r3, [r4, #36]	; 0x24
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <std+0x3c>)
 8008a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <std+0x40>)
 8008a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <std+0x44>)
 8008a24:	6224      	str	r4, [r4, #32]
 8008a26:	6323      	str	r3, [r4, #48]	; 0x30
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	080097e5 	.word	0x080097e5
 8008a30:	08009807 	.word	0x08009807
 8008a34:	0800983f 	.word	0x0800983f
 8008a38:	08009863 	.word	0x08009863

08008a3c <_cleanup_r>:
 8008a3c:	4901      	ldr	r1, [pc, #4]	; (8008a44 <_cleanup_r+0x8>)
 8008a3e:	f000 b8af 	b.w	8008ba0 <_fwalk_reent>
 8008a42:	bf00      	nop
 8008a44:	08009b79 	.word	0x08009b79

08008a48 <__sfmoreglue>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	2268      	movs	r2, #104	; 0x68
 8008a4c:	1e4d      	subs	r5, r1, #1
 8008a4e:	4355      	muls	r5, r2
 8008a50:	460e      	mov	r6, r1
 8008a52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a56:	f000 fce7 	bl	8009428 <_malloc_r>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	b140      	cbz	r0, 8008a70 <__sfmoreglue+0x28>
 8008a5e:	2100      	movs	r1, #0
 8008a60:	e9c0 1600 	strd	r1, r6, [r0]
 8008a64:	300c      	adds	r0, #12
 8008a66:	60a0      	str	r0, [r4, #8]
 8008a68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a6c:	f7fe fd64 	bl	8007538 <memset>
 8008a70:	4620      	mov	r0, r4
 8008a72:	bd70      	pop	{r4, r5, r6, pc}

08008a74 <__sfp_lock_acquire>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__sfp_lock_acquire+0x8>)
 8008a76:	f000 b8b8 	b.w	8008bea <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	240009b5 	.word	0x240009b5

08008a80 <__sfp_lock_release>:
 8008a80:	4801      	ldr	r0, [pc, #4]	; (8008a88 <__sfp_lock_release+0x8>)
 8008a82:	f000 b8b3 	b.w	8008bec <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	240009b5 	.word	0x240009b5

08008a8c <__sinit_lock_acquire>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__sinit_lock_acquire+0x8>)
 8008a8e:	f000 b8ac 	b.w	8008bea <__retarget_lock_acquire_recursive>
 8008a92:	bf00      	nop
 8008a94:	240009b6 	.word	0x240009b6

08008a98 <__sinit_lock_release>:
 8008a98:	4801      	ldr	r0, [pc, #4]	; (8008aa0 <__sinit_lock_release+0x8>)
 8008a9a:	f000 b8a7 	b.w	8008bec <__retarget_lock_release_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	240009b6 	.word	0x240009b6

08008aa4 <__sinit>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	f7ff fff0 	bl	8008a8c <__sinit_lock_acquire>
 8008aac:	69a3      	ldr	r3, [r4, #24]
 8008aae:	b11b      	cbz	r3, 8008ab8 <__sinit+0x14>
 8008ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab4:	f7ff bff0 	b.w	8008a98 <__sinit_lock_release>
 8008ab8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008abc:	6523      	str	r3, [r4, #80]	; 0x50
 8008abe:	4b13      	ldr	r3, [pc, #76]	; (8008b0c <__sinit+0x68>)
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <__sinit+0x6c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	bf04      	itt	eq
 8008aca:	2301      	moveq	r3, #1
 8008acc:	61a3      	streq	r3, [r4, #24]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 f820 	bl	8008b14 <__sfp>
 8008ad4:	6060      	str	r0, [r4, #4]
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 f81c 	bl	8008b14 <__sfp>
 8008adc:	60a0      	str	r0, [r4, #8]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 f818 	bl	8008b14 <__sfp>
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	60e0      	str	r0, [r4, #12]
 8008ae8:	2104      	movs	r1, #4
 8008aea:	6860      	ldr	r0, [r4, #4]
 8008aec:	f7ff ff82 	bl	80089f4 <std>
 8008af0:	68a0      	ldr	r0, [r4, #8]
 8008af2:	2201      	movs	r2, #1
 8008af4:	2109      	movs	r1, #9
 8008af6:	f7ff ff7d 	bl	80089f4 <std>
 8008afa:	68e0      	ldr	r0, [r4, #12]
 8008afc:	2202      	movs	r2, #2
 8008afe:	2112      	movs	r1, #18
 8008b00:	f7ff ff78 	bl	80089f4 <std>
 8008b04:	2301      	movs	r3, #1
 8008b06:	61a3      	str	r3, [r4, #24]
 8008b08:	e7d2      	b.n	8008ab0 <__sinit+0xc>
 8008b0a:	bf00      	nop
 8008b0c:	08009ec8 	.word	0x08009ec8
 8008b10:	08008a3d 	.word	0x08008a3d

08008b14 <__sfp>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	4607      	mov	r7, r0
 8008b18:	f7ff ffac 	bl	8008a74 <__sfp_lock_acquire>
 8008b1c:	4b1e      	ldr	r3, [pc, #120]	; (8008b98 <__sfp+0x84>)
 8008b1e:	681e      	ldr	r6, [r3, #0]
 8008b20:	69b3      	ldr	r3, [r6, #24]
 8008b22:	b913      	cbnz	r3, 8008b2a <__sfp+0x16>
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff ffbd 	bl	8008aa4 <__sinit>
 8008b2a:	3648      	adds	r6, #72	; 0x48
 8008b2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	d503      	bpl.n	8008b3c <__sfp+0x28>
 8008b34:	6833      	ldr	r3, [r6, #0]
 8008b36:	b30b      	cbz	r3, 8008b7c <__sfp+0x68>
 8008b38:	6836      	ldr	r6, [r6, #0]
 8008b3a:	e7f7      	b.n	8008b2c <__sfp+0x18>
 8008b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b40:	b9d5      	cbnz	r5, 8008b78 <__sfp+0x64>
 8008b42:	4b16      	ldr	r3, [pc, #88]	; (8008b9c <__sfp+0x88>)
 8008b44:	60e3      	str	r3, [r4, #12]
 8008b46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b4a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b4c:	f000 f84c 	bl	8008be8 <__retarget_lock_init_recursive>
 8008b50:	f7ff ff96 	bl	8008a80 <__sfp_lock_release>
 8008b54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b5c:	6025      	str	r5, [r4, #0]
 8008b5e:	61a5      	str	r5, [r4, #24]
 8008b60:	2208      	movs	r2, #8
 8008b62:	4629      	mov	r1, r5
 8008b64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b68:	f7fe fce6 	bl	8007538 <memset>
 8008b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b74:	4620      	mov	r0, r4
 8008b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b78:	3468      	adds	r4, #104	; 0x68
 8008b7a:	e7d9      	b.n	8008b30 <__sfp+0x1c>
 8008b7c:	2104      	movs	r1, #4
 8008b7e:	4638      	mov	r0, r7
 8008b80:	f7ff ff62 	bl	8008a48 <__sfmoreglue>
 8008b84:	4604      	mov	r4, r0
 8008b86:	6030      	str	r0, [r6, #0]
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d1d5      	bne.n	8008b38 <__sfp+0x24>
 8008b8c:	f7ff ff78 	bl	8008a80 <__sfp_lock_release>
 8008b90:	230c      	movs	r3, #12
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	e7ee      	b.n	8008b74 <__sfp+0x60>
 8008b96:	bf00      	nop
 8008b98:	08009ec8 	.word	0x08009ec8
 8008b9c:	ffff0001 	.word	0xffff0001

08008ba0 <_fwalk_reent>:
 8008ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	4688      	mov	r8, r1
 8008ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bac:	2700      	movs	r7, #0
 8008bae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bb2:	f1b9 0901 	subs.w	r9, r9, #1
 8008bb6:	d505      	bpl.n	8008bc4 <_fwalk_reent+0x24>
 8008bb8:	6824      	ldr	r4, [r4, #0]
 8008bba:	2c00      	cmp	r4, #0
 8008bbc:	d1f7      	bne.n	8008bae <_fwalk_reent+0xe>
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc4:	89ab      	ldrh	r3, [r5, #12]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d907      	bls.n	8008bda <_fwalk_reent+0x3a>
 8008bca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	d003      	beq.n	8008bda <_fwalk_reent+0x3a>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	47c0      	blx	r8
 8008bd8:	4307      	orrs	r7, r0
 8008bda:	3568      	adds	r5, #104	; 0x68
 8008bdc:	e7e9      	b.n	8008bb2 <_fwalk_reent+0x12>
	...

08008be0 <_localeconv_r>:
 8008be0:	4800      	ldr	r0, [pc, #0]	; (8008be4 <_localeconv_r+0x4>)
 8008be2:	4770      	bx	lr
 8008be4:	2400016c 	.word	0x2400016c

08008be8 <__retarget_lock_init_recursive>:
 8008be8:	4770      	bx	lr

08008bea <__retarget_lock_acquire_recursive>:
 8008bea:	4770      	bx	lr

08008bec <__retarget_lock_release_recursive>:
 8008bec:	4770      	bx	lr
	...

08008bf0 <malloc>:
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <malloc+0xc>)
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f000 bc17 	b.w	8009428 <_malloc_r>
 8008bfa:	bf00      	nop
 8008bfc:	24000018 	.word	0x24000018

08008c00 <memcpy>:
 8008c00:	440a      	add	r2, r1
 8008c02:	4291      	cmp	r1, r2
 8008c04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c08:	d100      	bne.n	8008c0c <memcpy+0xc>
 8008c0a:	4770      	bx	lr
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c16:	4291      	cmp	r1, r2
 8008c18:	d1f9      	bne.n	8008c0e <memcpy+0xe>
 8008c1a:	bd10      	pop	{r4, pc}

08008c1c <_Balloc>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c20:	4604      	mov	r4, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	b976      	cbnz	r6, 8008c44 <_Balloc+0x28>
 8008c26:	2010      	movs	r0, #16
 8008c28:	f7ff ffe2 	bl	8008bf0 <malloc>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008c30:	b920      	cbnz	r0, 8008c3c <_Balloc+0x20>
 8008c32:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <_Balloc+0x78>)
 8008c34:	4818      	ldr	r0, [pc, #96]	; (8008c98 <_Balloc+0x7c>)
 8008c36:	2166      	movs	r1, #102	; 0x66
 8008c38:	f000 feea 	bl	8009a10 <__assert_func>
 8008c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c40:	6006      	str	r6, [r0, #0]
 8008c42:	60c6      	str	r6, [r0, #12]
 8008c44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c46:	68f3      	ldr	r3, [r6, #12]
 8008c48:	b183      	cbz	r3, 8008c6c <_Balloc+0x50>
 8008c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c52:	b9b8      	cbnz	r0, 8008c84 <_Balloc+0x68>
 8008c54:	2101      	movs	r1, #1
 8008c56:	fa01 f605 	lsl.w	r6, r1, r5
 8008c5a:	1d72      	adds	r2, r6, #5
 8008c5c:	0092      	lsls	r2, r2, #2
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 fb60 	bl	8009324 <_calloc_r>
 8008c64:	b160      	cbz	r0, 8008c80 <_Balloc+0x64>
 8008c66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c6a:	e00e      	b.n	8008c8a <_Balloc+0x6e>
 8008c6c:	2221      	movs	r2, #33	; 0x21
 8008c6e:	2104      	movs	r1, #4
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fb57 	bl	8009324 <_calloc_r>
 8008c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c78:	60f0      	str	r0, [r6, #12]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e4      	bne.n	8008c4a <_Balloc+0x2e>
 8008c80:	2000      	movs	r0, #0
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	6802      	ldr	r2, [r0, #0]
 8008c86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c90:	e7f7      	b.n	8008c82 <_Balloc+0x66>
 8008c92:	bf00      	nop
 8008c94:	08009f0d 	.word	0x08009f0d
 8008c98:	08009ff0 	.word	0x08009ff0

08008c9c <_Bfree>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	b976      	cbnz	r6, 8008cc4 <_Bfree+0x28>
 8008ca6:	2010      	movs	r0, #16
 8008ca8:	f7ff ffa2 	bl	8008bf0 <malloc>
 8008cac:	4602      	mov	r2, r0
 8008cae:	6268      	str	r0, [r5, #36]	; 0x24
 8008cb0:	b920      	cbnz	r0, 8008cbc <_Bfree+0x20>
 8008cb2:	4b09      	ldr	r3, [pc, #36]	; (8008cd8 <_Bfree+0x3c>)
 8008cb4:	4809      	ldr	r0, [pc, #36]	; (8008cdc <_Bfree+0x40>)
 8008cb6:	218a      	movs	r1, #138	; 0x8a
 8008cb8:	f000 feaa 	bl	8009a10 <__assert_func>
 8008cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cc0:	6006      	str	r6, [r0, #0]
 8008cc2:	60c6      	str	r6, [r0, #12]
 8008cc4:	b13c      	cbz	r4, 8008cd6 <_Bfree+0x3a>
 8008cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cc8:	6862      	ldr	r2, [r4, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cd0:	6021      	str	r1, [r4, #0]
 8008cd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	08009f0d 	.word	0x08009f0d
 8008cdc:	08009ff0 	.word	0x08009ff0

08008ce0 <__multadd>:
 8008ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce4:	690d      	ldr	r5, [r1, #16]
 8008ce6:	4607      	mov	r7, r0
 8008ce8:	460c      	mov	r4, r1
 8008cea:	461e      	mov	r6, r3
 8008cec:	f101 0c14 	add.w	ip, r1, #20
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	f8dc 3000 	ldr.w	r3, [ip]
 8008cf6:	b299      	uxth	r1, r3
 8008cf8:	fb02 6101 	mla	r1, r2, r1, r6
 8008cfc:	0c1e      	lsrs	r6, r3, #16
 8008cfe:	0c0b      	lsrs	r3, r1, #16
 8008d00:	fb02 3306 	mla	r3, r2, r6, r3
 8008d04:	b289      	uxth	r1, r1
 8008d06:	3001      	adds	r0, #1
 8008d08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d0c:	4285      	cmp	r5, r0
 8008d0e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d16:	dcec      	bgt.n	8008cf2 <__multadd+0x12>
 8008d18:	b30e      	cbz	r6, 8008d5e <__multadd+0x7e>
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	dc19      	bgt.n	8008d54 <__multadd+0x74>
 8008d20:	6861      	ldr	r1, [r4, #4]
 8008d22:	4638      	mov	r0, r7
 8008d24:	3101      	adds	r1, #1
 8008d26:	f7ff ff79 	bl	8008c1c <_Balloc>
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	b928      	cbnz	r0, 8008d3a <__multadd+0x5a>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <__multadd+0x84>)
 8008d32:	480d      	ldr	r0, [pc, #52]	; (8008d68 <__multadd+0x88>)
 8008d34:	21b5      	movs	r1, #181	; 0xb5
 8008d36:	f000 fe6b 	bl	8009a10 <__assert_func>
 8008d3a:	6922      	ldr	r2, [r4, #16]
 8008d3c:	3202      	adds	r2, #2
 8008d3e:	f104 010c 	add.w	r1, r4, #12
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	300c      	adds	r0, #12
 8008d46:	f7ff ff5b 	bl	8008c00 <memcpy>
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff ffa5 	bl	8008c9c <_Bfree>
 8008d52:	4644      	mov	r4, r8
 8008d54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d58:	3501      	adds	r5, #1
 8008d5a:	615e      	str	r6, [r3, #20]
 8008d5c:	6125      	str	r5, [r4, #16]
 8008d5e:	4620      	mov	r0, r4
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	08009f7f 	.word	0x08009f7f
 8008d68:	08009ff0 	.word	0x08009ff0

08008d6c <__hi0bits>:
 8008d6c:	0c03      	lsrs	r3, r0, #16
 8008d6e:	041b      	lsls	r3, r3, #16
 8008d70:	b9d3      	cbnz	r3, 8008da8 <__hi0bits+0x3c>
 8008d72:	0400      	lsls	r0, r0, #16
 8008d74:	2310      	movs	r3, #16
 8008d76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d7a:	bf04      	itt	eq
 8008d7c:	0200      	lsleq	r0, r0, #8
 8008d7e:	3308      	addeq	r3, #8
 8008d80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d84:	bf04      	itt	eq
 8008d86:	0100      	lsleq	r0, r0, #4
 8008d88:	3304      	addeq	r3, #4
 8008d8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d8e:	bf04      	itt	eq
 8008d90:	0080      	lsleq	r0, r0, #2
 8008d92:	3302      	addeq	r3, #2
 8008d94:	2800      	cmp	r0, #0
 8008d96:	db05      	blt.n	8008da4 <__hi0bits+0x38>
 8008d98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d9c:	f103 0301 	add.w	r3, r3, #1
 8008da0:	bf08      	it	eq
 8008da2:	2320      	moveq	r3, #32
 8008da4:	4618      	mov	r0, r3
 8008da6:	4770      	bx	lr
 8008da8:	2300      	movs	r3, #0
 8008daa:	e7e4      	b.n	8008d76 <__hi0bits+0xa>

08008dac <__lo0bits>:
 8008dac:	6803      	ldr	r3, [r0, #0]
 8008dae:	f013 0207 	ands.w	r2, r3, #7
 8008db2:	4601      	mov	r1, r0
 8008db4:	d00b      	beq.n	8008dce <__lo0bits+0x22>
 8008db6:	07da      	lsls	r2, r3, #31
 8008db8:	d423      	bmi.n	8008e02 <__lo0bits+0x56>
 8008dba:	0798      	lsls	r0, r3, #30
 8008dbc:	bf49      	itett	mi
 8008dbe:	085b      	lsrmi	r3, r3, #1
 8008dc0:	089b      	lsrpl	r3, r3, #2
 8008dc2:	2001      	movmi	r0, #1
 8008dc4:	600b      	strmi	r3, [r1, #0]
 8008dc6:	bf5c      	itt	pl
 8008dc8:	600b      	strpl	r3, [r1, #0]
 8008dca:	2002      	movpl	r0, #2
 8008dcc:	4770      	bx	lr
 8008dce:	b298      	uxth	r0, r3
 8008dd0:	b9a8      	cbnz	r0, 8008dfe <__lo0bits+0x52>
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	2010      	movs	r0, #16
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	b90a      	cbnz	r2, 8008dde <__lo0bits+0x32>
 8008dda:	3008      	adds	r0, #8
 8008ddc:	0a1b      	lsrs	r3, r3, #8
 8008dde:	071a      	lsls	r2, r3, #28
 8008de0:	bf04      	itt	eq
 8008de2:	091b      	lsreq	r3, r3, #4
 8008de4:	3004      	addeq	r0, #4
 8008de6:	079a      	lsls	r2, r3, #30
 8008de8:	bf04      	itt	eq
 8008dea:	089b      	lsreq	r3, r3, #2
 8008dec:	3002      	addeq	r0, #2
 8008dee:	07da      	lsls	r2, r3, #31
 8008df0:	d403      	bmi.n	8008dfa <__lo0bits+0x4e>
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	f100 0001 	add.w	r0, r0, #1
 8008df8:	d005      	beq.n	8008e06 <__lo0bits+0x5a>
 8008dfa:	600b      	str	r3, [r1, #0]
 8008dfc:	4770      	bx	lr
 8008dfe:	4610      	mov	r0, r2
 8008e00:	e7e9      	b.n	8008dd6 <__lo0bits+0x2a>
 8008e02:	2000      	movs	r0, #0
 8008e04:	4770      	bx	lr
 8008e06:	2020      	movs	r0, #32
 8008e08:	4770      	bx	lr
	...

08008e0c <__i2b>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2101      	movs	r1, #1
 8008e12:	f7ff ff03 	bl	8008c1c <_Balloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__i2b+0x1a>
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <__i2b+0x24>)
 8008e1c:	4805      	ldr	r0, [pc, #20]	; (8008e34 <__i2b+0x28>)
 8008e1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e22:	f000 fdf5 	bl	8009a10 <__assert_func>
 8008e26:	2301      	movs	r3, #1
 8008e28:	6144      	str	r4, [r0, #20]
 8008e2a:	6103      	str	r3, [r0, #16]
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	bf00      	nop
 8008e30:	08009f7f 	.word	0x08009f7f
 8008e34:	08009ff0 	.word	0x08009ff0

08008e38 <__multiply>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	4691      	mov	r9, r2
 8008e3e:	690a      	ldr	r2, [r1, #16]
 8008e40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	bfb8      	it	lt
 8008e48:	460b      	movlt	r3, r1
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	bfbc      	itt	lt
 8008e4e:	464c      	movlt	r4, r9
 8008e50:	4699      	movlt	r9, r3
 8008e52:	6927      	ldr	r7, [r4, #16]
 8008e54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e58:	68a3      	ldr	r3, [r4, #8]
 8008e5a:	6861      	ldr	r1, [r4, #4]
 8008e5c:	eb07 060a 	add.w	r6, r7, sl
 8008e60:	42b3      	cmp	r3, r6
 8008e62:	b085      	sub	sp, #20
 8008e64:	bfb8      	it	lt
 8008e66:	3101      	addlt	r1, #1
 8008e68:	f7ff fed8 	bl	8008c1c <_Balloc>
 8008e6c:	b930      	cbnz	r0, 8008e7c <__multiply+0x44>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	4b44      	ldr	r3, [pc, #272]	; (8008f84 <__multiply+0x14c>)
 8008e72:	4845      	ldr	r0, [pc, #276]	; (8008f88 <__multiply+0x150>)
 8008e74:	f240 115d 	movw	r1, #349	; 0x15d
 8008e78:	f000 fdca 	bl	8009a10 <__assert_func>
 8008e7c:	f100 0514 	add.w	r5, r0, #20
 8008e80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e84:	462b      	mov	r3, r5
 8008e86:	2200      	movs	r2, #0
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	d321      	bcc.n	8008ed0 <__multiply+0x98>
 8008e8c:	f104 0314 	add.w	r3, r4, #20
 8008e90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e94:	f109 0314 	add.w	r3, r9, #20
 8008e98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e9c:	9202      	str	r2, [sp, #8]
 8008e9e:	1b3a      	subs	r2, r7, r4
 8008ea0:	3a15      	subs	r2, #21
 8008ea2:	f022 0203 	bic.w	r2, r2, #3
 8008ea6:	3204      	adds	r2, #4
 8008ea8:	f104 0115 	add.w	r1, r4, #21
 8008eac:	428f      	cmp	r7, r1
 8008eae:	bf38      	it	cc
 8008eb0:	2204      	movcc	r2, #4
 8008eb2:	9201      	str	r2, [sp, #4]
 8008eb4:	9a02      	ldr	r2, [sp, #8]
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d80c      	bhi.n	8008ed6 <__multiply+0x9e>
 8008ebc:	2e00      	cmp	r6, #0
 8008ebe:	dd03      	ble.n	8008ec8 <__multiply+0x90>
 8008ec0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d05a      	beq.n	8008f7e <__multiply+0x146>
 8008ec8:	6106      	str	r6, [r0, #16]
 8008eca:	b005      	add	sp, #20
 8008ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed0:	f843 2b04 	str.w	r2, [r3], #4
 8008ed4:	e7d8      	b.n	8008e88 <__multiply+0x50>
 8008ed6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008eda:	f1ba 0f00 	cmp.w	sl, #0
 8008ede:	d024      	beq.n	8008f2a <__multiply+0xf2>
 8008ee0:	f104 0e14 	add.w	lr, r4, #20
 8008ee4:	46a9      	mov	r9, r5
 8008ee6:	f04f 0c00 	mov.w	ip, #0
 8008eea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008eee:	f8d9 1000 	ldr.w	r1, [r9]
 8008ef2:	fa1f fb82 	uxth.w	fp, r2
 8008ef6:	b289      	uxth	r1, r1
 8008ef8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008efc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f00:	f8d9 2000 	ldr.w	r2, [r9]
 8008f04:	4461      	add	r1, ip
 8008f06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f12:	b289      	uxth	r1, r1
 8008f14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f18:	4577      	cmp	r7, lr
 8008f1a:	f849 1b04 	str.w	r1, [r9], #4
 8008f1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f22:	d8e2      	bhi.n	8008eea <__multiply+0xb2>
 8008f24:	9a01      	ldr	r2, [sp, #4]
 8008f26:	f845 c002 	str.w	ip, [r5, r2]
 8008f2a:	9a03      	ldr	r2, [sp, #12]
 8008f2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f30:	3304      	adds	r3, #4
 8008f32:	f1b9 0f00 	cmp.w	r9, #0
 8008f36:	d020      	beq.n	8008f7a <__multiply+0x142>
 8008f38:	6829      	ldr	r1, [r5, #0]
 8008f3a:	f104 0c14 	add.w	ip, r4, #20
 8008f3e:	46ae      	mov	lr, r5
 8008f40:	f04f 0a00 	mov.w	sl, #0
 8008f44:	f8bc b000 	ldrh.w	fp, [ip]
 8008f48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f4c:	fb09 220b 	mla	r2, r9, fp, r2
 8008f50:	4492      	add	sl, r2
 8008f52:	b289      	uxth	r1, r1
 8008f54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f58:	f84e 1b04 	str.w	r1, [lr], #4
 8008f5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f60:	f8be 1000 	ldrh.w	r1, [lr]
 8008f64:	0c12      	lsrs	r2, r2, #16
 8008f66:	fb09 1102 	mla	r1, r9, r2, r1
 8008f6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f6e:	4567      	cmp	r7, ip
 8008f70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f74:	d8e6      	bhi.n	8008f44 <__multiply+0x10c>
 8008f76:	9a01      	ldr	r2, [sp, #4]
 8008f78:	50a9      	str	r1, [r5, r2]
 8008f7a:	3504      	adds	r5, #4
 8008f7c:	e79a      	b.n	8008eb4 <__multiply+0x7c>
 8008f7e:	3e01      	subs	r6, #1
 8008f80:	e79c      	b.n	8008ebc <__multiply+0x84>
 8008f82:	bf00      	nop
 8008f84:	08009f7f 	.word	0x08009f7f
 8008f88:	08009ff0 	.word	0x08009ff0

08008f8c <__pow5mult>:
 8008f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f90:	4615      	mov	r5, r2
 8008f92:	f012 0203 	ands.w	r2, r2, #3
 8008f96:	4606      	mov	r6, r0
 8008f98:	460f      	mov	r7, r1
 8008f9a:	d007      	beq.n	8008fac <__pow5mult+0x20>
 8008f9c:	4c25      	ldr	r4, [pc, #148]	; (8009034 <__pow5mult+0xa8>)
 8008f9e:	3a01      	subs	r2, #1
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fa6:	f7ff fe9b 	bl	8008ce0 <__multadd>
 8008faa:	4607      	mov	r7, r0
 8008fac:	10ad      	asrs	r5, r5, #2
 8008fae:	d03d      	beq.n	800902c <__pow5mult+0xa0>
 8008fb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fb2:	b97c      	cbnz	r4, 8008fd4 <__pow5mult+0x48>
 8008fb4:	2010      	movs	r0, #16
 8008fb6:	f7ff fe1b 	bl	8008bf0 <malloc>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	6270      	str	r0, [r6, #36]	; 0x24
 8008fbe:	b928      	cbnz	r0, 8008fcc <__pow5mult+0x40>
 8008fc0:	4b1d      	ldr	r3, [pc, #116]	; (8009038 <__pow5mult+0xac>)
 8008fc2:	481e      	ldr	r0, [pc, #120]	; (800903c <__pow5mult+0xb0>)
 8008fc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fc8:	f000 fd22 	bl	8009a10 <__assert_func>
 8008fcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fd0:	6004      	str	r4, [r0, #0]
 8008fd2:	60c4      	str	r4, [r0, #12]
 8008fd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fdc:	b94c      	cbnz	r4, 8008ff2 <__pow5mult+0x66>
 8008fde:	f240 2171 	movw	r1, #625	; 0x271
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ff12 	bl	8008e0c <__i2b>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fee:	4604      	mov	r4, r0
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	f04f 0900 	mov.w	r9, #0
 8008ff6:	07eb      	lsls	r3, r5, #31
 8008ff8:	d50a      	bpl.n	8009010 <__pow5mult+0x84>
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7ff ff1a 	bl	8008e38 <__multiply>
 8009004:	4639      	mov	r1, r7
 8009006:	4680      	mov	r8, r0
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff fe47 	bl	8008c9c <_Bfree>
 800900e:	4647      	mov	r7, r8
 8009010:	106d      	asrs	r5, r5, #1
 8009012:	d00b      	beq.n	800902c <__pow5mult+0xa0>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	b938      	cbnz	r0, 8009028 <__pow5mult+0x9c>
 8009018:	4622      	mov	r2, r4
 800901a:	4621      	mov	r1, r4
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff ff0b 	bl	8008e38 <__multiply>
 8009022:	6020      	str	r0, [r4, #0]
 8009024:	f8c0 9000 	str.w	r9, [r0]
 8009028:	4604      	mov	r4, r0
 800902a:	e7e4      	b.n	8008ff6 <__pow5mult+0x6a>
 800902c:	4638      	mov	r0, r7
 800902e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009032:	bf00      	nop
 8009034:	0800a140 	.word	0x0800a140
 8009038:	08009f0d 	.word	0x08009f0d
 800903c:	08009ff0 	.word	0x08009ff0

08009040 <__lshift>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	6849      	ldr	r1, [r1, #4]
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800904e:	68a3      	ldr	r3, [r4, #8]
 8009050:	4607      	mov	r7, r0
 8009052:	4691      	mov	r9, r2
 8009054:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009058:	f108 0601 	add.w	r6, r8, #1
 800905c:	42b3      	cmp	r3, r6
 800905e:	db0b      	blt.n	8009078 <__lshift+0x38>
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff fddb 	bl	8008c1c <_Balloc>
 8009066:	4605      	mov	r5, r0
 8009068:	b948      	cbnz	r0, 800907e <__lshift+0x3e>
 800906a:	4602      	mov	r2, r0
 800906c:	4b2a      	ldr	r3, [pc, #168]	; (8009118 <__lshift+0xd8>)
 800906e:	482b      	ldr	r0, [pc, #172]	; (800911c <__lshift+0xdc>)
 8009070:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009074:	f000 fccc 	bl	8009a10 <__assert_func>
 8009078:	3101      	adds	r1, #1
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	e7ee      	b.n	800905c <__lshift+0x1c>
 800907e:	2300      	movs	r3, #0
 8009080:	f100 0114 	add.w	r1, r0, #20
 8009084:	f100 0210 	add.w	r2, r0, #16
 8009088:	4618      	mov	r0, r3
 800908a:	4553      	cmp	r3, sl
 800908c:	db37      	blt.n	80090fe <__lshift+0xbe>
 800908e:	6920      	ldr	r0, [r4, #16]
 8009090:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009094:	f104 0314 	add.w	r3, r4, #20
 8009098:	f019 091f 	ands.w	r9, r9, #31
 800909c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090a4:	d02f      	beq.n	8009106 <__lshift+0xc6>
 80090a6:	f1c9 0e20 	rsb	lr, r9, #32
 80090aa:	468a      	mov	sl, r1
 80090ac:	f04f 0c00 	mov.w	ip, #0
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	fa02 f209 	lsl.w	r2, r2, r9
 80090b6:	ea42 020c 	orr.w	r2, r2, ip
 80090ba:	f84a 2b04 	str.w	r2, [sl], #4
 80090be:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c2:	4298      	cmp	r0, r3
 80090c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090c8:	d8f2      	bhi.n	80090b0 <__lshift+0x70>
 80090ca:	1b03      	subs	r3, r0, r4
 80090cc:	3b15      	subs	r3, #21
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	3304      	adds	r3, #4
 80090d4:	f104 0215 	add.w	r2, r4, #21
 80090d8:	4290      	cmp	r0, r2
 80090da:	bf38      	it	cc
 80090dc:	2304      	movcc	r3, #4
 80090de:	f841 c003 	str.w	ip, [r1, r3]
 80090e2:	f1bc 0f00 	cmp.w	ip, #0
 80090e6:	d001      	beq.n	80090ec <__lshift+0xac>
 80090e8:	f108 0602 	add.w	r6, r8, #2
 80090ec:	3e01      	subs	r6, #1
 80090ee:	4638      	mov	r0, r7
 80090f0:	612e      	str	r6, [r5, #16]
 80090f2:	4621      	mov	r1, r4
 80090f4:	f7ff fdd2 	bl	8008c9c <_Bfree>
 80090f8:	4628      	mov	r0, r5
 80090fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009102:	3301      	adds	r3, #1
 8009104:	e7c1      	b.n	800908a <__lshift+0x4a>
 8009106:	3904      	subs	r1, #4
 8009108:	f853 2b04 	ldr.w	r2, [r3], #4
 800910c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009110:	4298      	cmp	r0, r3
 8009112:	d8f9      	bhi.n	8009108 <__lshift+0xc8>
 8009114:	e7ea      	b.n	80090ec <__lshift+0xac>
 8009116:	bf00      	nop
 8009118:	08009f7f 	.word	0x08009f7f
 800911c:	08009ff0 	.word	0x08009ff0

08009120 <__mcmp>:
 8009120:	b530      	push	{r4, r5, lr}
 8009122:	6902      	ldr	r2, [r0, #16]
 8009124:	690c      	ldr	r4, [r1, #16]
 8009126:	1b12      	subs	r2, r2, r4
 8009128:	d10e      	bne.n	8009148 <__mcmp+0x28>
 800912a:	f100 0314 	add.w	r3, r0, #20
 800912e:	3114      	adds	r1, #20
 8009130:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009134:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009138:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800913c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009140:	42a5      	cmp	r5, r4
 8009142:	d003      	beq.n	800914c <__mcmp+0x2c>
 8009144:	d305      	bcc.n	8009152 <__mcmp+0x32>
 8009146:	2201      	movs	r2, #1
 8009148:	4610      	mov	r0, r2
 800914a:	bd30      	pop	{r4, r5, pc}
 800914c:	4283      	cmp	r3, r0
 800914e:	d3f3      	bcc.n	8009138 <__mcmp+0x18>
 8009150:	e7fa      	b.n	8009148 <__mcmp+0x28>
 8009152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009156:	e7f7      	b.n	8009148 <__mcmp+0x28>

08009158 <__mdiff>:
 8009158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	460c      	mov	r4, r1
 800915e:	4606      	mov	r6, r0
 8009160:	4611      	mov	r1, r2
 8009162:	4620      	mov	r0, r4
 8009164:	4690      	mov	r8, r2
 8009166:	f7ff ffdb 	bl	8009120 <__mcmp>
 800916a:	1e05      	subs	r5, r0, #0
 800916c:	d110      	bne.n	8009190 <__mdiff+0x38>
 800916e:	4629      	mov	r1, r5
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff fd53 	bl	8008c1c <_Balloc>
 8009176:	b930      	cbnz	r0, 8009186 <__mdiff+0x2e>
 8009178:	4b3a      	ldr	r3, [pc, #232]	; (8009264 <__mdiff+0x10c>)
 800917a:	4602      	mov	r2, r0
 800917c:	f240 2132 	movw	r1, #562	; 0x232
 8009180:	4839      	ldr	r0, [pc, #228]	; (8009268 <__mdiff+0x110>)
 8009182:	f000 fc45 	bl	8009a10 <__assert_func>
 8009186:	2301      	movs	r3, #1
 8009188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800918c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009190:	bfa4      	itt	ge
 8009192:	4643      	movge	r3, r8
 8009194:	46a0      	movge	r8, r4
 8009196:	4630      	mov	r0, r6
 8009198:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800919c:	bfa6      	itte	ge
 800919e:	461c      	movge	r4, r3
 80091a0:	2500      	movge	r5, #0
 80091a2:	2501      	movlt	r5, #1
 80091a4:	f7ff fd3a 	bl	8008c1c <_Balloc>
 80091a8:	b920      	cbnz	r0, 80091b4 <__mdiff+0x5c>
 80091aa:	4b2e      	ldr	r3, [pc, #184]	; (8009264 <__mdiff+0x10c>)
 80091ac:	4602      	mov	r2, r0
 80091ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091b2:	e7e5      	b.n	8009180 <__mdiff+0x28>
 80091b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091b8:	6926      	ldr	r6, [r4, #16]
 80091ba:	60c5      	str	r5, [r0, #12]
 80091bc:	f104 0914 	add.w	r9, r4, #20
 80091c0:	f108 0514 	add.w	r5, r8, #20
 80091c4:	f100 0e14 	add.w	lr, r0, #20
 80091c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091d0:	f108 0210 	add.w	r2, r8, #16
 80091d4:	46f2      	mov	sl, lr
 80091d6:	2100      	movs	r1, #0
 80091d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80091dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091e0:	fa1f f883 	uxth.w	r8, r3
 80091e4:	fa11 f18b 	uxtah	r1, r1, fp
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	eba1 0808 	sub.w	r8, r1, r8
 80091ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091f6:	fa1f f888 	uxth.w	r8, r8
 80091fa:	1419      	asrs	r1, r3, #16
 80091fc:	454e      	cmp	r6, r9
 80091fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009202:	f84a 3b04 	str.w	r3, [sl], #4
 8009206:	d8e7      	bhi.n	80091d8 <__mdiff+0x80>
 8009208:	1b33      	subs	r3, r6, r4
 800920a:	3b15      	subs	r3, #21
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	3304      	adds	r3, #4
 8009212:	3415      	adds	r4, #21
 8009214:	42a6      	cmp	r6, r4
 8009216:	bf38      	it	cc
 8009218:	2304      	movcc	r3, #4
 800921a:	441d      	add	r5, r3
 800921c:	4473      	add	r3, lr
 800921e:	469e      	mov	lr, r3
 8009220:	462e      	mov	r6, r5
 8009222:	4566      	cmp	r6, ip
 8009224:	d30e      	bcc.n	8009244 <__mdiff+0xec>
 8009226:	f10c 0203 	add.w	r2, ip, #3
 800922a:	1b52      	subs	r2, r2, r5
 800922c:	f022 0203 	bic.w	r2, r2, #3
 8009230:	3d03      	subs	r5, #3
 8009232:	45ac      	cmp	ip, r5
 8009234:	bf38      	it	cc
 8009236:	2200      	movcc	r2, #0
 8009238:	441a      	add	r2, r3
 800923a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800923e:	b17b      	cbz	r3, 8009260 <__mdiff+0x108>
 8009240:	6107      	str	r7, [r0, #16]
 8009242:	e7a3      	b.n	800918c <__mdiff+0x34>
 8009244:	f856 8b04 	ldr.w	r8, [r6], #4
 8009248:	fa11 f288 	uxtah	r2, r1, r8
 800924c:	1414      	asrs	r4, r2, #16
 800924e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009252:	b292      	uxth	r2, r2
 8009254:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009258:	f84e 2b04 	str.w	r2, [lr], #4
 800925c:	1421      	asrs	r1, r4, #16
 800925e:	e7e0      	b.n	8009222 <__mdiff+0xca>
 8009260:	3f01      	subs	r7, #1
 8009262:	e7ea      	b.n	800923a <__mdiff+0xe2>
 8009264:	08009f7f 	.word	0x08009f7f
 8009268:	08009ff0 	.word	0x08009ff0

0800926c <__d2b>:
 800926c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009270:	4689      	mov	r9, r1
 8009272:	2101      	movs	r1, #1
 8009274:	ec57 6b10 	vmov	r6, r7, d0
 8009278:	4690      	mov	r8, r2
 800927a:	f7ff fccf 	bl	8008c1c <_Balloc>
 800927e:	4604      	mov	r4, r0
 8009280:	b930      	cbnz	r0, 8009290 <__d2b+0x24>
 8009282:	4602      	mov	r2, r0
 8009284:	4b25      	ldr	r3, [pc, #148]	; (800931c <__d2b+0xb0>)
 8009286:	4826      	ldr	r0, [pc, #152]	; (8009320 <__d2b+0xb4>)
 8009288:	f240 310a 	movw	r1, #778	; 0x30a
 800928c:	f000 fbc0 	bl	8009a10 <__assert_func>
 8009290:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009298:	bb35      	cbnz	r5, 80092e8 <__d2b+0x7c>
 800929a:	2e00      	cmp	r6, #0
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	d028      	beq.n	80092f2 <__d2b+0x86>
 80092a0:	4668      	mov	r0, sp
 80092a2:	9600      	str	r6, [sp, #0]
 80092a4:	f7ff fd82 	bl	8008dac <__lo0bits>
 80092a8:	9900      	ldr	r1, [sp, #0]
 80092aa:	b300      	cbz	r0, 80092ee <__d2b+0x82>
 80092ac:	9a01      	ldr	r2, [sp, #4]
 80092ae:	f1c0 0320 	rsb	r3, r0, #32
 80092b2:	fa02 f303 	lsl.w	r3, r2, r3
 80092b6:	430b      	orrs	r3, r1
 80092b8:	40c2      	lsrs	r2, r0
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	9201      	str	r2, [sp, #4]
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	61a3      	str	r3, [r4, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bf14      	ite	ne
 80092c6:	2202      	movne	r2, #2
 80092c8:	2201      	moveq	r2, #1
 80092ca:	6122      	str	r2, [r4, #16]
 80092cc:	b1d5      	cbz	r5, 8009304 <__d2b+0x98>
 80092ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092d2:	4405      	add	r5, r0
 80092d4:	f8c9 5000 	str.w	r5, [r9]
 80092d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092dc:	f8c8 0000 	str.w	r0, [r8]
 80092e0:	4620      	mov	r0, r4
 80092e2:	b003      	add	sp, #12
 80092e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092ec:	e7d5      	b.n	800929a <__d2b+0x2e>
 80092ee:	6161      	str	r1, [r4, #20]
 80092f0:	e7e5      	b.n	80092be <__d2b+0x52>
 80092f2:	a801      	add	r0, sp, #4
 80092f4:	f7ff fd5a 	bl	8008dac <__lo0bits>
 80092f8:	9b01      	ldr	r3, [sp, #4]
 80092fa:	6163      	str	r3, [r4, #20]
 80092fc:	2201      	movs	r2, #1
 80092fe:	6122      	str	r2, [r4, #16]
 8009300:	3020      	adds	r0, #32
 8009302:	e7e3      	b.n	80092cc <__d2b+0x60>
 8009304:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800930c:	f8c9 0000 	str.w	r0, [r9]
 8009310:	6918      	ldr	r0, [r3, #16]
 8009312:	f7ff fd2b 	bl	8008d6c <__hi0bits>
 8009316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800931a:	e7df      	b.n	80092dc <__d2b+0x70>
 800931c:	08009f7f 	.word	0x08009f7f
 8009320:	08009ff0 	.word	0x08009ff0

08009324 <_calloc_r>:
 8009324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009326:	fba1 2402 	umull	r2, r4, r1, r2
 800932a:	b94c      	cbnz	r4, 8009340 <_calloc_r+0x1c>
 800932c:	4611      	mov	r1, r2
 800932e:	9201      	str	r2, [sp, #4]
 8009330:	f000 f87a 	bl	8009428 <_malloc_r>
 8009334:	9a01      	ldr	r2, [sp, #4]
 8009336:	4605      	mov	r5, r0
 8009338:	b930      	cbnz	r0, 8009348 <_calloc_r+0x24>
 800933a:	4628      	mov	r0, r5
 800933c:	b003      	add	sp, #12
 800933e:	bd30      	pop	{r4, r5, pc}
 8009340:	220c      	movs	r2, #12
 8009342:	6002      	str	r2, [r0, #0]
 8009344:	2500      	movs	r5, #0
 8009346:	e7f8      	b.n	800933a <_calloc_r+0x16>
 8009348:	4621      	mov	r1, r4
 800934a:	f7fe f8f5 	bl	8007538 <memset>
 800934e:	e7f4      	b.n	800933a <_calloc_r+0x16>

08009350 <_free_r>:
 8009350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009352:	2900      	cmp	r1, #0
 8009354:	d044      	beq.n	80093e0 <_free_r+0x90>
 8009356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935a:	9001      	str	r0, [sp, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f1a1 0404 	sub.w	r4, r1, #4
 8009362:	bfb8      	it	lt
 8009364:	18e4      	addlt	r4, r4, r3
 8009366:	f000 fcdf 	bl	8009d28 <__malloc_lock>
 800936a:	4a1e      	ldr	r2, [pc, #120]	; (80093e4 <_free_r+0x94>)
 800936c:	9801      	ldr	r0, [sp, #4]
 800936e:	6813      	ldr	r3, [r2, #0]
 8009370:	b933      	cbnz	r3, 8009380 <_free_r+0x30>
 8009372:	6063      	str	r3, [r4, #4]
 8009374:	6014      	str	r4, [r2, #0]
 8009376:	b003      	add	sp, #12
 8009378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800937c:	f000 bcda 	b.w	8009d34 <__malloc_unlock>
 8009380:	42a3      	cmp	r3, r4
 8009382:	d908      	bls.n	8009396 <_free_r+0x46>
 8009384:	6825      	ldr	r5, [r4, #0]
 8009386:	1961      	adds	r1, r4, r5
 8009388:	428b      	cmp	r3, r1
 800938a:	bf01      	itttt	eq
 800938c:	6819      	ldreq	r1, [r3, #0]
 800938e:	685b      	ldreq	r3, [r3, #4]
 8009390:	1949      	addeq	r1, r1, r5
 8009392:	6021      	streq	r1, [r4, #0]
 8009394:	e7ed      	b.n	8009372 <_free_r+0x22>
 8009396:	461a      	mov	r2, r3
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	b10b      	cbz	r3, 80093a0 <_free_r+0x50>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d9fa      	bls.n	8009396 <_free_r+0x46>
 80093a0:	6811      	ldr	r1, [r2, #0]
 80093a2:	1855      	adds	r5, r2, r1
 80093a4:	42a5      	cmp	r5, r4
 80093a6:	d10b      	bne.n	80093c0 <_free_r+0x70>
 80093a8:	6824      	ldr	r4, [r4, #0]
 80093aa:	4421      	add	r1, r4
 80093ac:	1854      	adds	r4, r2, r1
 80093ae:	42a3      	cmp	r3, r4
 80093b0:	6011      	str	r1, [r2, #0]
 80093b2:	d1e0      	bne.n	8009376 <_free_r+0x26>
 80093b4:	681c      	ldr	r4, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	6053      	str	r3, [r2, #4]
 80093ba:	4421      	add	r1, r4
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	e7da      	b.n	8009376 <_free_r+0x26>
 80093c0:	d902      	bls.n	80093c8 <_free_r+0x78>
 80093c2:	230c      	movs	r3, #12
 80093c4:	6003      	str	r3, [r0, #0]
 80093c6:	e7d6      	b.n	8009376 <_free_r+0x26>
 80093c8:	6825      	ldr	r5, [r4, #0]
 80093ca:	1961      	adds	r1, r4, r5
 80093cc:	428b      	cmp	r3, r1
 80093ce:	bf04      	itt	eq
 80093d0:	6819      	ldreq	r1, [r3, #0]
 80093d2:	685b      	ldreq	r3, [r3, #4]
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	bf04      	itt	eq
 80093d8:	1949      	addeq	r1, r1, r5
 80093da:	6021      	streq	r1, [r4, #0]
 80093dc:	6054      	str	r4, [r2, #4]
 80093de:	e7ca      	b.n	8009376 <_free_r+0x26>
 80093e0:	b003      	add	sp, #12
 80093e2:	bd30      	pop	{r4, r5, pc}
 80093e4:	240009b8 	.word	0x240009b8

080093e8 <sbrk_aligned>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4e0e      	ldr	r6, [pc, #56]	; (8009424 <sbrk_aligned+0x3c>)
 80093ec:	460c      	mov	r4, r1
 80093ee:	6831      	ldr	r1, [r6, #0]
 80093f0:	4605      	mov	r5, r0
 80093f2:	b911      	cbnz	r1, 80093fa <sbrk_aligned+0x12>
 80093f4:	f000 f9e6 	bl	80097c4 <_sbrk_r>
 80093f8:	6030      	str	r0, [r6, #0]
 80093fa:	4621      	mov	r1, r4
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 f9e1 	bl	80097c4 <_sbrk_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	d00a      	beq.n	800941c <sbrk_aligned+0x34>
 8009406:	1cc4      	adds	r4, r0, #3
 8009408:	f024 0403 	bic.w	r4, r4, #3
 800940c:	42a0      	cmp	r0, r4
 800940e:	d007      	beq.n	8009420 <sbrk_aligned+0x38>
 8009410:	1a21      	subs	r1, r4, r0
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f9d6 	bl	80097c4 <_sbrk_r>
 8009418:	3001      	adds	r0, #1
 800941a:	d101      	bne.n	8009420 <sbrk_aligned+0x38>
 800941c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009420:	4620      	mov	r0, r4
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	240009bc 	.word	0x240009bc

08009428 <_malloc_r>:
 8009428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942c:	1ccd      	adds	r5, r1, #3
 800942e:	f025 0503 	bic.w	r5, r5, #3
 8009432:	3508      	adds	r5, #8
 8009434:	2d0c      	cmp	r5, #12
 8009436:	bf38      	it	cc
 8009438:	250c      	movcc	r5, #12
 800943a:	2d00      	cmp	r5, #0
 800943c:	4607      	mov	r7, r0
 800943e:	db01      	blt.n	8009444 <_malloc_r+0x1c>
 8009440:	42a9      	cmp	r1, r5
 8009442:	d905      	bls.n	8009450 <_malloc_r+0x28>
 8009444:	230c      	movs	r3, #12
 8009446:	603b      	str	r3, [r7, #0]
 8009448:	2600      	movs	r6, #0
 800944a:	4630      	mov	r0, r6
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	4e2e      	ldr	r6, [pc, #184]	; (800950c <_malloc_r+0xe4>)
 8009452:	f000 fc69 	bl	8009d28 <__malloc_lock>
 8009456:	6833      	ldr	r3, [r6, #0]
 8009458:	461c      	mov	r4, r3
 800945a:	bb34      	cbnz	r4, 80094aa <_malloc_r+0x82>
 800945c:	4629      	mov	r1, r5
 800945e:	4638      	mov	r0, r7
 8009460:	f7ff ffc2 	bl	80093e8 <sbrk_aligned>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	4604      	mov	r4, r0
 8009468:	d14d      	bne.n	8009506 <_malloc_r+0xde>
 800946a:	6834      	ldr	r4, [r6, #0]
 800946c:	4626      	mov	r6, r4
 800946e:	2e00      	cmp	r6, #0
 8009470:	d140      	bne.n	80094f4 <_malloc_r+0xcc>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	4631      	mov	r1, r6
 8009476:	4638      	mov	r0, r7
 8009478:	eb04 0803 	add.w	r8, r4, r3
 800947c:	f000 f9a2 	bl	80097c4 <_sbrk_r>
 8009480:	4580      	cmp	r8, r0
 8009482:	d13a      	bne.n	80094fa <_malloc_r+0xd2>
 8009484:	6821      	ldr	r1, [r4, #0]
 8009486:	3503      	adds	r5, #3
 8009488:	1a6d      	subs	r5, r5, r1
 800948a:	f025 0503 	bic.w	r5, r5, #3
 800948e:	3508      	adds	r5, #8
 8009490:	2d0c      	cmp	r5, #12
 8009492:	bf38      	it	cc
 8009494:	250c      	movcc	r5, #12
 8009496:	4629      	mov	r1, r5
 8009498:	4638      	mov	r0, r7
 800949a:	f7ff ffa5 	bl	80093e8 <sbrk_aligned>
 800949e:	3001      	adds	r0, #1
 80094a0:	d02b      	beq.n	80094fa <_malloc_r+0xd2>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	442b      	add	r3, r5
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	e00e      	b.n	80094c8 <_malloc_r+0xa0>
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	1b52      	subs	r2, r2, r5
 80094ae:	d41e      	bmi.n	80094ee <_malloc_r+0xc6>
 80094b0:	2a0b      	cmp	r2, #11
 80094b2:	d916      	bls.n	80094e2 <_malloc_r+0xba>
 80094b4:	1961      	adds	r1, r4, r5
 80094b6:	42a3      	cmp	r3, r4
 80094b8:	6025      	str	r5, [r4, #0]
 80094ba:	bf18      	it	ne
 80094bc:	6059      	strne	r1, [r3, #4]
 80094be:	6863      	ldr	r3, [r4, #4]
 80094c0:	bf08      	it	eq
 80094c2:	6031      	streq	r1, [r6, #0]
 80094c4:	5162      	str	r2, [r4, r5]
 80094c6:	604b      	str	r3, [r1, #4]
 80094c8:	4638      	mov	r0, r7
 80094ca:	f104 060b 	add.w	r6, r4, #11
 80094ce:	f000 fc31 	bl	8009d34 <__malloc_unlock>
 80094d2:	f026 0607 	bic.w	r6, r6, #7
 80094d6:	1d23      	adds	r3, r4, #4
 80094d8:	1af2      	subs	r2, r6, r3
 80094da:	d0b6      	beq.n	800944a <_malloc_r+0x22>
 80094dc:	1b9b      	subs	r3, r3, r6
 80094de:	50a3      	str	r3, [r4, r2]
 80094e0:	e7b3      	b.n	800944a <_malloc_r+0x22>
 80094e2:	6862      	ldr	r2, [r4, #4]
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	bf0c      	ite	eq
 80094e8:	6032      	streq	r2, [r6, #0]
 80094ea:	605a      	strne	r2, [r3, #4]
 80094ec:	e7ec      	b.n	80094c8 <_malloc_r+0xa0>
 80094ee:	4623      	mov	r3, r4
 80094f0:	6864      	ldr	r4, [r4, #4]
 80094f2:	e7b2      	b.n	800945a <_malloc_r+0x32>
 80094f4:	4634      	mov	r4, r6
 80094f6:	6876      	ldr	r6, [r6, #4]
 80094f8:	e7b9      	b.n	800946e <_malloc_r+0x46>
 80094fa:	230c      	movs	r3, #12
 80094fc:	603b      	str	r3, [r7, #0]
 80094fe:	4638      	mov	r0, r7
 8009500:	f000 fc18 	bl	8009d34 <__malloc_unlock>
 8009504:	e7a1      	b.n	800944a <_malloc_r+0x22>
 8009506:	6025      	str	r5, [r4, #0]
 8009508:	e7de      	b.n	80094c8 <_malloc_r+0xa0>
 800950a:	bf00      	nop
 800950c:	240009b8 	.word	0x240009b8

08009510 <__sfputc_r>:
 8009510:	6893      	ldr	r3, [r2, #8]
 8009512:	3b01      	subs	r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	b410      	push	{r4}
 8009518:	6093      	str	r3, [r2, #8]
 800951a:	da08      	bge.n	800952e <__sfputc_r+0x1e>
 800951c:	6994      	ldr	r4, [r2, #24]
 800951e:	42a3      	cmp	r3, r4
 8009520:	db01      	blt.n	8009526 <__sfputc_r+0x16>
 8009522:	290a      	cmp	r1, #10
 8009524:	d103      	bne.n	800952e <__sfputc_r+0x1e>
 8009526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800952a:	f000 b99f 	b.w	800986c <__swbuf_r>
 800952e:	6813      	ldr	r3, [r2, #0]
 8009530:	1c58      	adds	r0, r3, #1
 8009532:	6010      	str	r0, [r2, #0]
 8009534:	7019      	strb	r1, [r3, #0]
 8009536:	4608      	mov	r0, r1
 8009538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953c:	4770      	bx	lr

0800953e <__sfputs_r>:
 800953e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009540:	4606      	mov	r6, r0
 8009542:	460f      	mov	r7, r1
 8009544:	4614      	mov	r4, r2
 8009546:	18d5      	adds	r5, r2, r3
 8009548:	42ac      	cmp	r4, r5
 800954a:	d101      	bne.n	8009550 <__sfputs_r+0x12>
 800954c:	2000      	movs	r0, #0
 800954e:	e007      	b.n	8009560 <__sfputs_r+0x22>
 8009550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009554:	463a      	mov	r2, r7
 8009556:	4630      	mov	r0, r6
 8009558:	f7ff ffda 	bl	8009510 <__sfputc_r>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d1f3      	bne.n	8009548 <__sfputs_r+0xa>
 8009560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009564 <_vfiprintf_r>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	460d      	mov	r5, r1
 800956a:	b09d      	sub	sp, #116	; 0x74
 800956c:	4614      	mov	r4, r2
 800956e:	4698      	mov	r8, r3
 8009570:	4606      	mov	r6, r0
 8009572:	b118      	cbz	r0, 800957c <_vfiprintf_r+0x18>
 8009574:	6983      	ldr	r3, [r0, #24]
 8009576:	b90b      	cbnz	r3, 800957c <_vfiprintf_r+0x18>
 8009578:	f7ff fa94 	bl	8008aa4 <__sinit>
 800957c:	4b89      	ldr	r3, [pc, #548]	; (80097a4 <_vfiprintf_r+0x240>)
 800957e:	429d      	cmp	r5, r3
 8009580:	d11b      	bne.n	80095ba <_vfiprintf_r+0x56>
 8009582:	6875      	ldr	r5, [r6, #4]
 8009584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009586:	07d9      	lsls	r1, r3, #31
 8009588:	d405      	bmi.n	8009596 <_vfiprintf_r+0x32>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	059a      	lsls	r2, r3, #22
 800958e:	d402      	bmi.n	8009596 <_vfiprintf_r+0x32>
 8009590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009592:	f7ff fb2a 	bl	8008bea <__retarget_lock_acquire_recursive>
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	071b      	lsls	r3, r3, #28
 800959a:	d501      	bpl.n	80095a0 <_vfiprintf_r+0x3c>
 800959c:	692b      	ldr	r3, [r5, #16]
 800959e:	b9eb      	cbnz	r3, 80095dc <_vfiprintf_r+0x78>
 80095a0:	4629      	mov	r1, r5
 80095a2:	4630      	mov	r0, r6
 80095a4:	f000 f9c6 	bl	8009934 <__swsetup_r>
 80095a8:	b1c0      	cbz	r0, 80095dc <_vfiprintf_r+0x78>
 80095aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ac:	07dc      	lsls	r4, r3, #31
 80095ae:	d50e      	bpl.n	80095ce <_vfiprintf_r+0x6a>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095b4:	b01d      	add	sp, #116	; 0x74
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	4b7b      	ldr	r3, [pc, #492]	; (80097a8 <_vfiprintf_r+0x244>)
 80095bc:	429d      	cmp	r5, r3
 80095be:	d101      	bne.n	80095c4 <_vfiprintf_r+0x60>
 80095c0:	68b5      	ldr	r5, [r6, #8]
 80095c2:	e7df      	b.n	8009584 <_vfiprintf_r+0x20>
 80095c4:	4b79      	ldr	r3, [pc, #484]	; (80097ac <_vfiprintf_r+0x248>)
 80095c6:	429d      	cmp	r5, r3
 80095c8:	bf08      	it	eq
 80095ca:	68f5      	ldreq	r5, [r6, #12]
 80095cc:	e7da      	b.n	8009584 <_vfiprintf_r+0x20>
 80095ce:	89ab      	ldrh	r3, [r5, #12]
 80095d0:	0598      	lsls	r0, r3, #22
 80095d2:	d4ed      	bmi.n	80095b0 <_vfiprintf_r+0x4c>
 80095d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095d6:	f7ff fb09 	bl	8008bec <__retarget_lock_release_recursive>
 80095da:	e7e9      	b.n	80095b0 <_vfiprintf_r+0x4c>
 80095dc:	2300      	movs	r3, #0
 80095de:	9309      	str	r3, [sp, #36]	; 0x24
 80095e0:	2320      	movs	r3, #32
 80095e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ea:	2330      	movs	r3, #48	; 0x30
 80095ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097b0 <_vfiprintf_r+0x24c>
 80095f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095f4:	f04f 0901 	mov.w	r9, #1
 80095f8:	4623      	mov	r3, r4
 80095fa:	469a      	mov	sl, r3
 80095fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009600:	b10a      	cbz	r2, 8009606 <_vfiprintf_r+0xa2>
 8009602:	2a25      	cmp	r2, #37	; 0x25
 8009604:	d1f9      	bne.n	80095fa <_vfiprintf_r+0x96>
 8009606:	ebba 0b04 	subs.w	fp, sl, r4
 800960a:	d00b      	beq.n	8009624 <_vfiprintf_r+0xc0>
 800960c:	465b      	mov	r3, fp
 800960e:	4622      	mov	r2, r4
 8009610:	4629      	mov	r1, r5
 8009612:	4630      	mov	r0, r6
 8009614:	f7ff ff93 	bl	800953e <__sfputs_r>
 8009618:	3001      	adds	r0, #1
 800961a:	f000 80aa 	beq.w	8009772 <_vfiprintf_r+0x20e>
 800961e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009620:	445a      	add	r2, fp
 8009622:	9209      	str	r2, [sp, #36]	; 0x24
 8009624:	f89a 3000 	ldrb.w	r3, [sl]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80a2 	beq.w	8009772 <_vfiprintf_r+0x20e>
 800962e:	2300      	movs	r3, #0
 8009630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009638:	f10a 0a01 	add.w	sl, sl, #1
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009644:	931a      	str	r3, [sp, #104]	; 0x68
 8009646:	4654      	mov	r4, sl
 8009648:	2205      	movs	r2, #5
 800964a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800964e:	4858      	ldr	r0, [pc, #352]	; (80097b0 <_vfiprintf_r+0x24c>)
 8009650:	f7f6 fe4e 	bl	80002f0 <memchr>
 8009654:	9a04      	ldr	r2, [sp, #16]
 8009656:	b9d8      	cbnz	r0, 8009690 <_vfiprintf_r+0x12c>
 8009658:	06d1      	lsls	r1, r2, #27
 800965a:	bf44      	itt	mi
 800965c:	2320      	movmi	r3, #32
 800965e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009662:	0713      	lsls	r3, r2, #28
 8009664:	bf44      	itt	mi
 8009666:	232b      	movmi	r3, #43	; 0x2b
 8009668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966c:	f89a 3000 	ldrb.w	r3, [sl]
 8009670:	2b2a      	cmp	r3, #42	; 0x2a
 8009672:	d015      	beq.n	80096a0 <_vfiprintf_r+0x13c>
 8009674:	9a07      	ldr	r2, [sp, #28]
 8009676:	4654      	mov	r4, sl
 8009678:	2000      	movs	r0, #0
 800967a:	f04f 0c0a 	mov.w	ip, #10
 800967e:	4621      	mov	r1, r4
 8009680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009684:	3b30      	subs	r3, #48	; 0x30
 8009686:	2b09      	cmp	r3, #9
 8009688:	d94e      	bls.n	8009728 <_vfiprintf_r+0x1c4>
 800968a:	b1b0      	cbz	r0, 80096ba <_vfiprintf_r+0x156>
 800968c:	9207      	str	r2, [sp, #28]
 800968e:	e014      	b.n	80096ba <_vfiprintf_r+0x156>
 8009690:	eba0 0308 	sub.w	r3, r0, r8
 8009694:	fa09 f303 	lsl.w	r3, r9, r3
 8009698:	4313      	orrs	r3, r2
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	46a2      	mov	sl, r4
 800969e:	e7d2      	b.n	8009646 <_vfiprintf_r+0xe2>
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	1d19      	adds	r1, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	9103      	str	r1, [sp, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfbb      	ittet	lt
 80096ac:	425b      	neglt	r3, r3
 80096ae:	f042 0202 	orrlt.w	r2, r2, #2
 80096b2:	9307      	strge	r3, [sp, #28]
 80096b4:	9307      	strlt	r3, [sp, #28]
 80096b6:	bfb8      	it	lt
 80096b8:	9204      	strlt	r2, [sp, #16]
 80096ba:	7823      	ldrb	r3, [r4, #0]
 80096bc:	2b2e      	cmp	r3, #46	; 0x2e
 80096be:	d10c      	bne.n	80096da <_vfiprintf_r+0x176>
 80096c0:	7863      	ldrb	r3, [r4, #1]
 80096c2:	2b2a      	cmp	r3, #42	; 0x2a
 80096c4:	d135      	bne.n	8009732 <_vfiprintf_r+0x1ce>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	1d1a      	adds	r2, r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	9203      	str	r2, [sp, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bfb8      	it	lt
 80096d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096d6:	3402      	adds	r4, #2
 80096d8:	9305      	str	r3, [sp, #20]
 80096da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097c0 <_vfiprintf_r+0x25c>
 80096de:	7821      	ldrb	r1, [r4, #0]
 80096e0:	2203      	movs	r2, #3
 80096e2:	4650      	mov	r0, sl
 80096e4:	f7f6 fe04 	bl	80002f0 <memchr>
 80096e8:	b140      	cbz	r0, 80096fc <_vfiprintf_r+0x198>
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	eba0 000a 	sub.w	r0, r0, sl
 80096f0:	fa03 f000 	lsl.w	r0, r3, r0
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	4303      	orrs	r3, r0
 80096f8:	3401      	adds	r4, #1
 80096fa:	9304      	str	r3, [sp, #16]
 80096fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009700:	482c      	ldr	r0, [pc, #176]	; (80097b4 <_vfiprintf_r+0x250>)
 8009702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009706:	2206      	movs	r2, #6
 8009708:	f7f6 fdf2 	bl	80002f0 <memchr>
 800970c:	2800      	cmp	r0, #0
 800970e:	d03f      	beq.n	8009790 <_vfiprintf_r+0x22c>
 8009710:	4b29      	ldr	r3, [pc, #164]	; (80097b8 <_vfiprintf_r+0x254>)
 8009712:	bb1b      	cbnz	r3, 800975c <_vfiprintf_r+0x1f8>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	3307      	adds	r3, #7
 8009718:	f023 0307 	bic.w	r3, r3, #7
 800971c:	3308      	adds	r3, #8
 800971e:	9303      	str	r3, [sp, #12]
 8009720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009722:	443b      	add	r3, r7
 8009724:	9309      	str	r3, [sp, #36]	; 0x24
 8009726:	e767      	b.n	80095f8 <_vfiprintf_r+0x94>
 8009728:	fb0c 3202 	mla	r2, ip, r2, r3
 800972c:	460c      	mov	r4, r1
 800972e:	2001      	movs	r0, #1
 8009730:	e7a5      	b.n	800967e <_vfiprintf_r+0x11a>
 8009732:	2300      	movs	r3, #0
 8009734:	3401      	adds	r4, #1
 8009736:	9305      	str	r3, [sp, #20]
 8009738:	4619      	mov	r1, r3
 800973a:	f04f 0c0a 	mov.w	ip, #10
 800973e:	4620      	mov	r0, r4
 8009740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009744:	3a30      	subs	r2, #48	; 0x30
 8009746:	2a09      	cmp	r2, #9
 8009748:	d903      	bls.n	8009752 <_vfiprintf_r+0x1ee>
 800974a:	2b00      	cmp	r3, #0
 800974c:	d0c5      	beq.n	80096da <_vfiprintf_r+0x176>
 800974e:	9105      	str	r1, [sp, #20]
 8009750:	e7c3      	b.n	80096da <_vfiprintf_r+0x176>
 8009752:	fb0c 2101 	mla	r1, ip, r1, r2
 8009756:	4604      	mov	r4, r0
 8009758:	2301      	movs	r3, #1
 800975a:	e7f0      	b.n	800973e <_vfiprintf_r+0x1da>
 800975c:	ab03      	add	r3, sp, #12
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	462a      	mov	r2, r5
 8009762:	4b16      	ldr	r3, [pc, #88]	; (80097bc <_vfiprintf_r+0x258>)
 8009764:	a904      	add	r1, sp, #16
 8009766:	4630      	mov	r0, r6
 8009768:	f7fd ff7e 	bl	8007668 <_printf_float>
 800976c:	4607      	mov	r7, r0
 800976e:	1c78      	adds	r0, r7, #1
 8009770:	d1d6      	bne.n	8009720 <_vfiprintf_r+0x1bc>
 8009772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009774:	07d9      	lsls	r1, r3, #31
 8009776:	d405      	bmi.n	8009784 <_vfiprintf_r+0x220>
 8009778:	89ab      	ldrh	r3, [r5, #12]
 800977a:	059a      	lsls	r2, r3, #22
 800977c:	d402      	bmi.n	8009784 <_vfiprintf_r+0x220>
 800977e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009780:	f7ff fa34 	bl	8008bec <__retarget_lock_release_recursive>
 8009784:	89ab      	ldrh	r3, [r5, #12]
 8009786:	065b      	lsls	r3, r3, #25
 8009788:	f53f af12 	bmi.w	80095b0 <_vfiprintf_r+0x4c>
 800978c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800978e:	e711      	b.n	80095b4 <_vfiprintf_r+0x50>
 8009790:	ab03      	add	r3, sp, #12
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	462a      	mov	r2, r5
 8009796:	4b09      	ldr	r3, [pc, #36]	; (80097bc <_vfiprintf_r+0x258>)
 8009798:	a904      	add	r1, sp, #16
 800979a:	4630      	mov	r0, r6
 800979c:	f7fe f9f0 	bl	8007b80 <_printf_i>
 80097a0:	e7e4      	b.n	800976c <_vfiprintf_r+0x208>
 80097a2:	bf00      	nop
 80097a4:	08009fb0 	.word	0x08009fb0
 80097a8:	08009fd0 	.word	0x08009fd0
 80097ac:	08009f90 	.word	0x08009f90
 80097b0:	0800a14c 	.word	0x0800a14c
 80097b4:	0800a156 	.word	0x0800a156
 80097b8:	08007669 	.word	0x08007669
 80097bc:	0800953f 	.word	0x0800953f
 80097c0:	0800a152 	.word	0x0800a152

080097c4 <_sbrk_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d06      	ldr	r5, [pc, #24]	; (80097e0 <_sbrk_r+0x1c>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	f7f7 fd40 	bl	8001254 <_sbrk>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_sbrk_r+0x1a>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_sbrk_r+0x1a>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	240009c0 	.word	0x240009c0

080097e4 <__sread>:
 80097e4:	b510      	push	{r4, lr}
 80097e6:	460c      	mov	r4, r1
 80097e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ec:	f000 faa8 	bl	8009d40 <_read_r>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	bfab      	itete	ge
 80097f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097f6:	89a3      	ldrhlt	r3, [r4, #12]
 80097f8:	181b      	addge	r3, r3, r0
 80097fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097fe:	bfac      	ite	ge
 8009800:	6563      	strge	r3, [r4, #84]	; 0x54
 8009802:	81a3      	strhlt	r3, [r4, #12]
 8009804:	bd10      	pop	{r4, pc}

08009806 <__swrite>:
 8009806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980a:	461f      	mov	r7, r3
 800980c:	898b      	ldrh	r3, [r1, #12]
 800980e:	05db      	lsls	r3, r3, #23
 8009810:	4605      	mov	r5, r0
 8009812:	460c      	mov	r4, r1
 8009814:	4616      	mov	r6, r2
 8009816:	d505      	bpl.n	8009824 <__swrite+0x1e>
 8009818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800981c:	2302      	movs	r3, #2
 800981e:	2200      	movs	r2, #0
 8009820:	f000 f9f8 	bl	8009c14 <_lseek_r>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800982a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	4632      	mov	r2, r6
 8009832:	463b      	mov	r3, r7
 8009834:	4628      	mov	r0, r5
 8009836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800983a:	f000 b869 	b.w	8009910 <_write_r>

0800983e <__sseek>:
 800983e:	b510      	push	{r4, lr}
 8009840:	460c      	mov	r4, r1
 8009842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009846:	f000 f9e5 	bl	8009c14 <_lseek_r>
 800984a:	1c43      	adds	r3, r0, #1
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	bf15      	itete	ne
 8009850:	6560      	strne	r0, [r4, #84]	; 0x54
 8009852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800985a:	81a3      	strheq	r3, [r4, #12]
 800985c:	bf18      	it	ne
 800985e:	81a3      	strhne	r3, [r4, #12]
 8009860:	bd10      	pop	{r4, pc}

08009862 <__sclose>:
 8009862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009866:	f000 b8f1 	b.w	8009a4c <_close_r>
	...

0800986c <__swbuf_r>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	460e      	mov	r6, r1
 8009870:	4614      	mov	r4, r2
 8009872:	4605      	mov	r5, r0
 8009874:	b118      	cbz	r0, 800987e <__swbuf_r+0x12>
 8009876:	6983      	ldr	r3, [r0, #24]
 8009878:	b90b      	cbnz	r3, 800987e <__swbuf_r+0x12>
 800987a:	f7ff f913 	bl	8008aa4 <__sinit>
 800987e:	4b21      	ldr	r3, [pc, #132]	; (8009904 <__swbuf_r+0x98>)
 8009880:	429c      	cmp	r4, r3
 8009882:	d12b      	bne.n	80098dc <__swbuf_r+0x70>
 8009884:	686c      	ldr	r4, [r5, #4]
 8009886:	69a3      	ldr	r3, [r4, #24]
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	071a      	lsls	r2, r3, #28
 800988e:	d52f      	bpl.n	80098f0 <__swbuf_r+0x84>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	b36b      	cbz	r3, 80098f0 <__swbuf_r+0x84>
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	6820      	ldr	r0, [r4, #0]
 8009898:	1ac0      	subs	r0, r0, r3
 800989a:	6963      	ldr	r3, [r4, #20]
 800989c:	b2f6      	uxtb	r6, r6
 800989e:	4283      	cmp	r3, r0
 80098a0:	4637      	mov	r7, r6
 80098a2:	dc04      	bgt.n	80098ae <__swbuf_r+0x42>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f966 	bl	8009b78 <_fflush_r>
 80098ac:	bb30      	cbnz	r0, 80098fc <__swbuf_r+0x90>
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	60a3      	str	r3, [r4, #8]
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	701e      	strb	r6, [r3, #0]
 80098bc:	6963      	ldr	r3, [r4, #20]
 80098be:	3001      	adds	r0, #1
 80098c0:	4283      	cmp	r3, r0
 80098c2:	d004      	beq.n	80098ce <__swbuf_r+0x62>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	07db      	lsls	r3, r3, #31
 80098c8:	d506      	bpl.n	80098d8 <__swbuf_r+0x6c>
 80098ca:	2e0a      	cmp	r6, #10
 80098cc:	d104      	bne.n	80098d8 <__swbuf_r+0x6c>
 80098ce:	4621      	mov	r1, r4
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f951 	bl	8009b78 <_fflush_r>
 80098d6:	b988      	cbnz	r0, 80098fc <__swbuf_r+0x90>
 80098d8:	4638      	mov	r0, r7
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <__swbuf_r+0x9c>)
 80098de:	429c      	cmp	r4, r3
 80098e0:	d101      	bne.n	80098e6 <__swbuf_r+0x7a>
 80098e2:	68ac      	ldr	r4, [r5, #8]
 80098e4:	e7cf      	b.n	8009886 <__swbuf_r+0x1a>
 80098e6:	4b09      	ldr	r3, [pc, #36]	; (800990c <__swbuf_r+0xa0>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	bf08      	it	eq
 80098ec:	68ec      	ldreq	r4, [r5, #12]
 80098ee:	e7ca      	b.n	8009886 <__swbuf_r+0x1a>
 80098f0:	4621      	mov	r1, r4
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 f81e 	bl	8009934 <__swsetup_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0cb      	beq.n	8009894 <__swbuf_r+0x28>
 80098fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009900:	e7ea      	b.n	80098d8 <__swbuf_r+0x6c>
 8009902:	bf00      	nop
 8009904:	08009fb0 	.word	0x08009fb0
 8009908:	08009fd0 	.word	0x08009fd0
 800990c:	08009f90 	.word	0x08009f90

08009910 <_write_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_write_r+0x20>)
 8009914:	4604      	mov	r4, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	2200      	movs	r2, #0
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7f7 fc47 	bl	80011b2 <_write>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_write_r+0x1e>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_write_r+0x1e>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	240009c0 	.word	0x240009c0

08009934 <__swsetup_r>:
 8009934:	4b32      	ldr	r3, [pc, #200]	; (8009a00 <__swsetup_r+0xcc>)
 8009936:	b570      	push	{r4, r5, r6, lr}
 8009938:	681d      	ldr	r5, [r3, #0]
 800993a:	4606      	mov	r6, r0
 800993c:	460c      	mov	r4, r1
 800993e:	b125      	cbz	r5, 800994a <__swsetup_r+0x16>
 8009940:	69ab      	ldr	r3, [r5, #24]
 8009942:	b913      	cbnz	r3, 800994a <__swsetup_r+0x16>
 8009944:	4628      	mov	r0, r5
 8009946:	f7ff f8ad 	bl	8008aa4 <__sinit>
 800994a:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <__swsetup_r+0xd0>)
 800994c:	429c      	cmp	r4, r3
 800994e:	d10f      	bne.n	8009970 <__swsetup_r+0x3c>
 8009950:	686c      	ldr	r4, [r5, #4]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009958:	0719      	lsls	r1, r3, #28
 800995a:	d42c      	bmi.n	80099b6 <__swsetup_r+0x82>
 800995c:	06dd      	lsls	r5, r3, #27
 800995e:	d411      	bmi.n	8009984 <__swsetup_r+0x50>
 8009960:	2309      	movs	r3, #9
 8009962:	6033      	str	r3, [r6, #0]
 8009964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800996e:	e03e      	b.n	80099ee <__swsetup_r+0xba>
 8009970:	4b25      	ldr	r3, [pc, #148]	; (8009a08 <__swsetup_r+0xd4>)
 8009972:	429c      	cmp	r4, r3
 8009974:	d101      	bne.n	800997a <__swsetup_r+0x46>
 8009976:	68ac      	ldr	r4, [r5, #8]
 8009978:	e7eb      	b.n	8009952 <__swsetup_r+0x1e>
 800997a:	4b24      	ldr	r3, [pc, #144]	; (8009a0c <__swsetup_r+0xd8>)
 800997c:	429c      	cmp	r4, r3
 800997e:	bf08      	it	eq
 8009980:	68ec      	ldreq	r4, [r5, #12]
 8009982:	e7e6      	b.n	8009952 <__swsetup_r+0x1e>
 8009984:	0758      	lsls	r0, r3, #29
 8009986:	d512      	bpl.n	80099ae <__swsetup_r+0x7a>
 8009988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800998a:	b141      	cbz	r1, 800999e <__swsetup_r+0x6a>
 800998c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009990:	4299      	cmp	r1, r3
 8009992:	d002      	beq.n	800999a <__swsetup_r+0x66>
 8009994:	4630      	mov	r0, r6
 8009996:	f7ff fcdb 	bl	8009350 <_free_r>
 800999a:	2300      	movs	r3, #0
 800999c:	6363      	str	r3, [r4, #52]	; 0x34
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099a4:	81a3      	strh	r3, [r4, #12]
 80099a6:	2300      	movs	r3, #0
 80099a8:	6063      	str	r3, [r4, #4]
 80099aa:	6923      	ldr	r3, [r4, #16]
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f043 0308 	orr.w	r3, r3, #8
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	b94b      	cbnz	r3, 80099ce <__swsetup_r+0x9a>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c4:	d003      	beq.n	80099ce <__swsetup_r+0x9a>
 80099c6:	4621      	mov	r1, r4
 80099c8:	4630      	mov	r0, r6
 80099ca:	f000 f95b 	bl	8009c84 <__smakebuf_r>
 80099ce:	89a0      	ldrh	r0, [r4, #12]
 80099d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099d4:	f010 0301 	ands.w	r3, r0, #1
 80099d8:	d00a      	beq.n	80099f0 <__swsetup_r+0xbc>
 80099da:	2300      	movs	r3, #0
 80099dc:	60a3      	str	r3, [r4, #8]
 80099de:	6963      	ldr	r3, [r4, #20]
 80099e0:	425b      	negs	r3, r3
 80099e2:	61a3      	str	r3, [r4, #24]
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	b943      	cbnz	r3, 80099fa <__swsetup_r+0xc6>
 80099e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099ec:	d1ba      	bne.n	8009964 <__swsetup_r+0x30>
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	0781      	lsls	r1, r0, #30
 80099f2:	bf58      	it	pl
 80099f4:	6963      	ldrpl	r3, [r4, #20]
 80099f6:	60a3      	str	r3, [r4, #8]
 80099f8:	e7f4      	b.n	80099e4 <__swsetup_r+0xb0>
 80099fa:	2000      	movs	r0, #0
 80099fc:	e7f7      	b.n	80099ee <__swsetup_r+0xba>
 80099fe:	bf00      	nop
 8009a00:	24000018 	.word	0x24000018
 8009a04:	08009fb0 	.word	0x08009fb0
 8009a08:	08009fd0 	.word	0x08009fd0
 8009a0c:	08009f90 	.word	0x08009f90

08009a10 <__assert_func>:
 8009a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a12:	4614      	mov	r4, r2
 8009a14:	461a      	mov	r2, r3
 8009a16:	4b09      	ldr	r3, [pc, #36]	; (8009a3c <__assert_func+0x2c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	68d8      	ldr	r0, [r3, #12]
 8009a1e:	b14c      	cbz	r4, 8009a34 <__assert_func+0x24>
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <__assert_func+0x30>)
 8009a22:	9100      	str	r1, [sp, #0]
 8009a24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a28:	4906      	ldr	r1, [pc, #24]	; (8009a44 <__assert_func+0x34>)
 8009a2a:	462b      	mov	r3, r5
 8009a2c:	f000 f8e0 	bl	8009bf0 <fiprintf>
 8009a30:	f000 f9a5 	bl	8009d7e <abort>
 8009a34:	4b04      	ldr	r3, [pc, #16]	; (8009a48 <__assert_func+0x38>)
 8009a36:	461c      	mov	r4, r3
 8009a38:	e7f3      	b.n	8009a22 <__assert_func+0x12>
 8009a3a:	bf00      	nop
 8009a3c:	24000018 	.word	0x24000018
 8009a40:	0800a15d 	.word	0x0800a15d
 8009a44:	0800a16a 	.word	0x0800a16a
 8009a48:	0800a198 	.word	0x0800a198

08009a4c <_close_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4d06      	ldr	r5, [pc, #24]	; (8009a68 <_close_r+0x1c>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	f7f7 fbc7 	bl	80011ea <_close>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_close_r+0x1a>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_close_r+0x1a>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	240009c0 	.word	0x240009c0

08009a6c <__sflush_r>:
 8009a6c:	898a      	ldrh	r2, [r1, #12]
 8009a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a72:	4605      	mov	r5, r0
 8009a74:	0710      	lsls	r0, r2, #28
 8009a76:	460c      	mov	r4, r1
 8009a78:	d458      	bmi.n	8009b2c <__sflush_r+0xc0>
 8009a7a:	684b      	ldr	r3, [r1, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dc05      	bgt.n	8009a8c <__sflush_r+0x20>
 8009a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dc02      	bgt.n	8009a8c <__sflush_r+0x20>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	d0f9      	beq.n	8009a86 <__sflush_r+0x1a>
 8009a92:	2300      	movs	r3, #0
 8009a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a98:	682f      	ldr	r7, [r5, #0]
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	d032      	beq.n	8009b04 <__sflush_r+0x98>
 8009a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	075a      	lsls	r2, r3, #29
 8009aa4:	d505      	bpl.n	8009ab2 <__sflush_r+0x46>
 8009aa6:	6863      	ldr	r3, [r4, #4]
 8009aa8:	1ac0      	subs	r0, r0, r3
 8009aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aac:	b10b      	cbz	r3, 8009ab2 <__sflush_r+0x46>
 8009aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ab0:	1ac0      	subs	r0, r0, r3
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ab8:	6a21      	ldr	r1, [r4, #32]
 8009aba:	4628      	mov	r0, r5
 8009abc:	47b0      	blx	r6
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	d106      	bne.n	8009ad2 <__sflush_r+0x66>
 8009ac4:	6829      	ldr	r1, [r5, #0]
 8009ac6:	291d      	cmp	r1, #29
 8009ac8:	d82c      	bhi.n	8009b24 <__sflush_r+0xb8>
 8009aca:	4a2a      	ldr	r2, [pc, #168]	; (8009b74 <__sflush_r+0x108>)
 8009acc:	40ca      	lsrs	r2, r1
 8009ace:	07d6      	lsls	r6, r2, #31
 8009ad0:	d528      	bpl.n	8009b24 <__sflush_r+0xb8>
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	6062      	str	r2, [r4, #4]
 8009ad6:	04d9      	lsls	r1, r3, #19
 8009ad8:	6922      	ldr	r2, [r4, #16]
 8009ada:	6022      	str	r2, [r4, #0]
 8009adc:	d504      	bpl.n	8009ae8 <__sflush_r+0x7c>
 8009ade:	1c42      	adds	r2, r0, #1
 8009ae0:	d101      	bne.n	8009ae6 <__sflush_r+0x7a>
 8009ae2:	682b      	ldr	r3, [r5, #0]
 8009ae4:	b903      	cbnz	r3, 8009ae8 <__sflush_r+0x7c>
 8009ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aea:	602f      	str	r7, [r5, #0]
 8009aec:	2900      	cmp	r1, #0
 8009aee:	d0ca      	beq.n	8009a86 <__sflush_r+0x1a>
 8009af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d002      	beq.n	8009afe <__sflush_r+0x92>
 8009af8:	4628      	mov	r0, r5
 8009afa:	f7ff fc29 	bl	8009350 <_free_r>
 8009afe:	2000      	movs	r0, #0
 8009b00:	6360      	str	r0, [r4, #52]	; 0x34
 8009b02:	e7c1      	b.n	8009a88 <__sflush_r+0x1c>
 8009b04:	6a21      	ldr	r1, [r4, #32]
 8009b06:	2301      	movs	r3, #1
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b0      	blx	r6
 8009b0c:	1c41      	adds	r1, r0, #1
 8009b0e:	d1c7      	bne.n	8009aa0 <__sflush_r+0x34>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0c4      	beq.n	8009aa0 <__sflush_r+0x34>
 8009b16:	2b1d      	cmp	r3, #29
 8009b18:	d001      	beq.n	8009b1e <__sflush_r+0xb2>
 8009b1a:	2b16      	cmp	r3, #22
 8009b1c:	d101      	bne.n	8009b22 <__sflush_r+0xb6>
 8009b1e:	602f      	str	r7, [r5, #0]
 8009b20:	e7b1      	b.n	8009a86 <__sflush_r+0x1a>
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	e7ad      	b.n	8009a88 <__sflush_r+0x1c>
 8009b2c:	690f      	ldr	r7, [r1, #16]
 8009b2e:	2f00      	cmp	r7, #0
 8009b30:	d0a9      	beq.n	8009a86 <__sflush_r+0x1a>
 8009b32:	0793      	lsls	r3, r2, #30
 8009b34:	680e      	ldr	r6, [r1, #0]
 8009b36:	bf08      	it	eq
 8009b38:	694b      	ldreq	r3, [r1, #20]
 8009b3a:	600f      	str	r7, [r1, #0]
 8009b3c:	bf18      	it	ne
 8009b3e:	2300      	movne	r3, #0
 8009b40:	eba6 0807 	sub.w	r8, r6, r7
 8009b44:	608b      	str	r3, [r1, #8]
 8009b46:	f1b8 0f00 	cmp.w	r8, #0
 8009b4a:	dd9c      	ble.n	8009a86 <__sflush_r+0x1a>
 8009b4c:	6a21      	ldr	r1, [r4, #32]
 8009b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b50:	4643      	mov	r3, r8
 8009b52:	463a      	mov	r2, r7
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b0      	blx	r6
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	dc06      	bgt.n	8009b6a <__sflush_r+0xfe>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b68:	e78e      	b.n	8009a88 <__sflush_r+0x1c>
 8009b6a:	4407      	add	r7, r0
 8009b6c:	eba8 0800 	sub.w	r8, r8, r0
 8009b70:	e7e9      	b.n	8009b46 <__sflush_r+0xda>
 8009b72:	bf00      	nop
 8009b74:	20400001 	.word	0x20400001

08009b78 <_fflush_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	690b      	ldr	r3, [r1, #16]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	b913      	cbnz	r3, 8009b88 <_fflush_r+0x10>
 8009b82:	2500      	movs	r5, #0
 8009b84:	4628      	mov	r0, r5
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	b118      	cbz	r0, 8009b92 <_fflush_r+0x1a>
 8009b8a:	6983      	ldr	r3, [r0, #24]
 8009b8c:	b90b      	cbnz	r3, 8009b92 <_fflush_r+0x1a>
 8009b8e:	f7fe ff89 	bl	8008aa4 <__sinit>
 8009b92:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <_fflush_r+0x6c>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	d11b      	bne.n	8009bd0 <_fflush_r+0x58>
 8009b98:	686c      	ldr	r4, [r5, #4]
 8009b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0ef      	beq.n	8009b82 <_fflush_r+0xa>
 8009ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ba4:	07d0      	lsls	r0, r2, #31
 8009ba6:	d404      	bmi.n	8009bb2 <_fflush_r+0x3a>
 8009ba8:	0599      	lsls	r1, r3, #22
 8009baa:	d402      	bmi.n	8009bb2 <_fflush_r+0x3a>
 8009bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bae:	f7ff f81c 	bl	8008bea <__retarget_lock_acquire_recursive>
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	f7ff ff59 	bl	8009a6c <__sflush_r>
 8009bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bbc:	07da      	lsls	r2, r3, #31
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	d4e0      	bmi.n	8009b84 <_fflush_r+0xc>
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	059b      	lsls	r3, r3, #22
 8009bc6:	d4dd      	bmi.n	8009b84 <_fflush_r+0xc>
 8009bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bca:	f7ff f80f 	bl	8008bec <__retarget_lock_release_recursive>
 8009bce:	e7d9      	b.n	8009b84 <_fflush_r+0xc>
 8009bd0:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <_fflush_r+0x70>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <_fflush_r+0x62>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7df      	b.n	8009b9a <_fflush_r+0x22>
 8009bda:	4b04      	ldr	r3, [pc, #16]	; (8009bec <_fflush_r+0x74>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7da      	b.n	8009b9a <_fflush_r+0x22>
 8009be4:	08009fb0 	.word	0x08009fb0
 8009be8:	08009fd0 	.word	0x08009fd0
 8009bec:	08009f90 	.word	0x08009f90

08009bf0 <fiprintf>:
 8009bf0:	b40e      	push	{r1, r2, r3}
 8009bf2:	b503      	push	{r0, r1, lr}
 8009bf4:	4601      	mov	r1, r0
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	4805      	ldr	r0, [pc, #20]	; (8009c10 <fiprintf+0x20>)
 8009bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfe:	6800      	ldr	r0, [r0, #0]
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	f7ff fcaf 	bl	8009564 <_vfiprintf_r>
 8009c06:	b002      	add	sp, #8
 8009c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c0c:	b003      	add	sp, #12
 8009c0e:	4770      	bx	lr
 8009c10:	24000018 	.word	0x24000018

08009c14 <_lseek_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d07      	ldr	r5, [pc, #28]	; (8009c34 <_lseek_r+0x20>)
 8009c18:	4604      	mov	r4, r0
 8009c1a:	4608      	mov	r0, r1
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	2200      	movs	r2, #0
 8009c20:	602a      	str	r2, [r5, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	f7f7 fb08 	bl	8001238 <_lseek>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_lseek_r+0x1e>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_lseek_r+0x1e>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	240009c0 	.word	0x240009c0

08009c38 <__swhatbuf_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	2900      	cmp	r1, #0
 8009c42:	b096      	sub	sp, #88	; 0x58
 8009c44:	4614      	mov	r4, r2
 8009c46:	461d      	mov	r5, r3
 8009c48:	da08      	bge.n	8009c5c <__swhatbuf_r+0x24>
 8009c4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	061a      	lsls	r2, r3, #24
 8009c54:	d410      	bmi.n	8009c78 <__swhatbuf_r+0x40>
 8009c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c5a:	e00e      	b.n	8009c7a <__swhatbuf_r+0x42>
 8009c5c:	466a      	mov	r2, sp
 8009c5e:	f000 f895 	bl	8009d8c <_fstat_r>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	dbf1      	blt.n	8009c4a <__swhatbuf_r+0x12>
 8009c66:	9a01      	ldr	r2, [sp, #4]
 8009c68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c70:	425a      	negs	r2, r3
 8009c72:	415a      	adcs	r2, r3
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	e7ee      	b.n	8009c56 <__swhatbuf_r+0x1e>
 8009c78:	2340      	movs	r3, #64	; 0x40
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	b016      	add	sp, #88	; 0x58
 8009c80:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c84 <__smakebuf_r>:
 8009c84:	898b      	ldrh	r3, [r1, #12]
 8009c86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c88:	079d      	lsls	r5, r3, #30
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	d507      	bpl.n	8009ca0 <__smakebuf_r+0x1c>
 8009c90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	6123      	str	r3, [r4, #16]
 8009c98:	2301      	movs	r3, #1
 8009c9a:	6163      	str	r3, [r4, #20]
 8009c9c:	b002      	add	sp, #8
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	ab01      	add	r3, sp, #4
 8009ca2:	466a      	mov	r2, sp
 8009ca4:	f7ff ffc8 	bl	8009c38 <__swhatbuf_r>
 8009ca8:	9900      	ldr	r1, [sp, #0]
 8009caa:	4605      	mov	r5, r0
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff fbbb 	bl	8009428 <_malloc_r>
 8009cb2:	b948      	cbnz	r0, 8009cc8 <__smakebuf_r+0x44>
 8009cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb8:	059a      	lsls	r2, r3, #22
 8009cba:	d4ef      	bmi.n	8009c9c <__smakebuf_r+0x18>
 8009cbc:	f023 0303 	bic.w	r3, r3, #3
 8009cc0:	f043 0302 	orr.w	r3, r3, #2
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	e7e3      	b.n	8009c90 <__smakebuf_r+0xc>
 8009cc8:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <__smakebuf_r+0x7c>)
 8009cca:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	6163      	str	r3, [r4, #20]
 8009cda:	9b01      	ldr	r3, [sp, #4]
 8009cdc:	6120      	str	r0, [r4, #16]
 8009cde:	b15b      	cbz	r3, 8009cf8 <__smakebuf_r+0x74>
 8009ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f000 f863 	bl	8009db0 <_isatty_r>
 8009cea:	b128      	cbz	r0, 8009cf8 <__smakebuf_r+0x74>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f023 0303 	bic.w	r3, r3, #3
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	81a3      	strh	r3, [r4, #12]
 8009cf8:	89a0      	ldrh	r0, [r4, #12]
 8009cfa:	4305      	orrs	r5, r0
 8009cfc:	81a5      	strh	r5, [r4, #12]
 8009cfe:	e7cd      	b.n	8009c9c <__smakebuf_r+0x18>
 8009d00:	08008a3d 	.word	0x08008a3d

08009d04 <__ascii_mbtowc>:
 8009d04:	b082      	sub	sp, #8
 8009d06:	b901      	cbnz	r1, 8009d0a <__ascii_mbtowc+0x6>
 8009d08:	a901      	add	r1, sp, #4
 8009d0a:	b142      	cbz	r2, 8009d1e <__ascii_mbtowc+0x1a>
 8009d0c:	b14b      	cbz	r3, 8009d22 <__ascii_mbtowc+0x1e>
 8009d0e:	7813      	ldrb	r3, [r2, #0]
 8009d10:	600b      	str	r3, [r1, #0]
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	1e10      	subs	r0, r2, #0
 8009d16:	bf18      	it	ne
 8009d18:	2001      	movne	r0, #1
 8009d1a:	b002      	add	sp, #8
 8009d1c:	4770      	bx	lr
 8009d1e:	4610      	mov	r0, r2
 8009d20:	e7fb      	b.n	8009d1a <__ascii_mbtowc+0x16>
 8009d22:	f06f 0001 	mvn.w	r0, #1
 8009d26:	e7f8      	b.n	8009d1a <__ascii_mbtowc+0x16>

08009d28 <__malloc_lock>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__malloc_lock+0x8>)
 8009d2a:	f7fe bf5e 	b.w	8008bea <__retarget_lock_acquire_recursive>
 8009d2e:	bf00      	nop
 8009d30:	240009b4 	.word	0x240009b4

08009d34 <__malloc_unlock>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__malloc_unlock+0x8>)
 8009d36:	f7fe bf59 	b.w	8008bec <__retarget_lock_release_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	240009b4 	.word	0x240009b4

08009d40 <_read_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d07      	ldr	r5, [pc, #28]	; (8009d60 <_read_r+0x20>)
 8009d44:	4604      	mov	r4, r0
 8009d46:	4608      	mov	r0, r1
 8009d48:	4611      	mov	r1, r2
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	602a      	str	r2, [r5, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f7f7 fa12 	bl	8001178 <_read>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_read_r+0x1e>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_read_r+0x1e>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	240009c0 	.word	0x240009c0

08009d64 <__ascii_wctomb>:
 8009d64:	b149      	cbz	r1, 8009d7a <__ascii_wctomb+0x16>
 8009d66:	2aff      	cmp	r2, #255	; 0xff
 8009d68:	bf85      	ittet	hi
 8009d6a:	238a      	movhi	r3, #138	; 0x8a
 8009d6c:	6003      	strhi	r3, [r0, #0]
 8009d6e:	700a      	strbls	r2, [r1, #0]
 8009d70:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009d74:	bf98      	it	ls
 8009d76:	2001      	movls	r0, #1
 8009d78:	4770      	bx	lr
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4770      	bx	lr

08009d7e <abort>:
 8009d7e:	b508      	push	{r3, lr}
 8009d80:	2006      	movs	r0, #6
 8009d82:	f000 f84d 	bl	8009e20 <raise>
 8009d86:	2001      	movs	r0, #1
 8009d88:	f7f7 f9ec 	bl	8001164 <_exit>

08009d8c <_fstat_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	; (8009dac <_fstat_r+0x20>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	f7f7 fa32 	bl	8001202 <_fstat>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d102      	bne.n	8009da8 <_fstat_r+0x1c>
 8009da2:	682b      	ldr	r3, [r5, #0]
 8009da4:	b103      	cbz	r3, 8009da8 <_fstat_r+0x1c>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd38      	pop	{r3, r4, r5, pc}
 8009daa:	bf00      	nop
 8009dac:	240009c0 	.word	0x240009c0

08009db0 <_isatty_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	; (8009dcc <_isatty_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f7 fa31 	bl	8001222 <_isatty>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_isatty_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_isatty_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	240009c0 	.word	0x240009c0

08009dd0 <_raise_r>:
 8009dd0:	291f      	cmp	r1, #31
 8009dd2:	b538      	push	{r3, r4, r5, lr}
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	d904      	bls.n	8009de4 <_raise_r+0x14>
 8009dda:	2316      	movs	r3, #22
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009de6:	b112      	cbz	r2, 8009dee <_raise_r+0x1e>
 8009de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dec:	b94b      	cbnz	r3, 8009e02 <_raise_r+0x32>
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 f830 	bl	8009e54 <_getpid_r>
 8009df4:	462a      	mov	r2, r5
 8009df6:	4601      	mov	r1, r0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfe:	f000 b817 	b.w	8009e30 <_kill_r>
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d00a      	beq.n	8009e1c <_raise_r+0x4c>
 8009e06:	1c59      	adds	r1, r3, #1
 8009e08:	d103      	bne.n	8009e12 <_raise_r+0x42>
 8009e0a:	2316      	movs	r3, #22
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7e7      	b.n	8009de2 <_raise_r+0x12>
 8009e12:	2400      	movs	r4, #0
 8009e14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e18:	4628      	mov	r0, r5
 8009e1a:	4798      	blx	r3
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7e0      	b.n	8009de2 <_raise_r+0x12>

08009e20 <raise>:
 8009e20:	4b02      	ldr	r3, [pc, #8]	; (8009e2c <raise+0xc>)
 8009e22:	4601      	mov	r1, r0
 8009e24:	6818      	ldr	r0, [r3, #0]
 8009e26:	f7ff bfd3 	b.w	8009dd0 <_raise_r>
 8009e2a:	bf00      	nop
 8009e2c:	24000018 	.word	0x24000018

08009e30 <_kill_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d07      	ldr	r5, [pc, #28]	; (8009e50 <_kill_r+0x20>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	f7f7 f981 	bl	8001144 <_kill>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d102      	bne.n	8009e4c <_kill_r+0x1c>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	b103      	cbz	r3, 8009e4c <_kill_r+0x1c>
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	bf00      	nop
 8009e50:	240009c0 	.word	0x240009c0

08009e54 <_getpid_r>:
 8009e54:	f7f7 b96e 	b.w	8001134 <_getpid>

08009e58 <_init>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr

08009e64 <_fini>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	bf00      	nop
 8009e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6a:	bc08      	pop	{r3}
 8009e6c:	469e      	mov	lr, r3
 8009e6e:	4770      	bx	lr
